<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\code.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\code.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Oct 29 10:28:34 2020
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">HardFault_Handler</a><BR>
 <LI><a href="#[2]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">SVC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1]">HardFault_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[3]">PendSV_Handler</a> from port.o(.ARM.__at_0x2400) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[5]">SPI_IRQ</a> from sys_serv.o(.ARM.__at_0x2700) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2]">SVC_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[4]">UART_IRQ</a> from sys_serv.o(.ARM.__at_0x2600) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from config.o(.ARM.__AT_0x00002020)
 <LI><a href="#[b]">bootldr</a> from bootldr.o(.ARM.__at_0x1300) referenced from startup_armcm0.o(.text)
 <LI><a href="#[d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6]">osI2C_IRQ</a> from i2c_data.o(.ARM.__at_0x1700) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[e]">osMain_task</a> from main.o(i.osMain_task) referenced from main.o(i.main)
 <LI><a href="#[9]">osNFCFIELD_IRQ</a> from nfc_data.o(.ARM.__at_0x1100) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[8]">osNFCRX_IRQ</a> from nfc_data.o(.ARM.__at_0x1200) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[7]">osNFCTX_IRQ</a> from nfc_data.o(.ARM.__at_0x1000) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[10]">osSYSAUX_task</a> from i2c_ex_func.o(i.osSYSAUX_task) referenced from main.o(i.main)
 <LI><a href="#[f]">osSYSCORE_task</a> from nfc_ex_func.o(i.osSYSCORE_task) referenced from main.o(i.main)
 <LI><a href="#[a]">osTIM32_IRQ</a> from os_port.o(.ARM.__at_0x2500) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[12]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[11]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[1]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[22]"></a>OTA_opt</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, bootldr.o(BLDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OTA_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_OTA
</UL>

<P><STRONG><a name="[1c]"></a>memcpy_BLDR</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, bootldr.o(BLDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = memcpy_BLDR
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_I2C_BLDR_Handle
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_BLDR_Handle
</UL>

<P><STRONG><a name="[1b]"></a>memset_BLDR</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, bootldr.o(BLDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = memset_BLDR
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_I2C_BLDR_Handle
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_BLDR_Handle
</UL>

<P><STRONG><a name="[1a]"></a>NFC_BLDR_Handle</STRONG> (Thumb, 1028 bytes, Stack size 20 bytes, bootldr.o(BLDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NFC_BLDR_Handle &rArr; memset_BLDR
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_BLDR
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_BLDR
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCRX_IRQ_BLDR
</UL>

<P><STRONG><a name="[1d]"></a>NFCRX_IRQ_BLDR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bootldr.o(BLDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NFCRX_IRQ_BLDR &rArr; NFC_BLDR_Handle &rArr; memset_BLDR
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_BLDR_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osNFCRX_IRQ
</UL>

<P><STRONG><a name="[20]"></a>NFCTX_IRQ_BLDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bootldr.o(BLDR))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osNFCTX_IRQ
</UL>

<P><STRONG><a name="[21]"></a>NFCFIELD_IRQ_BLDR</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bootldr.o(BLDR))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osNFCFIELD_IRQ
</UL>

<P><STRONG><a name="[1e]"></a>HW_I2C_BLDR_Handle</STRONG> (Thumb, 406 bytes, Stack size 20 bytes, bootldr.o(BLDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_I2C_BLDR_Handle &rArr; memset_BLDR
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_BLDR
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_BLDR
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQ_BLDR
</UL>

<P><STRONG><a name="[1f]"></a>I2C_IRQ_BLDR</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, bootldr.o(BLDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_IRQ_BLDR &rArr; HW_I2C_BLDR_Handle &rArr; memset_BLDR
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_I2C_BLDR_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osI2C_IRQ
</UL>

<P><STRONG><a name="[7]"></a>osNFCTX_IRQ</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nfc_data.o(.ARM.__at_0x1000))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osNFCTX_IRQ &rArr; NFCTX_IRQ_APP &rArr; vTaskNotifyGiveFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTX_IRQ_APP
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTX_IRQ_BLDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>osNFCFIELD_IRQ</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nfc_data.o(.ARM.__at_0x1100))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osNFCFIELD_IRQ &rArr; NFCFIELD_IRQ_APP &rArr; vTaskNotifyGiveFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCFIELD_IRQ_APP
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCFIELD_IRQ_BLDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>osNFCRX_IRQ</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nfc_data.o(.ARM.__at_0x1200))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = osNFCRX_IRQ &rArr; NFCRX_IRQ_APP &rArr; NFC_TYPE2_DATA_Handle &rArr; HARV_go
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCRX_IRQ_APP
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCRX_IRQ_BLDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>bootldr</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, bootldr.o(.ARM.__at_0x1300))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bootldr &rArr; enter_OTA &rArr; OTA_opt
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_OTA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>enter_OTA</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, bootldr.o(.ARM.__at_0x1400))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enter_OTA &rArr; OTA_opt
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootldr
</UL>

<P><STRONG><a name="[6]"></a>osI2C_IRQ</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, i2c_data.o(.ARM.__at_0x1700))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osI2C_IRQ &rArr; I2C_IRQ_APP &rArr; vTaskNotifyGiveFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQ_APP
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQ_BLDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>NFC_FIELD_OFF_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(RW_IRAM1))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSYSCORE_task
</UL>

<P><STRONG><a name="[53]"></a>I2C_SLV_RD_RQST_Callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.I2C_SLV_RD_RQST_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSYSAUX_task
</UL>

<P><STRONG><a name="[54]"></a>I2C_SLV_WR_DONE_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.I2C_SLV_WR_DONE_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSYSAUX_task
</UL>

<P><STRONG><a name="[59]"></a>NFC_FIELD_ON_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.NFC_FIELD_ON_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSYSCORE_task
</UL>

<P><STRONG><a name="[56]"></a>NFC_TX_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.NFC_TX_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSYSCORE_task
</UL>

<P><STRONG><a name="[c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.ARM.__AT_0x00002020)
</UL>
<P><STRONG><a name="[77]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[23]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[78]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[79]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[7a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[7b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[7c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[74]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[6f]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
</UL>

<P><STRONG><a name="[70]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTick_Setup
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Passthrough_TX
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Passthrough_RX
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_mem_setup
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_TYPE2_DATA_Handle
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[30]"></a>GPIO_CLR_PIN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_ex_func.o(i.GPIO_CLR_PIN))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuitarBox_On
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_48SendData
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINK_PINMODE_INIT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleed_to_die (via Veneer)
</UL>

<P><STRONG><a name="[14]"></a>NFCTX_IRQ_APP</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, nfc_data.o(.ARM.__at_0x2100))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NFCTX_IRQ_APP &rArr; vTaskNotifyGiveFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HARV_go
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osNFCTX_IRQ
</UL>

<P><STRONG><a name="[4c]"></a>FLASH_lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, reg_ex_func.o(i.FLASH_lock))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_TYPE2_DATA_Handle
</UL>

<P><STRONG><a name="[84]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[15]"></a>NFCFIELD_IRQ_APP</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nfc_data.o(.ARM.__at_0x2200))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NFCFIELD_IRQ_APP &rArr; vTaskNotifyGiveFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HARV_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osNFCFIELD_IRQ
</UL>

<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[85]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>GPIO_GET_PIN</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio_ex_func.o(i.GPIO_GET_PIN))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicLamp_V2
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicLED_V2
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_TEST
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain_task
</UL>

<P><STRONG><a name="[31]"></a>GPIO_SET_INPUT_MODE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio_ex_func.o(i.GPIO_SET_INPUT_MODE))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINK_PINMODE_INIT
</UL>

<P><STRONG><a name="[2e]"></a>GPIO_SET_OUTPUT_MODE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio_ex_func.o(i.GPIO_SET_OUTPUT_MODE))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINK_PINMODE_INIT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleed_to_die (via Veneer)
</UL>

<P><STRONG><a name="[2f]"></a>GPIO_SET_PIN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_ex_func.o(i.GPIO_SET_PIN))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_48SendData
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuitarBox_Off
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINK_PINMODE_INIT
</UL>

<P><STRONG><a name="[16]"></a>NFCRX_IRQ_APP</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nfc_data.o(.ARM.__at_0x2300))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = NFCRX_IRQ_APP &rArr; NFC_TYPE2_DATA_Handle &rArr; HARV_go
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_TYPE2_DATA_Handle
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HARV_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osNFCRX_IRQ
</UL>

<P><STRONG><a name="[37]"></a>HARV_DIS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nfc_data.o(i.HARV_DIS))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_core_components
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_callback
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HARV_stop
</UL>

<P><STRONG><a name="[2d]"></a>EINK_PINMODE_INIT</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, eink_driver.o(i.EINK_PINMODE_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EINK_PINMODE_INIT
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_OUTPUT_MODE
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_INPUT_MODE
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[36]"></a>HARV_EN</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nfc_data.o(i.HARV_EN))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_callback
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HARV_go
</UL>

<P><STRONG><a name="[3]"></a>PendSV_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, port.o(.ARM.__at_0x2400))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GuitarBox_Off</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, eink_driver.o(i.GuitarBox_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GuitarBox_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicLamp_V2
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicLED_V2
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_TEST
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain_task
</UL>

<P><STRONG><a name="[34]"></a>GuitarBox_On</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, eink_driver.o(i.GuitarBox_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GuitarBox_On
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicLamp_V2
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicLED_V2
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_TEST
</UL>

<P><STRONG><a name="[28]"></a>HARV_go</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, nfc_data.o(i.HARV_go))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HARV_go
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_HARVcur_set
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HARV_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_TYPE2_DATA_Handle
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTX_IRQ_APP
</UL>

<P><STRONG><a name="[2a]"></a>HARV_stop</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, nfc_data.o(i.HARV_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HARV_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HARV_DIS
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCRX_IRQ_APP
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCFIELD_IRQ_APP
</UL>

<P><STRONG><a name="[38]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, port.o(i.prvSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvSetupTimerInterrupt &rArr; osTick_Setup &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTick_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[35]"></a>NFC_HARVcur_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nfc_data.o(i.NFC_HARVcur_set))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_callback
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HARV_go
</UL>

<P><STRONG><a name="[86]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[87]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6e]"></a>isNFC_HARV_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nfc_data.o(i.isNFC_HARV_on))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_callback
</UL>

<P><STRONG><a name="[a]"></a>osTIM32_IRQ</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_port.o(.ARM.__at_0x2500))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTIM32_IRQ &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_callback
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>MIC_TEST</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, eink_driver.o(i.MIC_TEST))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MIC_TEST &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuitarBox_On
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_48SendData
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuitarBox_Off
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain_task
</UL>

<P><STRONG><a name="[41]"></a>NFC_Passthrough_RX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nfc_ex_func.o(i.NFC_Passthrough_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NFC_Passthrough_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_RX_Callback
</UL>

<P><STRONG><a name="[43]"></a>NFC_RX_Callback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.NFC_RX_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NFC_RX_Callback &rArr; NFC_Passthrough_TX
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Passthrough_TX
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Passthrough_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSYSCORE_task
</UL>

<P><STRONG><a name="[44]"></a>NFC_Passthrough_TX</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, nfc_ex_func.o(i.NFC_Passthrough_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NFC_Passthrough_TX
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_RX_Callback
</UL>

<P><STRONG><a name="[49]"></a>vApplicationIdleHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_serv.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[4]"></a>UART_IRQ</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_serv.o(.ARM.__at_0x2600))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>HW_I2C_DATA_Handle</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, i2c_data.o(i.HW_I2C_DATA_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_I2C_DATA_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQ_APP
</UL>

<P><STRONG><a name="[71]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[5]"></a>SPI_IRQ</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_serv.o(.ARM.__at_0x2700))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>MusicLED_V2</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, eink_driver.o(i.MusicLED_V2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MusicLED_V2 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuitarBox_On
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_48SendData
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuitarBox_Off
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain_task
</UL>

<P><STRONG><a name="[46]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, eink_driver.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicLED_V2
</UL>

<P><STRONG><a name="[17]"></a>I2C_IRQ_APP</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, i2c_data.o(.ARM.__at_0x2800))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IRQ_APP &rArr; vTaskNotifyGiveFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_I2C_DATA_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osI2C_IRQ
</UL>

<P><STRONG><a name="[4b]"></a>MusicLamp_V2</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, eink_driver.o(i.MusicLamp_V2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MusicLamp_V2 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuitarBox_On
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_48SendData
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuitarBox_Off
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain_task
</UL>

<P><STRONG><a name="[2c]"></a>NFC_TYPE2_DATA_Handle</STRONG> (Thumb, 924 bytes, Stack size 24 bytes, nfc_data.o(i.NFC_TYPE2_DATA_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NFC_TYPE2_DATA_Handle &rArr; HARV_go
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HARV_go
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCRX_IRQ_APP
</UL>

<P><STRONG><a name="[3e]"></a>SPI_48SendData</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, eink_driver.o(i.SPI_48SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_48SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicLamp_V2
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicLED_V2
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_TEST
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain_task
</UL>

<P><STRONG><a name="[4d]"></a>init_core_components</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sys_ex_func.o(i.init_core_components))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_core_components &rArr; tag_mem_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_reg
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HARV_DIS
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_mem_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>init_reg</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, reg.o(i.init_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_core_components
</UL>

<P><STRONG><a name="[d]"></a>main</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = main &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_core_components
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINK_PINMODE_INIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e]"></a>osMain_task</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, main.o(i.osMain_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMain_task &rArr; MusicLamp_V2 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_48SendData
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicLamp_V2
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicLED_V2
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_TEST
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuitarBox_Off
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GET_PIN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[10]"></a>osSYSAUX_task</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, i2c_ex_func.o(i.osSYSAUX_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = osSYSAUX_task &rArr; ulTaskNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SLV_WR_DONE_Callback
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SLV_RD_RQST_Callback
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[f]"></a>osSYSCORE_task</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, nfc_ex_func.o(i.osSYSCORE_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = osSYSCORE_task &rArr; ulTaskNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_TX_Callback
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_RX_Callback
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_FIELD_ON_Callback
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_FIELD_OFF_Callback
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleed_to_die (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[39]"></a>osTick_Setup</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, os_port.o(i.osTick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osTick_Setup &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>

<P><STRONG><a name="[69]"></a>pvPortMalloc</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[67]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[4f]"></a>tag_mem_setup</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sys_serv.o(i.tag_mem_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tag_mem_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_core_components
</UL>

<P><STRONG><a name="[3c]"></a>tick_callback</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, sys_serv.o(i.tick_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tick_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isNFC_HARV_on
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_HARVcur_set
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HARV_EN
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HARV_DIS
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTIM32_IRQ
</UL>

<P><STRONG><a name="[55]"></a>ulTaskNotifyTake</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.ulTaskNotifyTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ulTaskNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSYSCORE_task
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSYSAUX_task
</UL>

<P><STRONG><a name="[5c]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
</UL>

<P><STRONG><a name="[68]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[5e]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[5d]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
</UL>

<P><STRONG><a name="[60]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
</UL>

<P><STRONG><a name="[62]"></a>vPortExitCritical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
</UL>

<P><STRONG><a name="[64]"></a>vPortFree</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[48]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
</UL>

<P><STRONG><a name="[3f]"></a>vTaskDelay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicLamp_V2
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicLED_V2
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_TEST
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain_task
</UL>

<P><STRONG><a name="[29]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tasks.o(i.vTaskNotifyGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskNotifyGiveFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQ_APP
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCRX_IRQ_APP
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCFIELD_IRQ_APP
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTX_IRQ_APP
</UL>

<P><STRONG><a name="[52]"></a>vTaskStartScheduler</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[32]"></a>vTaskSwitchContext</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[73]"></a>xPortStartScheduler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xPortStartScheduler &rArr; prvSetupTimerInterrupt &rArr; osTick_Setup &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3b]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTIM32_IRQ
</UL>

<P><STRONG><a name="[51]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>xTaskCreateStatic</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[75]"></a>xTaskIncrementTick</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[6d]"></a>xTaskResumeAll</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[58]"></a>bleed_to_die</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, nfc_data.o(RW_IRAM1))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_OUTPUT_MODE (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSYSCORE_task (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5b]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
</UL>

<P><STRONG><a name="[5f]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[47]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[63]"></a>prvDeleteTCB</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[12]"></a>prvIdleTask</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[65]"></a>prvInitialiseNewTask</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[61]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[76]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[6b]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[6c]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[11]"></a>prvTaskExitError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[3a]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_port.o(i.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTIM32_IRQ
</UL>

<P><STRONG><a name="[50]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, sys_ex_func.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_core_components
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
