; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\eink_driver.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\eink_driver.d --cpu=Cortex-M0 --apcs=interwork -O1 --diag_suppress=9931 -I.\APP -I.\APP\TN2115s_libs -I.\Common\CMSIS-FreeRTOS\10.0.1\Source\include -I.\Common\RTE\RTOS -I.\Common\CMSIS-FreeRTOS\10.0.1\CMSIS\RTOS2\FreeRTOS\Include -I.\Common\CMSIS-FreeRTOS\10.0.1\Source\portable\RVDS\ARM_CM0 -I.\APP\EINK -I.\Device_desc -I.\Common\CMSIS-FreeRTOS\10.0.1\Source -I.\Common\RTE\Device\ARMCM0 -I.\RTE\_soc_m0 -IC:\Users\bbb\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\Users\bbb\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\Device\ARM\ARMCM0\Include -D__MICROLIB -D__UVISION_VERSION=529 -D_RTE_ -DARMCM0 --omf_browse=.\objects\eink_driver.crf APP\EINK\EINK_Driver.c]
                          THUMB

                          AREA ||i.EINK_PINMODE_INIT||, CODE, READONLY, ALIGN=1

                  EINK_PINMODE_INIT PROC
;;;42     
;;;43     void EINK_PINMODE_INIT(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;44     {
;;;45     	//VCC
;;;46     	GPIO_SET_OUTPUT_MODE(EINK_VCC_EN_PIN);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       GPIO_SET_OUTPUT_MODE
;;;47     	
;;;48     	//LED 
;;;49     	GPIO_SET_OUTPUT_MODE(LED1 );  
000008  2004              MOVS     r0,#4
00000a  f7fffffe          BL       GPIO_SET_OUTPUT_MODE
;;;50     	GPIO_SET_OUTPUT_MODE(LED2 );
00000e  2040              MOVS     r0,#0x40
000010  f7fffffe          BL       GPIO_SET_OUTPUT_MODE
;;;51     	GPIO_SET_OUTPUT_MODE(LED3 );
000014  2401              MOVS     r4,#1
000016  02e4              LSLS     r4,r4,#11
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       GPIO_SET_OUTPUT_MODE
;;;52     	GPIO_SET_OUTPUT_MODE(LED4 );
00001e  0065              LSLS     r5,r4,#1
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       GPIO_SET_OUTPUT_MODE
;;;53     	
;;;54     	//SM1610
;;;55     	GPIO_SET_OUTPUT_MODE(PIN_CLK );
000026  10a6              ASRS     r6,r4,#2
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       GPIO_SET_OUTPUT_MODE
;;;56     	GPIO_SET_OUTPUT_MODE(PIN_SDI );
00002e  2080              MOVS     r0,#0x80
000030  f7fffffe          BL       GPIO_SET_OUTPUT_MODE
;;;57     	GPIO_SET_OUTPUT_MODE(PIN_LE );	
000034  1067              ASRS     r7,r4,#1
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       GPIO_SET_OUTPUT_MODE
;;;58     	
;;;59     	//GPIO_VCC INIT
;;;60     	GPIO_SET_PIN(EINK_VCC_EN_PIN);
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       GPIO_SET_PIN
;;;61     	
;;;62       //GPIO_LED INIT	
;;;63     	GPIO_SET_PIN(LED1);
000042  2004              MOVS     r0,#4
000044  f7fffffe          BL       GPIO_SET_PIN
;;;64     	GPIO_SET_PIN(LED2);
000048  2040              MOVS     r0,#0x40
00004a  f7fffffe          BL       GPIO_SET_PIN
;;;65     	GPIO_SET_PIN(LED3);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       GPIO_SET_PIN
;;;66     	GPIO_SET_PIN(LED4);
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       GPIO_SET_PIN
;;;67     	
;;;68     	//GPIO_SM1610 INIT
;;;69     	GPIO_CLR_PIN(PIN_CLK);
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       GPIO_CLR_PIN
;;;70     	GPIO_CLR_PIN(PIN_SDI);
000060  2080              MOVS     r0,#0x80
000062  f7fffffe          BL       GPIO_CLR_PIN
;;;71     	GPIO_CLR_PIN(PIN_LE);
000066  4638              MOV      r0,r7
000068  f7fffffe          BL       GPIO_CLR_PIN
;;;72     	//GPIO_KEY GPIO_MIC1
;;;73     	GPIO_SET_INPUT_MODE(PIN_KEY);	//´¥Ãþ°´¼ü
00006c  2020              MOVS     r0,#0x20
00006e  f7fffffe          BL       GPIO_SET_INPUT_MODE
;;;74     	GPIO_SET_INPUT_MODE(PIN_MIC_IN);//Éù¿Ø
000072  10e0              ASRS     r0,r4,#3
000074  f7fffffe          BL       GPIO_SET_INPUT_MODE
;;;75     }
000078  bdf8              POP      {r3-r7,pc}
;;;76     
                          ENDP


                          AREA ||i.GuitarBox_Off||, CODE, READONLY, ALIGN=1

                  GuitarBox_Off PROC
;;;225    }
;;;226    void  GuitarBox_Off(void)
000000  b510              PUSH     {r4,lr}
;;;227    {
;;;228    		GPIO_SET_PIN(LED1);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       GPIO_SET_PIN
;;;229    		GPIO_SET_PIN(LED2);
000008  2040              MOVS     r0,#0x40
00000a  f7fffffe          BL       GPIO_SET_PIN
;;;230    		GPIO_SET_PIN(LED3);
00000e  2001              MOVS     r0,#1
000010  02c0              LSLS     r0,r0,#11
000012  f7fffffe          BL       GPIO_SET_PIN
;;;231    		GPIO_SET_PIN(LED4);
000016  2001              MOVS     r0,#1
000018  0300              LSLS     r0,r0,#12
00001a  f7fffffe          BL       GPIO_SET_PIN
;;;232    }
00001e  bd10              POP      {r4,pc}
;;;233    
                          ENDP


                          AREA ||i.GuitarBox_On||, CODE, READONLY, ALIGN=1

                  GuitarBox_On PROC
;;;218    
;;;219    void  GuitarBox_On(void)
000000  b510              PUSH     {r4,lr}
;;;220    {
;;;221    		GPIO_CLR_PIN(LED1);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       GPIO_CLR_PIN
;;;222    		GPIO_CLR_PIN(LED2);
000008  2040              MOVS     r0,#0x40
00000a  f7fffffe          BL       GPIO_CLR_PIN
;;;223    		GPIO_CLR_PIN(LED3);
00000e  2001              MOVS     r0,#1
000010  02c0              LSLS     r0,r0,#11
000012  f7fffffe          BL       GPIO_CLR_PIN
;;;224    		GPIO_CLR_PIN(LED4);
000016  2001              MOVS     r0,#1
000018  0300              LSLS     r0,r0,#12
00001a  f7fffffe          BL       GPIO_CLR_PIN
;;;225    }
00001e  bd10              POP      {r4,pc}
;;;226    void  GuitarBox_Off(void)
                          ENDP


                          AREA ||i.GuitarDisplay||, CODE, READONLY, ALIGN=2

                  GuitarDisplay PROC
;;;158    }
;;;159    void  GuitarDisplay(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;160    {
;;;161    	uint32_t time=0,count=0;
000002  2400              MOVS     r4,#0
000004  2500              MOVS     r5,#0
;;;162    	RGBLED_OFF;
000006  2200              MOVS     r2,#0
000008  4611              MOV      r1,r2
00000a  4610              MOV      r0,r2
00000c  f7fffffe          BL       SPI_48SendData
;;;163    	GuitarBox_Off();
000010  f7fffffe          BL       GuitarBox_Off
;;;164    	while(1)
;;;165    	{
;;;166    		if(time >= 500)
000014  26ff              MOVS     r6,#0xff
000016  36f5              ADDS     r6,r6,#0xf5
;;;167    		{
;;;168    			if(time==500)
;;;169    			{
;;;170    				if(++count>7){
;;;171    				count=1;}
;;;172    			}
;;;173    			GPIO_CLR_PIN(LED1);
;;;174    			GPIO_SET_PIN(LED2);
;;;175    			GPIO_SET_PIN(LED3);
;;;176    			GPIO_CLR_PIN(LED4);
;;;177    			switch(count)
;;;178    			{
;;;179    				case 1:
;;;180    					RGBLED_WHITE;
;;;181    					break;
;;;182    				case 2:
;;;183    					RGBLED_RED;
;;;184    					break;	
;;;185    				case 3:
;;;186    					RGBLED_GREEN;
;;;187    					break;
;;;188    				case 4:
;;;189    					RGBLED_BLUE;
;;;190    					break;
;;;191    				case 5:
;;;192    					RGBLED_Y;
;;;193    					break;
;;;194    				case 6:
;;;195    					RGBLED_M;
;;;196    					break;
;;;197    				case 7:
;;;198    					RGBLED_C;
;;;199    					break;
;;;200    				default:	
;;;201    					RGBLED_OFF;
;;;202    					break;
;;;203    			}
;;;204    		}else{
;;;205    			GPIO_SET_PIN(LED1);
;;;206    			GPIO_CLR_PIN(LED2);
;;;207    			GPIO_CLR_PIN(LED3);
;;;208    			GPIO_SET_PIN(LED4);
;;;209    		}
;;;210    		if(++time > 1000)			
000018  0077              LSLS     r7,r6,#1
                  |L4.26|
00001a  42b4              CMP      r4,r6                 ;166
00001c  d34b              BCC      |L4.182|
00001e  42b4              CMP      r4,r6                 ;168
000020  d103              BNE      |L4.42|
000022  1c6d              ADDS     r5,r5,#1              ;170
000024  2d07              CMP      r5,#7                 ;170
000026  d900              BLS      |L4.42|
000028  2501              MOVS     r5,#1                 ;171
                  |L4.42|
00002a  2004              MOVS     r0,#4                 ;173
00002c  f7fffffe          BL       GPIO_CLR_PIN
000030  2040              MOVS     r0,#0x40              ;174
000032  f7fffffe          BL       GPIO_SET_PIN
000036  2001              MOVS     r0,#1                 ;175
000038  02c0              LSLS     r0,r0,#11             ;175
00003a  f7fffffe          BL       GPIO_SET_PIN
00003e  2001              MOVS     r0,#1                 ;176
000040  0300              LSLS     r0,r0,#12             ;176
000042  f7fffffe          BL       GPIO_CLR_PIN
000046  002b              MOVS     r3,r5                 ;177
000048  f7fffffe          BL       __ARM_common_switch8
00004c  082f050b          DCB      0x08,0x2f,0x05,0x0b
000050  11171d23          DCB      0x11,0x17,0x1d,0x23
000054  292f              DCB      0x29,0x2f
000056  4824              LDR      r0,|L4.232|
000058  4602              MOV      r2,r0                 ;180
00005a  4601              MOV      r1,r0                 ;180
00005c  f7fffffe          BL       SPI_48SendData
000060  e037              B        |L4.210|
000062  4a22              LDR      r2,|L4.236|
000064  4922              LDR      r1,|L4.240|
000066  4823              LDR      r0,|L4.244|
000068  f7fffffe          BL       SPI_48SendData
00006c  e031              B        |L4.210|
00006e  4a21              LDR      r2,|L4.244|
000070  1091              ASRS     r1,r2,#2              ;186
000072  0048              LSLS     r0,r1,#1              ;186
000074  f7fffffe          BL       SPI_48SendData
000078  e02b              B        |L4.210|
00007a  491e              LDR      r1,|L4.244|
00007c  4a1e              LDR      r2,|L4.248|
00007e  1088              ASRS     r0,r1,#2              ;189
000080  f7fffffe          BL       SPI_48SendData
000084  e025              B        |L4.210|
000086  4a1d              LDR      r2,|L4.252|
000088  481d              LDR      r0,|L4.256|
00008a  1091              ASRS     r1,r2,#2              ;192
00008c  f7fffffe          BL       SPI_48SendData
000090  e01f              B        |L4.210|
000092  4a1b              LDR      r2,|L4.256|
000094  481b              LDR      r0,|L4.260|
000096  1091              ASRS     r1,r2,#2              ;195
000098  f7fffffe          BL       SPI_48SendData
00009c  e019              B        |L4.210|
00009e  4a19              LDR      r2,|L4.260|
0000a0  1091              ASRS     r1,r2,#2              ;198
0000a2  0048              LSLS     r0,r1,#1              ;198
0000a4  f7fffffe          BL       SPI_48SendData
0000a8  e013              B        |L4.210|
0000aa  2200              MOVS     r2,#0                 ;201
0000ac  4611              MOV      r1,r2                 ;201
0000ae  4610              MOV      r0,r2                 ;201
0000b0  f7fffffe          BL       SPI_48SendData
0000b4  e00d              B        |L4.210|
                  |L4.182|
0000b6  2004              MOVS     r0,#4                 ;205
0000b8  f7fffffe          BL       GPIO_SET_PIN
0000bc  2040              MOVS     r0,#0x40              ;206
0000be  f7fffffe          BL       GPIO_CLR_PIN
0000c2  2001              MOVS     r0,#1                 ;207
0000c4  02c0              LSLS     r0,r0,#11             ;207
0000c6  f7fffffe          BL       GPIO_CLR_PIN
0000ca  2001              MOVS     r0,#1                 ;208
0000cc  0300              LSLS     r0,r0,#12             ;208
0000ce  f7fffffe          BL       GPIO_SET_PIN
                  |L4.210|
0000d2  1c64              ADDS     r4,r4,#1
0000d4  42bc              CMP      r4,r7
0000d6  d900              BLS      |L4.218|
;;;211    				time = 0;	
0000d8  2400              MOVS     r4,#0
                  |L4.218|
;;;212    		if(!KEY_STATE)
0000da  2020              MOVS     r0,#0x20
0000dc  f7fffffe          BL       GPIO_GET_PIN
0000e0  2800              CMP      r0,#0
0000e2  d19a              BNE      |L4.26|
;;;213    		{
;;;214    			break;
;;;215    		}	
;;;216    	}	
;;;217    }
0000e4  bdf8              POP      {r3-r7,pc}
;;;218    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L4.232|
                          DCD      0x0000ffff
                  |L4.236|
                          DCD      0x00002492
                  |L4.240|
                          DCD      0x00002924
                  |L4.244|
                          DCD      0x00009249
                  |L4.248|
                          DCD      0x00004924
                  |L4.252|
                          DCD      0x00006db6
                  |L4.256|
                          DCD      0x0000b6db
                  |L4.260|
                          DCD      0x0000db6d

                          AREA ||i.GuitarLED||, CODE, READONLY, ALIGN=1

                  GuitarLED PROC
;;;233    
;;;234    void  GuitarLED(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;235    {
;;;236    
;;;237    	uint32_t dataSM1,dataSM2,dataSM3;
;;;238    	uint32_t SMRED=0x0007;
;;;239    	dataSM1=0x0000;
000002  2600              MOVS     r6,#0
;;;240    	dataSM2=0x0000;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;241    	dataSM3=0x0000;
000008  2500              MOVS     r5,#0
;;;242    	SMRED=0x0003;
00000a  2403              MOVS     r4,#3
;;;243    	for(int i=0;i<5;i++)
00000c  2700              MOVS     r7,#0
                  |L5.14|
;;;244    	{
;;;245    		vTaskDelay(100);
00000e  2064              MOVS     r0,#0x64
000010  f7fffffe          BL       vTaskDelay
;;;246    		if(i==4)
000014  2f04              CMP      r7,#4
000016  d102              BNE      |L5.30|
;;;247    			SMRED|=0xE000;
000018  2007              MOVS     r0,#7
00001a  0340              LSLS     r0,r0,#13
00001c  4304              ORRS     r4,r4,r0
                  |L5.30|
;;;248    		dataSM1|=SMRED;
00001e  4630              MOV      r0,r6
000020  4320              ORRS     r0,r0,r4
;;;249    		dataSM3|=SMRED;
000022  462a              MOV      r2,r5
000024  4322              ORRS     r2,r2,r4
;;;250    		SPI_48SendData(dataSM1,dataSM2,dataSM3);
000026  9900              LDR      r1,[sp,#0]
000028  f7fffffe          BL       SPI_48SendData
;;;251    		SMRED<<=3;
00002c  00e4              LSLS     r4,r4,#3
;;;252    		dataSM1=0x0000;
00002e  2600              MOVS     r6,#0
;;;253    		dataSM3=0x0000;
000030  2500              MOVS     r5,#0
;;;254    		GPIO_CLR_PIN(LED1);
000032  2004              MOVS     r0,#4
000034  f7fffffe          BL       GPIO_CLR_PIN
;;;255    		GPIO_SET_PIN(LED2);
000038  2040              MOVS     r0,#0x40
00003a  f7fffffe          BL       GPIO_SET_PIN
;;;256    		GPIO_SET_PIN(LED3);
00003e  2001              MOVS     r0,#1
000040  02c0              LSLS     r0,r0,#11
000042  f7fffffe          BL       GPIO_SET_PIN
;;;257    		GPIO_CLR_PIN(LED4);
000046  2001              MOVS     r0,#1
000048  0300              LSLS     r0,r0,#12
00004a  f7fffffe          BL       GPIO_CLR_PIN
;;;258    		if(!KEY_STATE)
00004e  2020              MOVS     r0,#0x20
000050  f7fffffe          BL       GPIO_GET_PIN
000054  2800              CMP      r0,#0
000056  d002              BEQ      |L5.94|
000058  1c7f              ADDS     r7,r7,#1              ;243
00005a  2f05              CMP      r7,#5                 ;243
00005c  dbd7              BLT      |L5.14|
                  |L5.94|
;;;259    		{
;;;260    			break;
;;;261    		}
;;;262    	}
;;;263    	SMRED=0x0007;
00005e  2407              MOVS     r4,#7
;;;264    	for(int i=0;i<5;i++)
000060  2700              MOVS     r7,#0
                  |L5.98|
;;;265    	{
;;;266    		vTaskDelay(100);
000062  2064              MOVS     r0,#0x64
000064  f7fffffe          BL       vTaskDelay
;;;267    		if(i==4)
000068  2f04              CMP      r7,#4
00006a  d102              BNE      |L5.114|
;;;268    			SMRED|=0xE000;
00006c  2007              MOVS     r0,#7
00006e  0340              LSLS     r0,r0,#13
000070  4304              ORRS     r4,r4,r0
                  |L5.114|
;;;269    		dataSM2|=SMRED;
000072  9900              LDR      r1,[sp,#0]
000074  4321              ORRS     r1,r1,r4
;;;270    		SPI_48SendData( dataSM1, dataSM2, dataSM3);
000076  462a              MOV      r2,r5
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       SPI_48SendData
;;;271    		SMRED<<=3;
00007e  00e4              LSLS     r4,r4,#3
;;;272    		dataSM2=0x0000;
000080  2000              MOVS     r0,#0
000082  9000              STR      r0,[sp,#0]
;;;273    		dataSM3=0x0000;
000084  2500              MOVS     r5,#0
;;;274    		GPIO_SET_PIN(LED1);
000086  2004              MOVS     r0,#4
000088  f7fffffe          BL       GPIO_SET_PIN
;;;275    		GPIO_CLR_PIN(LED2);
00008c  2040              MOVS     r0,#0x40
00008e  f7fffffe          BL       GPIO_CLR_PIN
;;;276    		GPIO_CLR_PIN(LED3);
000092  2001              MOVS     r0,#1
000094  02c0              LSLS     r0,r0,#11
000096  f7fffffe          BL       GPIO_CLR_PIN
;;;277    		GPIO_SET_PIN(LED4);
00009a  2001              MOVS     r0,#1
00009c  0300              LSLS     r0,r0,#12
00009e  f7fffffe          BL       GPIO_SET_PIN
;;;278    		if(!KEY_STATE)
0000a2  2020              MOVS     r0,#0x20
0000a4  f7fffffe          BL       GPIO_GET_PIN
0000a8  2800              CMP      r0,#0
0000aa  d002              BEQ      |L5.178|
0000ac  1c7f              ADDS     r7,r7,#1              ;264
0000ae  2f05              CMP      r7,#5                 ;264
0000b0  dbd7              BLT      |L5.98|
                  |L5.178|
;;;279    		{
;;;280    			break;
;;;281    		}	
;;;282    	}
;;;283    }
0000b2  bdf8              POP      {r3-r7,pc}
;;;284    
                          ENDP


                          AREA ||i.MIC_TEST||, CODE, READONLY, ALIGN=2

                  MIC_TEST PROC
;;;514    */
;;;515    void MIC_TEST(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;516    {
;;;517    	while(1)
;;;518    	{
;;;519    		if(!MIC_STATE)
;;;520    		{
;;;521    			GuitarBox_On();
;;;522    			RGBLED_GREEN;
000002  4c12              LDR      r4,|L6.76|
000004  27ff              MOVS     r7,#0xff              ;519
000006  10a5              ASRS     r5,r4,#2
000008  1066              ASRS     r6,r4,#1
00000a  3701              ADDS     r7,#1                 ;519
00000c  e016              B        |L6.60|
                  |L6.14|
00000e  f7fffffe          BL       GuitarBox_On
000012  4622              MOV      r2,r4
000014  4629              MOV      r1,r5
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       SPI_48SendData
00001c  e006              B        |L6.44|
                  |L6.30|
;;;523    		}
;;;524    		else//OFF
;;;525    		{
;;;526    			GuitarBox_Off();
00001e  f7fffffe          BL       GuitarBox_Off
;;;527    			RGBLED_OFF;
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  4610              MOV      r0,r2
000028  f7fffffe          BL       SPI_48SendData
                  |L6.44|
;;;528    		}
;;;529    		vTaskDelay(100);	
00002c  2064              MOVS     r0,#0x64
00002e  f7fffffe          BL       vTaskDelay
;;;530    		if(!KEY_STATE)
000032  2020              MOVS     r0,#0x20
000034  f7fffffe          BL       GPIO_GET_PIN
000038  2800              CMP      r0,#0
00003a  d005              BEQ      |L6.72|
                  |L6.60|
00003c  4638              MOV      r0,r7                 ;519
00003e  f7fffffe          BL       GPIO_GET_PIN
000042  2800              CMP      r0,#0                 ;519
000044  d1eb              BNE      |L6.30|
000046  e7e2              B        |L6.14|
                  |L6.72|
;;;531    		{
;;;532    			break;
;;;533    		}	
;;;534    	}
;;;535    }
000048  bdf8              POP      {r3-r7,pc}
                          ENDP

00004a  0000              DCW      0x0000
                  |L6.76|
                          DCD      0x00009249

                          AREA ||i.MusicLED_V2||, CODE, READONLY, ALIGN=2

                  MusicLED_V2 PROC
;;;463    **/
;;;464    void  MusicLED_V2(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;465    {
;;;466    	uint8_t	COLOUR =0;
000002  2400              MOVS     r4,#0
;;;467    	while(1)
;;;468    	{
;;;469    		if(!MIC_STATE)
;;;470    		{
;;;471    			GuitarBox_On();
;;;472    			switch(++COLOUR)
;;;473    			{
;;;474    				case 1:
;;;475    					RGBLED_WHITE;
;;;476    					break;
;;;477    				case 2:
;;;478    					RGBLED_RED;
000004  4d28              LDR      r5,|L7.168|
000006  4e29              LDR      r6,|L7.172|
;;;479    					break;	
;;;480    				case 3:
;;;481    					RGBLED_GREEN;
000008  006f              LSLS     r7,r5,#1
                  |L7.10|
00000a  20ff              MOVS     r0,#0xff              ;469
00000c  3001              ADDS     r0,#1                 ;469
00000e  f7fffffe          BL       GPIO_GET_PIN
000012  2800              CMP      r0,#0                 ;469
000014  d010              BEQ      |L7.56|
;;;482    					break;
;;;483    				case 4:
;;;484    					RGBLED_BLUE;						
;;;485    					break;
;;;486    				case 5:
;;;487    					RGBLED_Y;
;;;488    					break;	
;;;489    				case 6:
;;;490    						RGBLED_M;
;;;491    					break;
;;;492    				default:
;;;493    					RGBLED_C;
;;;494    					COLOUR = 0;		
;;;495    					break;
;;;496    			}
;;;497    		}
;;;498    		else 
;;;499    		{
;;;500    			RGBLED_OFF;
000016  2200              MOVS     r2,#0
000018  4611              MOV      r1,r2
00001a  4610              MOV      r0,r2
00001c  f7fffffe          BL       SPI_48SendData
;;;501    			GuitarBox_Off();
000020  f7fffffe          BL       GuitarBox_Off
                  |L7.36|
;;;502    		}
;;;503    		vTaskDelay(500);
000024  20ff              MOVS     r0,#0xff
000026  30f5              ADDS     r0,r0,#0xf5
000028  f7fffffe          BL       vTaskDelay
;;;504    		if(!KEY_STATE)
00002c  2020              MOVS     r0,#0x20
00002e  f7fffffe          BL       GPIO_GET_PIN
000032  2800              CMP      r0,#0
000034  d1e9              BNE      |L7.10|
;;;505    		{
;;;506    			break;
;;;507    		}	
;;;508    	}
;;;509    }
000036  bdf8              POP      {r3-r7,pc}
                  |L7.56|
000038  f7fffffe          BL       GuitarBox_On
00003c  1c64              ADDS     r4,r4,#1              ;472
00003e  b2e4              UXTB     r4,r4                 ;472
000040  0023              MOVS     r3,r4                 ;472
000042  f7fffffe          BL       __ARM_common_switch8
000046  0729              DCB      0x07,0x29
000048  050b1117          DCB      0x05,0x0b,0x11,0x17
00004c  1d232900          DCB      0x1d,0x23,0x29,0x00
000050  4817              LDR      r0,|L7.176|
000052  4602              MOV      r2,r0                 ;475
000054  4601              MOV      r1,r0                 ;475
000056  f7fffffe          BL       SPI_48SendData
00005a  e7e3              B        |L7.36|
00005c  462a              MOV      r2,r5                 ;478
00005e  4915              LDR      r1,|L7.180|
000060  4630              MOV      r0,r6                 ;478
000062  f7fffffe          BL       SPI_48SendData
000066  e7dd              B        |L7.36|
000068  4632              MOV      r2,r6                 ;481
00006a  4629              MOV      r1,r5                 ;481
00006c  4638              MOV      r0,r7                 ;481
00006e  f7fffffe          BL       SPI_48SendData
000072  e7d7              B        |L7.36|
000074  463a              MOV      r2,r7                 ;484
000076  4631              MOV      r1,r6                 ;484
000078  4628              MOV      r0,r5                 ;484
00007a  f7fffffe          BL       SPI_48SendData
00007e  e7d1              B        |L7.36|
000080  4a0d              LDR      r2,|L7.184|
000082  480e              LDR      r0,|L7.188|
000084  1091              ASRS     r1,r2,#2              ;487
000086  f7fffffe          BL       SPI_48SendData
00008a  e7cb              B        |L7.36|
00008c  4a0b              LDR      r2,|L7.188|
00008e  480c              LDR      r0,|L7.192|
000090  1091              ASRS     r1,r2,#2              ;490
000092  f7fffffe          BL       SPI_48SendData
000096  e7c5              B        |L7.36|
000098  4a09              LDR      r2,|L7.192|
00009a  1091              ASRS     r1,r2,#2              ;493
00009c  0048              LSLS     r0,r1,#1              ;493
00009e  f7fffffe          BL       SPI_48SendData
0000a2  2400              MOVS     r4,#0                 ;494
0000a4  e7be              B        |L7.36|
;;;510    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L7.168|
                          DCD      0x00002492
                  |L7.172|
                          DCD      0x00009249
                  |L7.176|
                          DCD      0x0000ffff
                  |L7.180|
                          DCD      0x00002924
                  |L7.184|
                          DCD      0x00006db6
                  |L7.188|
                          DCD      0x0000b6db
                  |L7.192|
                          DCD      0x0000db6d

                          AREA ||i.MusicLamp_V2||, CODE, READONLY, ALIGN=2

                  MusicLamp_V2 PROC
;;;391    
;;;392    void  MusicLamp_V2(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;393    {
;;;394    	uint8_t	cnt=0;
000002  2600              MOVS     r6,#0
;;;395    	bool c=0;
000004  2500              MOVS     r5,#0
;;;396    	uint32_t count=0;
000006  2400              MOVS     r4,#0
;;;397    	uint32_t RGBLED_DATA;
;;;398    	RGBLED_OFF;
000008  2200              MOVS     r2,#0
00000a  4611              MOV      r1,r2
00000c  4610              MOV      r0,r2
00000e  f7fffffe          BL       SPI_48SendData
;;;399    	GuitarBox_Off();	
000012  f7fffffe          BL       GuitarBox_Off
;;;400    	while(1)
;;;401    	{
;;;402    			if(!MIC_STATE)
;;;403    			{
;;;404    					count++;
;;;405    				if(count>=10)
;;;406    					count = 10;
;;;407    //				while(!(MIC_STATE));
;;;408    			}	
;;;409    			else if(++cnt>2)
;;;410    			{
;;;411    					cnt = 0;
;;;412    					if(count)
;;;413    						count--;
;;;414    			}				
;;;415    		if(count)
;;;416    			{	
;;;417    				if(count <= 5){
;;;418    					RGBLED_DATA = RGBLED_UPDATA[count];
000016  4f29              LDR      r7,|L8.188|
                  |L8.24|
000018  20ff              MOVS     r0,#0xff              ;402
00001a  3001              ADDS     r0,#1                 ;402
00001c  f7fffffe          BL       GPIO_GET_PIN
000020  2800              CMP      r0,#0                 ;402
000022  d017              BEQ      |L8.84|
000024  1c76              ADDS     r6,r6,#1              ;409
000026  b2f6              UXTB     r6,r6                 ;409
000028  2e02              CMP      r6,#2                 ;409
00002a  d903              BLS      |L8.52|
00002c  2600              MOVS     r6,#0                 ;411
00002e  2c00              CMP      r4,#0                 ;412
000030  d000              BEQ      |L8.52|
000032  1e64              SUBS     r4,r4,#1              ;413
                  |L8.52|
000034  2c00              CMP      r4,#0                 ;415
000036  d030              BEQ      |L8.154|
000038  2c05              CMP      r4,#5                 ;417
00003a  d818              BHI      |L8.110|
00003c  00a0              LSLS     r0,r4,#2
00003e  5838              LDR      r0,[r7,r0]
;;;419    					if(c==1)
000040  2d00              CMP      r5,#0
000042  d00c              BEQ      |L8.94|
;;;420    					{
;;;421    						SPI_48SendData(RGBLED_DATA,0x0000,0x0000);
000044  2200              MOVS     r2,#0
000046  4611              MOV      r1,r2
000048  f7fffffe          BL       SPI_48SendData
;;;422    						GuitarBox_Off();
00004c  f7fffffe          BL       GuitarBox_Off
;;;423    						c=0;
000050  2500              MOVS     r5,#0
000052  e029              B        |L8.168|
                  |L8.84|
000054  1c64              ADDS     r4,r4,#1              ;404
000056  2c0a              CMP      r4,#0xa               ;405
000058  d3ec              BCC      |L8.52|
00005a  240a              MOVS     r4,#0xa               ;406
00005c  e7ea              B        |L8.52|
                  |L8.94|
;;;424    					}
;;;425    					else
;;;426    					{
;;;427    						SPI_48SendData(RGBLED_DATA,0x0000,0xFFFF);
00005e  4a18              LDR      r2,|L8.192|
000060  2100              MOVS     r1,#0
000062  f7fffffe          BL       SPI_48SendData
;;;428    						GuitarBox_On();
000066  f7fffffe          BL       GuitarBox_On
;;;429    						c=1;
00006a  2501              MOVS     r5,#1
00006c  e01c              B        |L8.168|
                  |L8.110|
;;;430    					}
;;;431    				}
;;;432    				else if(count <= 10)
00006e  2c0a              CMP      r4,#0xa
000070  d81a              BHI      |L8.168|
;;;433    				{
;;;434    					RGBLED_DATA = RGBLED_UPDATA[count];
000072  00a0              LSLS     r0,r4,#2
000074  5839              LDR      r1,[r7,r0]
;;;435    					if(c==1)
000076  2d00              CMP      r5,#0
000078  d007              BEQ      |L8.138|
;;;436    					{
;;;437    						SPI_48SendData(0x9249,RGBLED_DATA,0x0000);
00007a  2200              MOVS     r2,#0
00007c  4811              LDR      r0,|L8.196|
00007e  f7fffffe          BL       SPI_48SendData
;;;438    						GuitarBox_Off();
000082  f7fffffe          BL       GuitarBox_Off
;;;439    						c=0;
000086  2500              MOVS     r5,#0
000088  e00e              B        |L8.168|
                  |L8.138|
;;;440    					}
;;;441    					else{
;;;442    						SPI_48SendData(0x9249,RGBLED_DATA,0xFFFF);
00008a  4a0d              LDR      r2,|L8.192|
00008c  480d              LDR      r0,|L8.196|
00008e  f7fffffe          BL       SPI_48SendData
;;;443    						GuitarBox_On();
000092  f7fffffe          BL       GuitarBox_On
;;;444    						c=1;
000096  2501              MOVS     r5,#1
000098  e006              B        |L8.168|
                  |L8.154|
;;;445    					}
;;;446    				}
;;;447    			}
;;;448    			else 
;;;449    			{
;;;450    				RGBLED_OFF;
00009a  2200              MOVS     r2,#0
00009c  4611              MOV      r1,r2
00009e  4610              MOV      r0,r2
0000a0  f7fffffe          BL       SPI_48SendData
;;;451    				GuitarBox_Off();
0000a4  f7fffffe          BL       GuitarBox_Off
                  |L8.168|
;;;452    			}
;;;453    		vTaskDelay(100);	
0000a8  2064              MOVS     r0,#0x64
0000aa  f7fffffe          BL       vTaskDelay
;;;454    		if(!KEY_STATE)
0000ae  2020              MOVS     r0,#0x20
0000b0  f7fffffe          BL       GPIO_GET_PIN
0000b4  2800              CMP      r0,#0
0000b6  d1af              BNE      |L8.24|
;;;455    		{
;;;456    			break;
;;;457    		}	
;;;458    	}
;;;459    }
0000b8  bdf8              POP      {r3-r7,pc}
;;;460    /*****MIC CHABNGE COLOR****
                          ENDP

0000ba  0000              DCW      0x0000
                  |L8.188|
                          DCD      ||.constdata||
                  |L8.192|
                          DCD      0x0000ffff
                  |L8.196|
                          DCD      0x00009249

                          AREA ||i.RunningWaterLED||, CODE, READONLY, ALIGN=2

                  RunningWaterLED PROC
;;;285    //ºìÉ«µÆÔÚ°×É«³¤ÁÁ×öÁ÷Ë®µÆ
;;;286    void  RunningWaterLED(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;287    {
;;;288    	uint32_t time=0;
000002  2400              MOVS     r4,#0
;;;289    	GuitarBox_Off();
000004  f7fffffe          BL       GuitarBox_Off
;;;290    	while(1)
;;;291    	{
;;;292    		if(++time>2000)
000008  257d              MOVS     r5,#0x7d
;;;293    			time=0;
;;;294    		if(time<200){
;;;295    			SPI_48SendData( 0xfff9, 0xffff,0xfff2);		
00000a  4e44              LDR      r6,|L9.284|
00000c  4f43              LDR      r7,|L9.284|
00000e  012d              LSLS     r5,r5,#4              ;292
000010  360d              ADDS     r6,r6,#0xd
                  |L9.18|
000012  1c64              ADDS     r4,r4,#1              ;292
000014  42ac              CMP      r4,r5                 ;292
000016  d900              BLS      |L9.26|
000018  2400              MOVS     r4,#0                 ;293
                  |L9.26|
00001a  2cc8              CMP      r4,#0xc8              ;294
00001c  d206              BCS      |L9.44|
00001e  483f              LDR      r0,|L9.284|
000020  463a              MOV      r2,r7
000022  4631              MOV      r1,r6
000024  1dc0              ADDS     r0,r0,#7
000026  f7fffffe          BL       SPI_48SendData
00002a  e05c              B        |L9.230|
                  |L9.44|
;;;296    		} 
;;;297    		else if(time<400){
00002c  20ff              MOVS     r0,#0xff
00002e  3091              ADDS     r0,r0,#0x91
000030  4284              CMP      r4,r0
000032  d207              BCS      |L9.68|
;;;298    				SPI_48SendData( 0xffAf, 0xffff,0xff9f);
000034  4a39              LDR      r2,|L9.284|
000036  4839              LDR      r0,|L9.284|
000038  3a53              SUBS     r2,r2,#0x53
00003a  4631              MOV      r1,r6
00003c  3843              SUBS     r0,r0,#0x43
00003e  f7fffffe          BL       SPI_48SendData
000042  e050              B        |L9.230|
                  |L9.68|
;;;299    		} 
;;;300    		else if(time<600){
000044  204b              MOVS     r0,#0x4b
000046  00c0              LSLS     r0,r0,#3
000048  4284              CMP      r4,r0
00004a  d205              BCS      |L9.88|
;;;301    				SPI_48SendData( 0xfE7f, 0xffff,0xfaff);
00004c  4a34              LDR      r2,|L9.288|
00004e  4631              MOV      r1,r6
000050  4834              LDR      r0,|L9.292|
000052  f7fffffe          BL       SPI_48SendData
000056  e046              B        |L9.230|
                  |L9.88|
;;;302    		}
;;;303    		else if(time<800){
000058  2019              MOVS     r0,#0x19
00005a  0140              LSLS     r0,r0,#5
00005c  4284              CMP      r4,r0
00005e  d205              BCS      |L9.108|
;;;304    				SPI_48SendData( 0xf3ff, 0xffff,0xE7ff);
000060  4a31              LDR      r2,|L9.296|
000062  4631              MOV      r1,r6
000064  4831              LDR      r0,|L9.300|
000066  f7fffffe          BL       SPI_48SendData
00006a  e03c              B        |L9.230|
                  |L9.108|
;;;305    		} 
;;;306    		else if(time<1000){
00006c  207d              MOVS     r0,#0x7d
00006e  00c0              LSLS     r0,r0,#3
000070  4284              CMP      r4,r0
000072  d205              BCS      |L9.128|
;;;307    				SPI_48SendData( 0x9fff, 0xffff,0x3fff);
000074  4a2e              LDR      r2,|L9.304|
000076  4631              MOV      r1,r6
000078  482e              LDR      r0,|L9.308|
00007a  f7fffffe          BL       SPI_48SendData
00007e  e032              B        |L9.230|
                  |L9.128|
;;;308    		}
;;;309    		else if(time<1200){
000080  204b              MOVS     r0,#0x4b
000082  0100              LSLS     r0,r0,#4
000084  4284              CMP      r4,r0
000086  d206              BCS      |L9.150|
;;;310    				SPI_48SendData( 0xffff, 0xfffa,0xfff2);
000088  4924              LDR      r1,|L9.284|
00008a  463a              MOV      r2,r7
00008c  3108              ADDS     r1,r1,#8
00008e  4630              MOV      r0,r6
000090  f7fffffe          BL       SPI_48SendData
000094  e027              B        |L9.230|
                  |L9.150|
;;;311    		}
;;;312    		else if(time<1400){
000096  20af              MOVS     r0,#0xaf
000098  00c0              LSLS     r0,r0,#3
00009a  4284              CMP      r4,r0
00009c  d207              BCS      |L9.174|
;;;313    			SPI_48SendData( 0xffff, 0xffE7,0xff9f);	
00009e  4a1f              LDR      r2,|L9.284|
0000a0  491e              LDR      r1,|L9.284|
0000a2  3a53              SUBS     r2,r2,#0x53
0000a4  390b              SUBS     r1,r1,#0xb
0000a6  4630              MOV      r0,r6
0000a8  f7fffffe          BL       SPI_48SendData
0000ac  e01b              B        |L9.230|
                  |L9.174|
;;;314    		} 
;;;315    		else if(time<1600){
0000ae  2019              MOVS     r0,#0x19
0000b0  0180              LSLS     r0,r0,#6
0000b2  4284              CMP      r4,r0
0000b4  d206              BCS      |L9.196|
;;;316    				SPI_48SendData( 0xffff, 0xff3f,0xfaff);
0000b6  4919              LDR      r1,|L9.284|
0000b8  4a19              LDR      r2,|L9.288|
0000ba  39b3              SUBS     r1,r1,#0xb3
0000bc  4630              MOV      r0,r6
0000be  f7fffffe          BL       SPI_48SendData
0000c2  e010              B        |L9.230|
                  |L9.196|
;;;317    		} 
;;;318    		else if(time<1800){
0000c4  20e1              MOVS     r0,#0xe1
0000c6  00c0              LSLS     r0,r0,#3
0000c8  4284              CMP      r4,r0
0000ca  d205              BCS      |L9.216|
;;;319    				SPI_48SendData( 0xffff, 0xf9ff,0xE7ff);
0000cc  4a16              LDR      r2,|L9.296|
0000ce  491a              LDR      r1,|L9.312|
0000d0  4630              MOV      r0,r6
0000d2  f7fffffe          BL       SPI_48SendData
0000d6  e006              B        |L9.230|
                  |L9.216|
;;;320    		}
;;;321    		else if(time<2000){
0000d8  42ac              CMP      r4,r5
0000da  d204              BCS      |L9.230|
;;;322    				SPI_48SendData( 0xffff, 0xEfff,0x3fff);
0000dc  4a14              LDR      r2,|L9.304|
0000de  4917              LDR      r1,|L9.316|
0000e0  4630              MOV      r0,r6
0000e2  f7fffffe          BL       SPI_48SendData
                  |L9.230|
;;;323    		} 
;;;324    		if(time % 500 ==0)
0000e6  21ff              MOVS     r1,#0xff
0000e8  31f5              ADDS     r1,r1,#0xf5
0000ea  4620              MOV      r0,r4
0000ec  f7fffffe          BL       __aeabi_uidivmod
0000f0  2900              CMP      r1,#0
0000f2  d006              BEQ      |L9.258|
;;;325    		{
;;;326    			GuitarBox_On();
;;;327    		}
;;;328    		else if(time %100==0)
0000f4  2164              MOVS     r1,#0x64
0000f6  4620              MOV      r0,r4
0000f8  f7fffffe          BL       __aeabi_uidivmod
0000fc  2900              CMP      r1,#0
0000fe  d003              BEQ      |L9.264|
000100  e004              B        |L9.268|
                  |L9.258|
000102  f7fffffe          BL       GuitarBox_On
000106  e001              B        |L9.268|
                  |L9.264|
;;;329    		{
;;;330    			GuitarBox_Off();
000108  f7fffffe          BL       GuitarBox_Off
                  |L9.268|
;;;331    		}
;;;332    		if(!KEY_STATE)
00010c  2020              MOVS     r0,#0x20
00010e  f7fffffe          BL       GPIO_GET_PIN
000112  2800              CMP      r0,#0
000114  d000              BEQ      |L9.280|
000116  e77c              B        |L9.18|
                  |L9.280|
;;;333    		{
;;;334    			break;
;;;335    		}	
;;;336    	}
;;;337    }
000118  bdf8              POP      {r3-r7,pc}
;;;338    //°×É«µÆÔÚºìÉ«³¤ÁÁ×öÁ÷Ë®µÆ
                          ENDP

00011a  0000              DCW      0x0000
                  |L9.284|
                          DCD      0x0000fff2
                  |L9.288|
                          DCD      0x0000faff
                  |L9.292|
                          DCD      0x0000fe7f
                  |L9.296|
                          DCD      0x0000e7ff
                  |L9.300|
                          DCD      0x0000f3ff
                  |L9.304|
                          DCD      0x00003fff
                  |L9.308|
                          DCD      0x00009fff
                  |L9.312|
                          DCD      0x0000f9ff
                  |L9.316|
                          DCD      0x0000efff

                          AREA ||i.RunningWaterWhiteLED||, CODE, READONLY, ALIGN=2

                  RunningWaterWhiteLED PROC
;;;338    //°×É«µÆÔÚºìÉ«³¤ÁÁ×öÁ÷Ë®µÆ
;;;339    void  RunningWaterWhiteLED(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;340    {
;;;341    	uint32_t time=0;
000002  2400              MOVS     r4,#0
;;;342    	GuitarBox_Off();
000004  f7fffffe          BL       GuitarBox_Off
;;;343    	while(1)
;;;344    	{
;;;345    		if(++time>2000)
;;;346    			time=0;
;;;347    		if(time<200){
;;;348    				SPI_48SendData(0x924F,0x2924,0x249E);
000008  4e46              LDR      r6,|L10.292|
;;;349    		} 
;;;350    		else if(time<400){
;;;351    				SPI_48SendData(0x92e9,0x2924,0x24f2);
;;;352    		} 
;;;353    		else if(time<600){
;;;354    				SPI_48SendData(0x93A9,0x2924,0x2e92);
;;;355    		}
;;;356    		else if(time<800){
;;;357    				SPI_48SendData(0x9E49,0x2924,0x3a92);
;;;358    		} 
;;;359    		else if(time<1000){
;;;360    				SPI_48SendData(0xFe49,0x2924,0xE492);
00000a  4f47              LDR      r7,|L10.296|
00000c  257d              MOVS     r5,#0x7d              ;345
00000e  012d              LSLS     r5,r5,#4              ;345
                  |L10.16|
000010  1c64              ADDS     r4,r4,#1              ;345
000012  42ac              CMP      r4,r5                 ;345
000014  d900              BLS      |L10.24|
000016  2400              MOVS     r4,#0                 ;346
                  |L10.24|
000018  2cc8              CMP      r4,#0xc8              ;347
00001a  d205              BCS      |L10.40|
00001c  4a43              LDR      r2,|L10.300|
00001e  4631              MOV      r1,r6                 ;348
000020  4843              LDR      r0,|L10.304|
000022  f7fffffe          BL       SPI_48SendData
000026  e062              B        |L10.238|
                  |L10.40|
000028  20ff              MOVS     r0,#0xff              ;350
00002a  3091              ADDS     r0,r0,#0x91           ;350
00002c  4284              CMP      r4,r0                 ;350
00002e  d207              BCS      |L10.64|
000030  4a3e              LDR      r2,|L10.300|
000032  483f              LDR      r0,|L10.304|
000034  3254              ADDS     r2,r2,#0x54           ;351
000036  4631              MOV      r1,r6                 ;351
000038  309a              ADDS     r0,r0,#0x9a           ;351
00003a  f7fffffe          BL       SPI_48SendData
00003e  e056              B        |L10.238|
                  |L10.64|
000040  204b              MOVS     r0,#0x4b              ;353
000042  00c0              LSLS     r0,r0,#3              ;353
000044  4284              CMP      r4,r0                 ;353
000046  d205              BCS      |L10.84|
000048  4a3a              LDR      r2,|L10.308|
00004a  4631              MOV      r1,r6                 ;354
00004c  483a              LDR      r0,|L10.312|
00004e  f7fffffe          BL       SPI_48SendData
000052  e04c              B        |L10.238|
                  |L10.84|
000054  2019              MOVS     r0,#0x19              ;356
000056  0140              LSLS     r0,r0,#5              ;356
000058  4284              CMP      r4,r0                 ;356
00005a  d205              BCS      |L10.104|
00005c  4a37              LDR      r2,|L10.316|
00005e  4631              MOV      r1,r6                 ;357
000060  4837              LDR      r0,|L10.320|
000062  f7fffffe          BL       SPI_48SendData
000066  e042              B        |L10.238|
                  |L10.104|
000068  207d              MOVS     r0,#0x7d              ;359
00006a  00c0              LSLS     r0,r0,#3              ;359
00006c  4284              CMP      r4,r0                 ;359
00006e  d205              BCS      |L10.124|
000070  463a              MOV      r2,r7
000072  4631              MOV      r1,r6
000074  4833              LDR      r0,|L10.324|
000076  f7fffffe          BL       SPI_48SendData
00007a  e038              B        |L10.238|
                  |L10.124|
;;;361    		}
;;;362    		else if(time<1200){
00007c  204b              MOVS     r0,#0x4b
00007e  0100              LSLS     r0,r0,#4
000080  4284              CMP      r4,r0
000082  d207              BCS      |L10.148|
;;;363    				SPI_48SendData(0x9249,0x2927,0xE492);
000084  4927              LDR      r1,|L10.292|
000086  482a              LDR      r0,|L10.304|
000088  463a              MOV      r2,r7
00008a  1cc9              ADDS     r1,r1,#3
00008c  1f80              SUBS     r0,r0,#6
00008e  f7fffffe          BL       SPI_48SendData
000092  e02c              B        |L10.238|
                  |L10.148|
;;;364    		}
;;;365    		else if(time<1400){
000094  20af              MOVS     r0,#0xaf
000096  00c0              LSLS     r0,r0,#3
000098  4284              CMP      r4,r0
00009a  d207              BCS      |L10.172|
;;;366    				SPI_48SendData(0x9249,0x293a,0x3a92);	
00009c  4921              LDR      r1,|L10.292|
00009e  4824              LDR      r0,|L10.304|
0000a0  4a26              LDR      r2,|L10.316|
0000a2  3116              ADDS     r1,r1,#0x16
0000a4  1f80              SUBS     r0,r0,#6
0000a6  f7fffffe          BL       SPI_48SendData
0000aa  e020              B        |L10.238|
                  |L10.172|
;;;367    		} 
;;;368    		else if(time<1600){
0000ac  2019              MOVS     r0,#0x19
0000ae  0180              LSLS     r0,r0,#6
0000b0  4284              CMP      r4,r0
0000b2  d207              BCS      |L10.196|
;;;369    				SPI_48SendData(0x9249,0x29e4,0x2e92);
0000b4  491b              LDR      r1,|L10.292|
0000b6  481e              LDR      r0,|L10.304|
0000b8  4a1e              LDR      r2,|L10.308|
0000ba  31c0              ADDS     r1,r1,#0xc0
0000bc  1f80              SUBS     r0,r0,#6
0000be  f7fffffe          BL       SPI_48SendData
0000c2  e014              B        |L10.238|
                  |L10.196|
;;;370    		} 
;;;371    		else if(time<1800){
0000c4  20e1              MOVS     r0,#0xe1
0000c6  00c0              LSLS     r0,r0,#3
0000c8  4284              CMP      r4,r0
0000ca  d208              BCS      |L10.222|
;;;372    				SPI_48SendData(0x9249, 0x2f24,0x24f2);
0000cc  4a17              LDR      r2,|L10.300|
0000ce  4919              LDR      r1,|L10.308|
0000d0  4817              LDR      r0,|L10.304|
0000d2  3254              ADDS     r2,r2,#0x54
0000d4  3192              ADDS     r1,r1,#0x92
0000d6  1f80              SUBS     r0,r0,#6
0000d8  f7fffffe          BL       SPI_48SendData
0000dc  e007              B        |L10.238|
                  |L10.222|
;;;373    		}
;;;374    		else if(time<2000){
0000de  42ac              CMP      r4,r5
0000e0  d205              BCS      |L10.238|
;;;375    				SPI_48SendData(0x9249, 0x3924,0x249E);
0000e2  4813              LDR      r0,|L10.304|
0000e4  4a11              LDR      r2,|L10.300|
0000e6  4918              LDR      r1,|L10.328|
0000e8  1f80              SUBS     r0,r0,#6
0000ea  f7fffffe          BL       SPI_48SendData
                  |L10.238|
;;;376    		} 
;;;377    		if(time % 500 ==0)
0000ee  21ff              MOVS     r1,#0xff
0000f0  31f5              ADDS     r1,r1,#0xf5
0000f2  4620              MOV      r0,r4
0000f4  f7fffffe          BL       __aeabi_uidivmod
0000f8  2900              CMP      r1,#0
0000fa  d006              BEQ      |L10.266|
;;;378    		{
;;;379    			GuitarBox_On();
;;;380    		}
;;;381    		else if(time %100==0)
0000fc  2164              MOVS     r1,#0x64
0000fe  4620              MOV      r0,r4
000100  f7fffffe          BL       __aeabi_uidivmod
000104  2900              CMP      r1,#0
000106  d003              BEQ      |L10.272|
000108  e004              B        |L10.276|
                  |L10.266|
00010a  f7fffffe          BL       GuitarBox_On
00010e  e001              B        |L10.276|
                  |L10.272|
;;;382    		{
;;;383    			GuitarBox_Off();
000110  f7fffffe          BL       GuitarBox_Off
                  |L10.276|
;;;384    		}
;;;385    		if(!KEY_STATE)
000114  2020              MOVS     r0,#0x20
000116  f7fffffe          BL       GPIO_GET_PIN
00011a  2800              CMP      r0,#0
00011c  d000              BEQ      |L10.288|
00011e  e777              B        |L10.16|
                  |L10.288|
;;;386    		{
;;;387    			break;
;;;388    		}	
;;;389    	}
;;;390    }
000120  bdf8              POP      {r3-r7,pc}
;;;391    
                          ENDP

000122  0000              DCW      0x0000
                  |L10.292|
                          DCD      0x00002924
                  |L10.296|
                          DCD      0x0000e492
                  |L10.300|
                          DCD      0x0000249e
                  |L10.304|
                          DCD      0x0000924f
                  |L10.308|
                          DCD      0x00002e92
                  |L10.312|
                          DCD      0x000093a9
                  |L10.316|
                          DCD      0x00003a92
                  |L10.320|
                          DCD      0x00009e49
                  |L10.324|
                          DCD      0x0000fe49
                  |L10.328|
                          DCD      0x00003924

                          AREA ||i.SPI_48SendData||, CODE, READONLY, ALIGN=1

                  SPI_48SendData PROC
;;;102    //48bit
;;;103    void SPI_48SendData(uint32_t SM1,uint32_t SM2,uint32_t SM3)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;104    {
000002  4614              MOV      r4,r2
;;;105    	uint8_t delay;
;;;106    	uint32_t data;
;;;107    	GPIO_CLR_PIN(PIN_CLK);
000004  2601              MOVS     r6,#1
000006  0276              LSLS     r6,r6,#9
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       GPIO_CLR_PIN
;;;108    	GPIO_CLR_PIN(PIN_SDI);
00000e  2080              MOVS     r0,#0x80
000010  f7fffffe          BL       GPIO_CLR_PIN
;;;109    	GPIO_CLR_PIN(PIN_LE);
000014  0077              LSLS     r7,r6,#1
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       GPIO_CLR_PIN
;;;110    	data=SM3;
;;;111    	for(int i=0;i<16;i++)
00001c  2500              MOVS     r5,#0
                  |L11.30|
;;;112    	{
;;;113    		if(data&0x8000)
00001e  0420              LSLS     r0,r4,#16
000020  d503              BPL      |L11.42|
;;;114    			GPIO_SET_PIN(PIN_SDI);//SER=dat>>7;
000022  2080              MOVS     r0,#0x80
000024  f7fffffe          BL       GPIO_SET_PIN
000028  e002              B        |L11.48|
                  |L11.42|
;;;115    		else
;;;116    			GPIO_CLR_PIN(PIN_SDI);//SER=dat>>7;
00002a  2080              MOVS     r0,#0x80
00002c  f7fffffe          BL       GPIO_CLR_PIN
                  |L11.48|
;;;117    		
;;;118    		GPIO_SET_PIN(PIN_CLK);//SRCLK=1;
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       GPIO_SET_PIN
;;;119    		delay=3;
000036  2003              MOVS     r0,#3
                  |L11.56|
;;;120    		while(delay--);	
000038  4601              MOV      r1,r0
00003a  1e40              SUBS     r0,r0,#1
00003c  b2c0              UXTB     r0,r0
00003e  2900              CMP      r1,#0
000040  d1fa              BNE      |L11.56|
;;;121    		GPIO_CLR_PIN(PIN_CLK);//SRCLK=0;				
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       GPIO_CLR_PIN
;;;122    		data <<= 1;
000048  0064              LSLS     r4,r4,#1
00004a  1c6d              ADDS     r5,r5,#1              ;111
00004c  2d10              CMP      r5,#0x10              ;111
00004e  dbe6              BLT      |L11.30|
;;;123    	}
;;;124    
;;;125    //	data=0x0000;
;;;126    	data=SM2;
000050  9c01              LDR      r4,[sp,#4]
;;;127    	for(int i=0;i<16;i++)
000052  2500              MOVS     r5,#0
                  |L11.84|
;;;128    	{
;;;129    		if(data&0x8000)
000054  0420              LSLS     r0,r4,#16
000056  d503              BPL      |L11.96|
;;;130    			GPIO_SET_PIN(PIN_SDI);//SER=dat>>7;
000058  2080              MOVS     r0,#0x80
00005a  f7fffffe          BL       GPIO_SET_PIN
00005e  e002              B        |L11.102|
                  |L11.96|
;;;131    		else
;;;132    			GPIO_CLR_PIN(PIN_SDI);//SER=dat>>7;
000060  2080              MOVS     r0,#0x80
000062  f7fffffe          BL       GPIO_CLR_PIN
                  |L11.102|
;;;133    		
;;;134    		GPIO_SET_PIN(PIN_CLK);//SRCLK=1;
000066  4630              MOV      r0,r6
000068  f7fffffe          BL       GPIO_SET_PIN
;;;135    		delay=3;
00006c  2003              MOVS     r0,#3
                  |L11.110|
;;;136    		while(delay--);	
00006e  4601              MOV      r1,r0
000070  1e40              SUBS     r0,r0,#1
000072  b2c0              UXTB     r0,r0
000074  2900              CMP      r1,#0
000076  d1fa              BNE      |L11.110|
;;;137    		GPIO_CLR_PIN(PIN_CLK);//SRCLK=0;				
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       GPIO_CLR_PIN
;;;138    		data <<= 1;
00007e  0064              LSLS     r4,r4,#1
000080  1c6d              ADDS     r5,r5,#1              ;127
000082  2d10              CMP      r5,#0x10              ;127
000084  dbe6              BLT      |L11.84|
;;;139    	}
;;;140    	data=SM1;
000086  9c00              LDR      r4,[sp,#0]
;;;141    	for(int i=0;i<16;i++)
000088  2500              MOVS     r5,#0
                  |L11.138|
;;;142    	{
;;;143    		if(data&0x8000)
00008a  0420              LSLS     r0,r4,#16
00008c  d503              BPL      |L11.150|
;;;144    			GPIO_SET_PIN(PIN_SDI);//SER=dat>>7;
00008e  2080              MOVS     r0,#0x80
000090  f7fffffe          BL       GPIO_SET_PIN
000094  e002              B        |L11.156|
                  |L11.150|
;;;145    		else
;;;146    			GPIO_CLR_PIN(PIN_SDI);//SER=dat>>7;
000096  2080              MOVS     r0,#0x80
000098  f7fffffe          BL       GPIO_CLR_PIN
                  |L11.156|
;;;147    		
;;;148    		GPIO_SET_PIN(PIN_CLK);//SRCLK=1;
00009c  4630              MOV      r0,r6
00009e  f7fffffe          BL       GPIO_SET_PIN
;;;149    		delay=3;
0000a2  2003              MOVS     r0,#3
                  |L11.164|
;;;150    		while(delay--);	
0000a4  4601              MOV      r1,r0
0000a6  1e40              SUBS     r0,r0,#1
0000a8  b2c0              UXTB     r0,r0
0000aa  2900              CMP      r1,#0
0000ac  d1fa              BNE      |L11.164|
;;;151    		GPIO_CLR_PIN(PIN_CLK);//SRCLK=0;				
0000ae  4630              MOV      r0,r6
0000b0  f7fffffe          BL       GPIO_CLR_PIN
;;;152    		data <<= 1;
0000b4  0064              LSLS     r4,r4,#1
0000b6  1c6d              ADDS     r5,r5,#1              ;141
0000b8  2d10              CMP      r5,#0x10              ;141
0000ba  dbe6              BLT      |L11.138|
;;;153    	}
;;;154    	GPIO_SET_PIN(PIN_LE);//RCLK=1;
0000bc  4638              MOV      r0,r7
0000be  f7fffffe          BL       GPIO_SET_PIN
;;;155    	delay=3;
0000c2  2103              MOVS     r1,#3
                  |L11.196|
;;;156    	while(delay--);		
0000c4  460a              MOV      r2,r1
0000c6  1e49              SUBS     r1,r1,#1
0000c8  b2c9              UXTB     r1,r1
0000ca  2a00              CMP      r2,#0
0000cc  d1fa              BNE      |L11.196|
;;;157    	GPIO_CLR_PIN(PIN_LE);//RCLK=0;	
0000ce  4638              MOV      r0,r7
0000d0  f7fffffe          BL       GPIO_CLR_PIN
;;;158    }
0000d4  bdfe              POP      {r1-r7,pc}
;;;159    void  GuitarDisplay(void)
                          ENDP


                          AREA ||i.SPI_SendData||, CODE, READONLY, ALIGN=1

                  SPI_SendData PROC
;;;77     //32bit
;;;78     void SPI_SendData(uint32_t data,uint8_t len)
000000  b5f8              PUSH     {r3-r7,lr}
;;;79     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;80     	uint8_t delay,i;
;;;81     	GPIO_CLR_PIN(PIN_CLK);
000006  2701              MOVS     r7,#1
000008  027f              LSLS     r7,r7,#9
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       GPIO_CLR_PIN
;;;82     	GPIO_CLR_PIN(PIN_LE);
000010  0078              LSLS     r0,r7,#1
000012  f7fffffe          BL       GPIO_CLR_PIN
;;;83     	for(i=0;i<len;i++)
000016  2400              MOVS     r4,#0
000018  e017              B        |L12.74|
                  |L12.26|
;;;84     	{
;;;85     		if(data&0x80000000)
00001a  2d00              CMP      r5,#0
00001c  da03              BGE      |L12.38|
;;;86     			GPIO_SET_PIN(PIN_SDI);//SER=dat>>7;
00001e  2080              MOVS     r0,#0x80
000020  f7fffffe          BL       GPIO_SET_PIN
000024  e002              B        |L12.44|
                  |L12.38|
;;;87     		else
;;;88     			GPIO_CLR_PIN(PIN_SDI);//SER=dat>>7;
000026  2080              MOVS     r0,#0x80
000028  f7fffffe          BL       GPIO_CLR_PIN
                  |L12.44|
;;;89     		
;;;90     		GPIO_SET_PIN(PIN_CLK);//SRCLK=1;
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       GPIO_SET_PIN
;;;91     		delay=3;
000032  2003              MOVS     r0,#3
                  |L12.52|
;;;92     		while(delay--);	
000034  4601              MOV      r1,r0
000036  1e40              SUBS     r0,r0,#1
000038  b2c0              UXTB     r0,r0
00003a  2900              CMP      r1,#0
00003c  d1fa              BNE      |L12.52|
;;;93     		GPIO_CLR_PIN(PIN_CLK);//SRCLK=0;				
00003e  4638              MOV      r0,r7
000040  f7fffffe          BL       GPIO_CLR_PIN
;;;94     		data <<= 1;
000044  006d              LSLS     r5,r5,#1
000046  1c64              ADDS     r4,r4,#1              ;83
000048  b2e4              UXTB     r4,r4                 ;83
                  |L12.74|
00004a  42b4              CMP      r4,r6                 ;83
00004c  d3e5              BCC      |L12.26|
;;;95     	}
;;;96     
;;;97     	GPIO_SET_PIN(PIN_LE);//RCLK=1;
00004e  2401              MOVS     r4,#1
000050  02a4              LSLS     r4,r4,#10
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       GPIO_SET_PIN
;;;98     	delay=3;
000058  2103              MOVS     r1,#3
                  |L12.90|
;;;99     	while(delay--);		
00005a  460a              MOV      r2,r1
00005c  1e49              SUBS     r1,r1,#1
00005e  b2c9              UXTB     r1,r1
000060  2a00              CMP      r2,#0
000062  d1fa              BNE      |L12.90|
;;;100    	GPIO_CLR_PIN(PIN_LE);//RCLK=0;	
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       GPIO_CLR_PIN
;;;101    }
00006a  bdf8              POP      {r3-r7,pc}
;;;102    //48bit
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  RGBLED_UPDATA
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000009
                          DCD      0x00000049
                          DCD      0x00000249
                          DCD      0x00009249
                          DCD      0x00000004
                          DCD      0x00000024
                          DCD      0x00000124
                          DCD      0x00000924
                          DCD      0x00002924

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L82.16|
00000e  461d              MOV      r5,r3
                  |L82.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "APP\\EINK\\EINK_Driver.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_EINK_Driver_c_1ac65982____REV16|
#line 492 "C:\\Users\\bbb\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.6.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___13_EINK_Driver_c_1ac65982____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_EINK_Driver_c_1ac65982____REVSH|
#line 507
|__asm___13_EINK_Driver_c_1ac65982____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
