/*
 * ARM Limited (ARM) is supplying this software for use with Cortex-M
 * processor based microcontroller, but can be equally used for other
 * suitable processor architectures. This file can be freely distributed.
 * Modifications to this file shall be clearly marked.
 * 
 * THIS SOFTWARE IS PROVIDED "AS IS". NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * @file     TN2115s1.sfd
 * @brief    CMSIS-SVD SFD File
 * @version  1.0
 * @date     20. August 2019
 * @note     Generated by SVDConv V3.2.66 on Tuesday, 20.08.2019 11:11:19
 *           from File 'TN2115s1.svd',
 *           last modified on Tuesday, 20.08.2019 15:10:23
 */




// -----------------------------  Register Item Address: WDT_CSR  ---------------------------------
// SVD Line: 86

unsigned int WDT_CSR __AT (0x40000400);



// ---------------------------------  Register Item: WDT_CSR  -------------------------------------
// SVD Line: 86

//  <item> SFDITEM_REG__WDT_CSR
//    <name> CSR </name>
//    <i> [Bits 31..0] RW (@ 0x40000400) Watchdog Control and Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((WDT_CSR >> 0) & 0xFFFFFFFF), ((WDT_CSR = (WDT_CSR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------------  Peripheral View: WDT  --------------------------------------
// SVD Line: 74

//  <view> WDT
//    <name> WDT </name>
//    <item> SFDITEM_REG__WDT_CSR </item>
//  </view>
//  


// ---------------------------  Register Item Address: NFC_SYSCTRL  -------------------------------
// SVD Line: 129

unsigned char NFC_SYSCTRL __AT (0x40000300);



// ---------------------------  Field Item: NFC_SYSCTRL_PASSTHRUTRG  ------------------------------
// SVD Line: 137

//  <item> SFDITEM_FIELD__NFC_SYSCTRL_PASSTHRUTRG
//    <name> PASSTHRUTRG </name>
//    <w> 
//    <i> [Bit 5] WO (@ 0x40000300) Type 4 mode pass-through trigger </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_SYSCTRL ) </loc>
//      <o.5..5> PASSTHRUTRG
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: NFC_SYSCTRL  ----------------------------------
// SVD Line: 129

//  <rtree> SFDITEM_REG__NFC_SYSCTRL
//    <name> SYSCTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000300) NFC Subsystem Control Register </i>
//    <loc> ( (unsigned char)((NFC_SYSCTRL >> 0) & 0xFF), ((NFC_SYSCTRL = (NFC_SYSCTRL & ~(0x20UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x20) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_SYSCTRL_PASSTHRUTRG </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: NFC_HARVCTRL  ------------------------------
// SVD Line: 148

unsigned char NFC_HARVCTRL __AT (0x40000304);



// ----------------------------  Field Item: NFC_HARVCTRL_CAPCHTHH  -------------------------------
// SVD Line: 156

//  <item> SFDITEM_FIELD__NFC_HARVCTRL_CAPCHTHH
//    <name> CAPCHTHH </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x40000304) \nHarv2 capacitor switching voltage Hi threshold selection\n0 : 2V7 = 2.7V\n1 : 3V3 = 3.3V\n2 : 3V9 = 3.9V\n3 : 4V5 = 4.5V\n4 : 5V1 = 5.1V\n5 : 6V3 = 6.3V\n6 : 7V5 = 7.5V\n7 : 8V7 = 8.7V </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_HARVCTRL ) </loc>
//      <o.2..0> CAPCHTHH
//        <0=> 0: 2V7 = 2.7V
//        <1=> 1: 3V3 = 3.3V
//        <2=> 2: 3V9 = 3.9V
//        <3=> 3: 4V5 = 4.5V
//        <4=> 4: 5V1 = 5.1V
//        <5=> 5: 6V3 = 6.3V
//        <6=> 6: 7V5 = 7.5V
//        <7=> 7: 8V7 = 8.7V
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: NFC_HARVCTRL_CAPCHTHL  -------------------------------
// SVD Line: 205

//  <item> SFDITEM_FIELD__NFC_HARVCTRL_CAPCHTHL
//    <name> CAPCHTHL </name>
//    <rw> 
//    <i> [Bits 5..3] RW (@ 0x40000304) \nHarv2 capacitor switching voltage Lo threshold selection\n0 : 2V4 = 2.4V\n1 : 3V0 = 3.0V\n2 : 3V6 = 3.6V\n3 : 4V2 = 4.2V\n4 : 4V8 = 4.8V\n5 : 6V0 = 6.0V\n6 : 7V2 = 7.2V\n7 : OFF = OFF </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_HARVCTRL ) </loc>
//      <o.5..3> CAPCHTHL
//        <0=> 0: 2V4 = 2.4V
//        <1=> 1: 3V0 = 3.0V
//        <2=> 2: 3V6 = 3.6V
//        <3=> 3: 4V2 = 4.2V
//        <4=> 4: 4V8 = 4.8V
//        <5=> 5: 6V0 = 6.0V
//        <6=> 6: 7V2 = 7.2V
//        <7=> 7: OFF = OFF
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: NFC_HARVCTRL_CAPFORCECH  ------------------------------
// SVD Line: 254

//  <item> SFDITEM_FIELD__NFC_HARVCTRL_CAPFORCECH
//    <name> CAPFORCECH </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40000304) \nHarv2 capacitor force charging\n0 : OFF = No force charging\n1 : ON = Force charging </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_HARVCTRL ) </loc>
//      <o.6..6> CAPFORCECH
//        <0=> 0: OFF = No force charging
//        <1=> 1: ON = Force charging
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: NFC_HARVCTRL  ----------------------------------
// SVD Line: 148

//  <rtree> SFDITEM_REG__NFC_HARVCTRL
//    <name> HARVCTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000304) NFC Energy Harvesting Control Register </i>
//    <loc> ( (unsigned char)((NFC_HARVCTRL >> 0) & 0xFF), ((NFC_HARVCTRL = (NFC_HARVCTRL & ~(0x7FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_HARVCTRL_CAPCHTHH </item>
//    <item> SFDITEM_FIELD__NFC_HARVCTRL_CAPCHTHL </item>
//    <item> SFDITEM_FIELD__NFC_HARVCTRL_CAPFORCECH </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: NFC_OPCTRL  -------------------------------
// SVD Line: 277

unsigned char NFC_OPCTRL __AT (0x40000308);



// -----------------------------  Field Item: NFC_OPCTRL_OPERMODE  --------------------------------
// SVD Line: 285

//  <item> SFDITEM_FIELD__NFC_OPCTRL_OPERMODE
//    <name> OPERMODE </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40000308) \nNFC Tag interface operation mode\n0 : NORF = NFC disabled\n1 : NOEEP = NFC no EEPROM access\n2 : EEPRO = NFC EEPROM read-only\n3 : EEPRW = NFC EEPROM read-write </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_OPCTRL ) </loc>
//      <o.1..0> OPERMODE
//        <0=> 0: NORF = NFC disabled
//        <1=> 1: NOEEP = NFC no EEPROM access
//        <2=> 2: EEPRO = NFC EEPROM read-only
//        <3=> 3: EEPRW = NFC EEPROM read-write
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: NFC_OPCTRL  -----------------------------------
// SVD Line: 277

//  <rtree> SFDITEM_REG__NFC_OPCTRL
//    <name> OPCTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000308) NFC Operation Control Register </i>
//    <loc> ( (unsigned char)((NFC_OPCTRL >> 0) & 0xFF), ((NFC_OPCTRL = (NFC_OPCTRL & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_OPCTRL_OPERMODE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: NFC_POWER  --------------------------------
// SVD Line: 318

unsigned char NFC_POWER __AT (0x4000030C);



// -----------------------------  Field Item: NFC_POWER_LDO18OPT  ---------------------------------
// SVD Line: 326

//  <item> SFDITEM_FIELD__NFC_POWER_LDO18OPT
//    <name> LDO18OPT </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x4000030C) \n1.8V LDO output voltage control\n0 : 1V5 = 1.588V\n1 : 1V6 = 1.6875V\n2 : 1V8 = 1.8V\n3 : 1V9 = 1.928V </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_POWER ) </loc>
//      <o.1..0> LDO18OPT
//        <0=> 0: 1V5 = 1.588V
//        <1=> 1: 1V6 = 1.6875V
//        <2=> 2: 1V8 = 1.8V
//        <3=> 3: 1V9 = 1.928V
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: NFC_POWER_LDO33OPT  ---------------------------------
// SVD Line: 355

//  <item> SFDITEM_FIELD__NFC_POWER_LDO33OPT
//    <name> LDO33OPT </name>
//    <rw> 
//    <i> [Bits 3..2] RW (@ 0x4000030C) \n3.3V LDO output voltage control\n0 : 2V7 = 2.7V\n1 : 3V = 3V\n2 : 3V3 = 3.375V\n3 : 3V8 = 3.857V </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_POWER ) </loc>
//      <o.3..2> LDO33OPT
//        <0=> 0: 2V7 = 2.7V
//        <1=> 1: 3V = 3V
//        <2=> 2: 3V3 = 3.375V
//        <3=> 3: 3V8 = 3.857V
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: NFC_POWER_BGOPT  ----------------------------------
// SVD Line: 384

//  <item> SFDITEM_FIELD__NFC_POWER_BGOPT
//    <name> BGOPT </name>
//    <rw> 
//    <i> [Bits 6..4] RW (@ 0x4000030C) \nBandgap output voltage control\n0 : 750 = 750mV\n1 : 714 = 714mV\n2 : 677 = 677mV\n3 : 640 = 640mV\n4 : 604 = 604mV\n5 : 567 = 567mV\n6 : 531 = 531mV\n7 : 494 = 494mV </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_POWER ) </loc>
//      <o.6..4> BGOPT
//        <0=> 0: 750 = 750mV
//        <1=> 1: 714 = 714mV
//        <2=> 2: 677 = 677mV
//        <3=> 3: 640 = 640mV
//        <4=> 4: 604 = 604mV
//        <5=> 5: 567 = 567mV
//        <6=> 6: 531 = 531mV
//        <7=> 7: 494 = 494mV
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: NFC_POWER_AVDD18  ----------------------------------
// SVD Line: 433

//  <item> SFDITEM_FIELD__NFC_POWER_AVDD18
//    <name> AVDD18 </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4000030C) \nAVDD18 rise control\n0 : RISE = Rise up AVDD18 upon powerup\n1 : NORISE = Do not rise up AVDD18 upon powerup </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_POWER ) </loc>
//      <o.7..7> AVDD18
//        <0=> 0: RISE = Rise up AVDD18 upon powerup
//        <1=> 1: NORISE = Do not rise up AVDD18 upon powerup
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: NFC_POWER  -----------------------------------
// SVD Line: 318

//  <rtree> SFDITEM_REG__NFC_POWER
//    <name> POWER </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4000030C) System Power and Regulator Control Register </i>
//    <loc> ( (unsigned char)((NFC_POWER >> 0) & 0xFF), ((NFC_POWER = (NFC_POWER & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_POWER_LDO18OPT </item>
//    <item> SFDITEM_FIELD__NFC_POWER_LDO33OPT </item>
//    <item> SFDITEM_FIELD__NFC_POWER_BGOPT </item>
//    <item> SFDITEM_FIELD__NFC_POWER_AVDD18 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: NFC_BROWNOUT3V3  -----------------------------
// SVD Line: 456

unsigned char NFC_BROWNOUT3V3 __AT (0x40000310);



// ----------------------------  Field Item: NFC_BROWNOUT3V3_BROEN  -------------------------------
// SVD Line: 464

//  <item> SFDITEM_FIELD__NFC_BROWNOUT3V3_BROEN
//    <name> BROEN </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40000310) Brownout Enable </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_BROWNOUT3V3 ) </loc>
//      <o.7..7> BROEN
//    </check>
//  </item>
//  


// ---------------------------  Field Item: NFC_BROWNOUT3V3_BROLVL  -------------------------------
// SVD Line: 471

//  <item> SFDITEM_FIELD__NFC_BROWNOUT3V3_BROLVL
//    <name> BROLVL </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x40000310) \nBrownout Voltage Level\n0 : 2V3 = 2.3V\n1 : 2V5 = 2.5V\n2 : 2V7 = 2.7V\n3 : 2V9 = 2.9V </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_BROWNOUT3V3 ) </loc>
//      <o.6..5> BROLVL
//        <0=> 0: 2V3 = 2.3V
//        <1=> 1: 2V5 = 2.5V
//        <2=> 2: 2V7 = 2.7V
//        <3=> 3: 2V9 = 2.9V
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: NFC_BROWNOUT3V3  --------------------------------
// SVD Line: 456

//  <rtree> SFDITEM_REG__NFC_BROWNOUT3V3
//    <name> BROWNOUT3V3 </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000310) Brownout Control Register </i>
//    <loc> ( (unsigned char)((NFC_BROWNOUT3V3 >> 0) & 0xFF), ((NFC_BROWNOUT3V3 = (NFC_BROWNOUT3V3 & ~(0xE0UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xE0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_BROWNOUT3V3_BROEN </item>
//    <item> SFDITEM_FIELD__NFC_BROWNOUT3V3_BROLVL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: NFC_RXCTRL  -------------------------------
// SVD Line: 503

unsigned char NFC_RXCTRL __AT (0x40000314);



// ------------------------------  Field Item: NFC_RXCTRL_RXGAIN  ---------------------------------
// SVD Line: 511

//  <item> SFDITEM_FIELD__NFC_RXCTRL_RXGAIN
//    <name> RXGAIN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000314) \nRX GAIN x2\n0 : X1 = X1 gain\n1 : X2 = X2 gain </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_RXCTRL ) </loc>
//      <o.0..0> RXGAIN
//        <0=> 0: X1 = X1 gain
//        <1=> 1: X2 = X2 gain
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: NFC_RXCTRL_RXWAKEUPTH  -------------------------------
// SVD Line: 532

//  <item> SFDITEM_FIELD__NFC_RXCTRL_RXWAKEUPTH
//    <name> RXWAKEUPTH </name>
//    <rw> 
//    <i> [Bits 4..2] RW (@ 0x40000314) \nRX wakeup threshold control\n0 : 25 = 25mV\n1 : 50 = 50mV\n2 : 75 = 75mV\n3 : 100 = 100mV\n4 : 125 = 125mV\n5 : 150 = 150mV\n6 : 175 = 175mV\n7 : 200 = 200mV </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_RXCTRL ) </loc>
//      <o.4..2> RXWAKEUPTH
//        <0=> 0: 25 = 25mV
//        <1=> 1: 50 = 50mV
//        <2=> 2: 75 = 75mV
//        <3=> 3: 100 = 100mV
//        <4=> 4: 125 = 125mV
//        <5=> 5: 150 = 150mV
//        <6=> 6: 175 = 175mV
//        <7=> 7: 200 = 200mV
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: NFC_RXCTRL  -----------------------------------
// SVD Line: 503

//  <rtree> SFDITEM_REG__NFC_RXCTRL
//    <name> RXCTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000314) NFC RX Control Register </i>
//    <loc> ( (unsigned char)((NFC_RXCTRL >> 0) & 0xFF), ((NFC_RXCTRL = (NFC_RXCTRL & ~(0x1DUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1D) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_RXCTRL_RXGAIN </item>
//    <item> SFDITEM_FIELD__NFC_RXCTRL_RXWAKEUPTH </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: NFC_TXCTRL  -------------------------------
// SVD Line: 585

unsigned char NFC_TXCTRL __AT (0x40000318);



// ----------------------------  Field Item: NFC_TXCTRL_TXPOLARITY  -------------------------------
// SVD Line: 593

//  <item> SFDITEM_FIELD__NFC_TXCTRL_TXPOLARITY
//    <name> TXPOLARITY </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000318) \nTX modulation polarity\n0 : NORMAL = Normal polarity\n1 : INV = Inverse polarity </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_TXCTRL ) </loc>
//      <o.0..0> TXPOLARITY
//        <0=> 0: NORMAL = Normal polarity
//        <1=> 1: INV = Inverse polarity
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: NFC_TXCTRL_TXAMP  ----------------------------------
// SVD Line: 614

//  <item> SFDITEM_FIELD__NFC_TXCTRL_TXAMP
//    <name> TXAMP </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40000318) TX load modulation strength </i>
//    <edit> 
//      <loc> ( (unsigned char)((NFC_TXCTRL >> 1) & 0x7), ((NFC_TXCTRL = (NFC_TXCTRL & ~(0x7UL << 1 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 1 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: NFC_TXCTRL  -----------------------------------
// SVD Line: 585

//  <rtree> SFDITEM_REG__NFC_TXCTRL
//    <name> TXCTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000318) NFC TX Control Register </i>
//    <loc> ( (unsigned char)((NFC_TXCTRL >> 0) & 0xFF), ((NFC_TXCTRL = (NFC_TXCTRL & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_TXCTRL_TXPOLARITY </item>
//    <item> SFDITEM_FIELD__NFC_TXCTRL_TXAMP </item>
//  </rtree>
//  


// --------------------------  Register Item Address: NFC_CAPCURCTRL  -----------------------------
// SVD Line: 626

unsigned char NFC_CAPCURCTRL __AT (0x4000031C);



// ---------------------------  Field Item: NFC_CAPCURCTRL_SOFTCUR  -------------------------------
// SVD Line: 635

//  <item> SFDITEM_FIELD__NFC_CAPCURCTRL_SOFTCUR
//    <name> SOFTCUR </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4000031C) \nEnable switch soft start\n0 : OFF = Disable\n1 : ON = Enable </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_CAPCURCTRL ) </loc>
//      <o.7..7> SOFTCUR
//        <0=> 0: OFF = Disable
//        <1=> 1: ON = Enable
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: NFC_CAPCURCTRL_CAPCUR  -------------------------------
// SVD Line: 656

//  <item> SFDITEM_FIELD__NFC_CAPCURCTRL_CAPCUR
//    <name> CAPCUR </name>
//    <rw> 
//    <i> [Bits 6..5] RW (@ 0x4000031C) \nCapacitor charge current\n0 : X1 = Normal current\n1 : X05 = Half current\n2 : X2 = Double current\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_CAPCURCTRL ) </loc>
//      <o.6..5> CAPCUR
//        <0=> 0: X1 = Normal current
//        <1=> 1: X05 = Half current
//        <2=> 2: X2 = Double current
//        <3=> 3: 
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: NFC_CAPCURCTRL  ---------------------------------
// SVD Line: 626

//  <rtree> SFDITEM_REG__NFC_CAPCURCTRL
//    <name> CAPCURCTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4000031C) Capacitor Switch Current Control Register </i>
//    <loc> ( (unsigned char)((NFC_CAPCURCTRL >> 0) & 0xFF), ((NFC_CAPCURCTRL = (NFC_CAPCURCTRL & ~(0xE0UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xE0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_CAPCURCTRL_SOFTCUR </item>
//    <item> SFDITEM_FIELD__NFC_CAPCURCTRL_CAPCUR </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: NFC_OSC  ---------------------------------
// SVD Line: 689

unsigned char NFC_OSC __AT (0x40000320);



// -------------------------------  Field Item: NFC_OSC_OSCTRIM  ----------------------------------
// SVD Line: 697

//  <item> SFDITEM_FIELD__NFC_OSC_OSCTRIM
//    <name> OSCTRIM </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000320) OSC trim value </i>
//    <edit> 
//      <loc> ( (unsigned char)((NFC_OSC >> 0) & 0xFF), ((NFC_OSC = (NFC_OSC & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------------  Register RTree: NFC_OSC  ------------------------------------
// SVD Line: 689

//  <rtree> SFDITEM_REG__NFC_OSC
//    <name> OSC </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000320) OSC Trimming Register </i>
//    <loc> ( (unsigned char)((NFC_OSC >> 0) & 0xFF), ((NFC_OSC = (NFC_OSC & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_OSC_OSCTRIM </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: NFC_NFCRTX  -------------------------------
// SVD Line: 708

unsigned char NFC_NFCRTX __AT (0x40000324);



// -----------------------------  Field Item: NFC_NFCRTX_FIELDINT  --------------------------------
// SVD Line: 716

//  <item> SFDITEM_FIELD__NFC_NFCRTX_FIELDINT
//    <name> FIELDINT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000324) NFC field change interrupt </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_NFCRTX ) </loc>
//      <o.0..0> FIELDINT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: NFC_NFCRTX_EXT_INTR  --------------------------------
// SVD Line: 724

//  <item> SFDITEM_FIELD__NFC_NFCRTX_EXT_INTR
//    <name> EXT_INTR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40000324) GPIO Interrupt Flags </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_NFCRTX ) </loc>
//      <o.1..1> EXT_INTR
//    </check>
//  </item>
//  


// ---------------------------  Field Item: NFC_NFCRTX_CAP_OK_INTR  -------------------------------
// SVD Line: 732

//  <item> SFDITEM_FIELD__NFC_NFCRTX_CAP_OK_INTR
//    <name> CAP_OK_INTR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40000324) Capacitor OK Interrupt Flags </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_NFCRTX ) </loc>
//      <o.2..2> CAP_OK_INTR
//    </check>
//  </item>
//  


// ------------------------------  Field Item: NFC_NFCRTX_CAPEN  ----------------------------------
// SVD Line: 740

//  <item> SFDITEM_FIELD__NFC_NFCRTX_CAPEN
//    <name> CAPEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40000324) Enable automatic capacitor charging </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_NFCRTX ) </loc>
//      <o.3..3> CAPEN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: NFC_NFCRTX_TXENDINT  --------------------------------
// SVD Line: 749

//  <item> SFDITEM_FIELD__NFC_NFCRTX_TXENDINT
//    <name> TXENDINT </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40000324) NFC TX end interrupt </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_NFCRTX ) </loc>
//      <o.4..4> TXENDINT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: NFC_NFCRTX_RXENDINT  --------------------------------
// SVD Line: 758

//  <item> SFDITEM_FIELD__NFC_NFCRTX_RXENDINT
//    <name> RXENDINT </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40000324) NFC RX end interrupt </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_NFCRTX ) </loc>
//      <o.5..5> RXENDINT
//    </check>
//  </item>
//  


// -----------------------------  Field Item: NFC_NFCRTX_TXSTART  ---------------------------------
// SVD Line: 767

//  <item> SFDITEM_FIELD__NFC_NFCRTX_TXSTART
//    <name> TXSTART </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40000324) NFC Start TX </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_NFCRTX ) </loc>
//      <o.6..6> TXSTART
//    </check>
//  </item>
//  


// ---------------------------  Field Item: NFC_NFCRTX_CLKRCVSTART  -------------------------------
// SVD Line: 776

//  <item> SFDITEM_FIELD__NFC_NFCRTX_CLKRCVSTART
//    <name> CLKRCVSTART </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40000324) NFC start clock recovery </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_NFCRTX ) </loc>
//      <o.7..7> CLKRCVSTART
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: NFC_NFCRTX  -----------------------------------
// SVD Line: 708

//  <rtree> SFDITEM_REG__NFC_NFCRTX
//    <name> NFCRTX </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000324) NFC RTX Register </i>
//    <loc> ( (unsigned char)((NFC_NFCRTX >> 0) & 0xFF), ((NFC_NFCRTX = (NFC_NFCRTX & ~(0xCFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xCF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_NFCRTX_FIELDINT </item>
//    <item> SFDITEM_FIELD__NFC_NFCRTX_EXT_INTR </item>
//    <item> SFDITEM_FIELD__NFC_NFCRTX_CAP_OK_INTR </item>
//    <item> SFDITEM_FIELD__NFC_NFCRTX_CAPEN </item>
//    <item> SFDITEM_FIELD__NFC_NFCRTX_TXENDINT </item>
//    <item> SFDITEM_FIELD__NFC_NFCRTX_RXENDINT </item>
//    <item> SFDITEM_FIELD__NFC_NFCRTX_TXSTART </item>
//    <item> SFDITEM_FIELD__NFC_NFCRTX_CLKRCVSTART </item>
//  </rtree>
//  


// -------------------------  Register Item Address: NFC_CLKCALIBVAL  -----------------------------
// SVD Line: 788

unsigned char NFC_CLKCALIBVAL __AT (0x4000032C);



// ---------------------------  Field Item: NFC_CLKCALIBVAL_HALFDUR  ------------------------------
// SVD Line: 796

//  <item> SFDITEM_FIELD__NFC_CLKCALIBVAL_HALFDUR
//    <name> HALFDUR </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4000032C) Calibration Result </i>
//    <edit> 
//      <loc> ( (unsigned char)((NFC_CLKCALIBVAL >> 0) & 0xFF), ((NFC_CLKCALIBVAL = (NFC_CLKCALIBVAL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: NFC_CLKCALIBVAL  --------------------------------
// SVD Line: 788

//  <rtree> SFDITEM_REG__NFC_CLKCALIBVAL
//    <name> CLKCALIBVAL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4000032C) Clock Calibration Result Register </i>
//    <loc> ( (unsigned char)((NFC_CLKCALIBVAL >> 0) & 0xFF), ((NFC_CLKCALIBVAL = (NFC_CLKCALIBVAL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_CLKCALIBVAL_HALFDUR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: NFC_MODULECTRL  -----------------------------
// SVD Line: 807

unsigned char NFC_MODULECTRL __AT (0x40000330);



// ----------------------------  Field Item: NFC_MODULECTRL_UARTEN  -------------------------------
// SVD Line: 815

//  <item> SFDITEM_FIELD__NFC_MODULECTRL_UARTEN
//    <name> UARTEN </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40000330) UART Enable </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_MODULECTRL ) </loc>
//      <o.5..5> UARTEN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: NFC_MODULECTRL_SPIEN  --------------------------------
// SVD Line: 822

//  <item> SFDITEM_FIELD__NFC_MODULECTRL_SPIEN
//    <name> SPIEN </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40000330) SPI Enable </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_MODULECTRL ) </loc>
//      <o.6..6> SPIEN
//    </check>
//  </item>
//  


// --------------------------  Field Item: NFC_MODULECTRL_CLKCALIBEN  -----------------------------
// SVD Line: 829

//  <item> SFDITEM_FIELD__NFC_MODULECTRL_CLKCALIBEN
//    <name> CLKCALIBEN </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40000330) Clock Calibration Enable </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_MODULECTRL ) </loc>
//      <o.7..7> CLKCALIBEN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: NFC_MODULECTRL  ---------------------------------
// SVD Line: 807

//  <rtree> SFDITEM_REG__NFC_MODULECTRL
//    <name> MODULECTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000330) Module Enable Register </i>
//    <loc> ( (unsigned char)((NFC_MODULECTRL >> 0) & 0xFF), ((NFC_MODULECTRL = (NFC_MODULECTRL & ~(0xE0UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xE0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_MODULECTRL_UARTEN </item>
//    <item> SFDITEM_FIELD__NFC_MODULECTRL_SPIEN </item>
//    <item> SFDITEM_FIELD__NFC_MODULECTRL_CLKCALIBEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: NFC_RXGLITCH  ------------------------------
// SVD Line: 839

unsigned char NFC_RXGLITCH __AT (0x40000334);



// -----------------------------  Field Item: NFC_RXGLITCH_GLITCH  --------------------------------
// SVD Line: 847

//  <item> SFDITEM_FIELD__NFC_RXGLITCH_GLITCH
//    <name> GLITCH </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40000334) \nGlitch Filter\n0 : OFF = Filter off\n1 : 2CLKS = 2 clocks\n2 : 4CLKS = 4 clocks\n3 : 6CLKS = 6 clocks </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_RXGLITCH ) </loc>
//      <o.1..0> GLITCH
//        <0=> 0: OFF = Filter off
//        <1=> 1: 2CLKS = 2 clocks
//        <2=> 2: 4CLKS = 4 clocks
//        <3=> 3: 6CLKS = 6 clocks
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: NFC_RXGLITCH  ----------------------------------
// SVD Line: 839

//  <rtree> SFDITEM_REG__NFC_RXGLITCH
//    <name> RXGLITCH </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000334) RX De-glitch Control Register </i>
//    <loc> ( (unsigned char)((NFC_RXGLITCH >> 0) & 0xFF), ((NFC_RXGLITCH = (NFC_RXGLITCH & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_RXGLITCH_GLITCH </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: NFC_STATUS  -------------------------------
// SVD Line: 880

unsigned char NFC_STATUS __AT (0x40000328);



// ------------------------------  Field Item: NFC_STATUS_RAMUD  ----------------------------------
// SVD Line: 888

//  <item> SFDITEM_FIELD__NFC_STATUS_RAMUD
//    <name> RAMUD </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000328) \nRAM Memory update indication\n0 : NOUD = No RAM update from NFC\n1 : UD = RAM updated from NFC </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_STATUS ) </loc>
//      <o.0..0> RAMUD
//        <0=> 0: NOUD = No RAM update from NFC
//        <1=> 1: UD = RAM updated from NFC
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: NFC_STATUS_EEPUD  ----------------------------------
// SVD Line: 908

//  <item> SFDITEM_FIELD__NFC_STATUS_EEPUD
//    <name> EEPUD </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40000328) \nEEPROM update indication\n0 : NOUD = No EEP update from NFC\n1 : UD = EEP updated from NFC </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_STATUS ) </loc>
//      <o.1..1> EEPUD
//        <0=> 0: NOUD = No EEP update from NFC
//        <1=> 1: UD = EEP updated from NFC
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: NFC_STATUS_CAPCHOK  ---------------------------------
// SVD Line: 928

//  <item> SFDITEM_FIELD__NFC_STATUS_CAPCHOK
//    <name> CAPCHOK </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40000328) \nHarv2 capacitor charging status\n0 : NFULL = Capacitor not full\n1 : FULL = Capacitor full </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_STATUS ) </loc>
//      <o.2..2> CAPCHOK
//        <0=> 0: NFULL = Capacitor not full
//        <1=> 1: FULL = Capacitor full
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: NFC_STATUS_ECED  ----------------------------------
// SVD Line: 948

//  <item> SFDITEM_FIELD__NFC_STATUS_ECED
//    <name> ECED </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40000328) EEPROM ECED status </i>
//    <check> 
//      <loc> ( (unsigned char) NFC_STATUS ) </loc>
//      <o.4..4> ECED
//    </check>
//  </item>
//  


// -------------------------------  Field Item: NFC_STATUS_BUSY  ----------------------------------
// SVD Line: 955

//  <item> SFDITEM_FIELD__NFC_STATUS_BUSY
//    <name> BUSY </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40000328) \nEEPROM busy\n0 : NBUSY = EEPROM not busy\n1 : BUSY = EEPROM busy </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_STATUS ) </loc>
//      <o.5..5> BUSY
//        <0=> 0: NBUSY = EEPROM not busy
//        <1=> 1: BUSY = EEPROM busy
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: NFC_STATUS_RFFIELD  ---------------------------------
// SVD Line: 975

//  <item> SFDITEM_FIELD__NFC_STATUS_RFFIELD
//    <name> RFFIELD </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40000328) \nNFC field presence\n0 : OFF = No RF field\n1 : ON = RF field is present </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_STATUS ) </loc>
//      <o.6..6> RFFIELD
//        <0=> 0: OFF = No RF field
//        <1=> 1: ON = RF field is present
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: NFC_STATUS_RFON  ----------------------------------
// SVD Line: 995

//  <item> SFDITEM_FIELD__NFC_STATUS_RFON
//    <name> RFON </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40000328) \nNFC interface on/off\n0 : OFF = RF off\n1 : ON = RF on </i>
//    <combo> 
//      <loc> ( (unsigned char) NFC_STATUS ) </loc>
//      <o.7..7> RFON
//        <0=> 0: OFF = RF off
//        <1=> 1: ON = RF on
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: NFC_STATUS  -----------------------------------
// SVD Line: 880

//  <rtree> SFDITEM_REG__NFC_STATUS
//    <name> STATUS </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000328) NFC Status Display Register </i>
//    <loc> ( (unsigned char)((NFC_STATUS >> 0) & 0xFF), ((NFC_STATUS = (NFC_STATUS & ~(0x23UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x23) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__NFC_STATUS_RAMUD </item>
//    <item> SFDITEM_FIELD__NFC_STATUS_EEPUD </item>
//    <item> SFDITEM_FIELD__NFC_STATUS_CAPCHOK </item>
//    <item> SFDITEM_FIELD__NFC_STATUS_ECED </item>
//    <item> SFDITEM_FIELD__NFC_STATUS_BUSY </item>
//    <item> SFDITEM_FIELD__NFC_STATUS_RFFIELD </item>
//    <item> SFDITEM_FIELD__NFC_STATUS_RFON </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: NFC  --------------------------------------
// SVD Line: 97

//  <view> NFC
//    <name> NFC </name>
//    <item> SFDITEM_REG__NFC_SYSCTRL </item>
//    <item> SFDITEM_REG__NFC_HARVCTRL </item>
//    <item> SFDITEM_REG__NFC_OPCTRL </item>
//    <item> SFDITEM_REG__NFC_POWER </item>
//    <item> SFDITEM_REG__NFC_BROWNOUT3V3 </item>
//    <item> SFDITEM_REG__NFC_RXCTRL </item>
//    <item> SFDITEM_REG__NFC_TXCTRL </item>
//    <item> SFDITEM_REG__NFC_CAPCURCTRL </item>
//    <item> SFDITEM_REG__NFC_OSC </item>
//    <item> SFDITEM_REG__NFC_NFCRTX </item>
//    <item> SFDITEM_REG__NFC_CLKCALIBVAL </item>
//    <item> SFDITEM_REG__NFC_MODULECTRL </item>
//    <item> SFDITEM_REG__NFC_RXGLITCH </item>
//    <item> SFDITEM_REG__NFC_STATUS </item>
//  </view>
//  


// ----------------------------  Register Item Address: I2C_ADDR0  --------------------------------
// SVD Line: 1039

unsigned char I2C_ADDR0 __AT (0x40000000);



// -------------------------------  Field Item: I2C_ADDR0_GCen  -----------------------------------
// SVD Line: 1047

//  <item> SFDITEM_FIELD__I2C_ADDR0_GCen
//    <name> GCen </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000000) \nGeneral call enable\n0 : OFF = General call disabled\n1 : ON = General call enabled </i>
//    <combo> 
//      <loc> ( (unsigned char) I2C_ADDR0 ) </loc>
//      <o.0..0> GCen
//        <0=> 0: OFF = General call disabled
//        <1=> 1: ON = General call enabled
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C_ADDR0_ADDR0  ----------------------------------
// SVD Line: 1067

//  <item> SFDITEM_FIELD__I2C_ADDR0_ADDR0
//    <name> ADDR0 </name>
//    <rw> 
//    <i> [Bits 7..1] RW (@ 0x40000000) Address 0 </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C_ADDR0 >> 1) & 0x7F), ((I2C_ADDR0 = (I2C_ADDR0 & ~(0x7FUL << 1 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 1 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: I2C_ADDR0  -----------------------------------
// SVD Line: 1039

//  <rtree> SFDITEM_REG__I2C_ADDR0
//    <name> ADDR0 </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000000) I2C Slave Address 0 Register </i>
//    <loc> ( (unsigned char)((I2C_ADDR0 >> 0) & 0xFF), ((I2C_ADDR0 = (I2C_ADDR0 & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C_ADDR0_GCen </item>
//    <item> SFDITEM_FIELD__I2C_ADDR0_ADDR0 </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C_ADDR1  --------------------------------
// SVD Line: 1078

unsigned char I2C_ADDR1 __AT (0x40000004);



// -------------------------------  Field Item: I2C_ADDR1_GCen  -----------------------------------
// SVD Line: 1086

//  <item> SFDITEM_FIELD__I2C_ADDR1_GCen
//    <name> GCen </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000004) \nGeneral call enable\n0 : OFF = General call disabled\n1 : ON = General call enabled </i>
//    <combo> 
//      <loc> ( (unsigned char) I2C_ADDR1 ) </loc>
//      <o.0..0> GCen
//        <0=> 0: OFF = General call disabled
//        <1=> 1: ON = General call enabled
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C_ADDR1_ADDR1  ----------------------------------
// SVD Line: 1106

//  <item> SFDITEM_FIELD__I2C_ADDR1_ADDR1
//    <name> ADDR1 </name>
//    <rw> 
//    <i> [Bits 7..1] RW (@ 0x40000004) Address 0 </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C_ADDR1 >> 1) & 0x7F), ((I2C_ADDR1 = (I2C_ADDR1 & ~(0x7FUL << 1 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7F) << 1 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: I2C_ADDR1  -----------------------------------
// SVD Line: 1078

//  <rtree> SFDITEM_REG__I2C_ADDR1
//    <name> ADDR1 </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000004) I2C Slave Address 1 Register </i>
//    <loc> ( (unsigned char)((I2C_ADDR1 >> 0) & 0xFF), ((I2C_ADDR1 = (I2C_ADDR1 & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C_ADDR1_GCen </item>
//    <item> SFDITEM_FIELD__I2C_ADDR1_ADDR1 </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: I2C_DATA  --------------------------------
// SVD Line: 1118

unsigned char I2C_DATA __AT (0x4000000C);



// --------------------------------  Field Item: I2C_DATA_DATA  -----------------------------------
// SVD Line: 1126

//  <item> SFDITEM_FIELD__I2C_DATA_DATA
//    <name> DATA </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4000000C) Data to receive or transmit </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C_DATA >> 0) & 0xFF), ((I2C_DATA = (I2C_DATA & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: I2C_DATA  ------------------------------------
// SVD Line: 1118

//  <rtree> SFDITEM_REG__I2C_DATA
//    <name> DATA </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4000000C) I2C RTX Data Register </i>
//    <loc> ( (unsigned char)((I2C_DATA >> 0) & 0xFF), ((I2C_DATA = (I2C_DATA & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C_DATA_DATA </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: I2C_CTRL  --------------------------------
// SVD Line: 1137

unsigned char I2C_CTRL __AT (0x40000010);



// --------------------------------  Field Item: I2C_CTRL_AAK  ------------------------------------
// SVD Line: 1145

//  <item> SFDITEM_FIELD__I2C_CTRL_AAK
//    <name> AAK </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40000010) \nAcknowlegement control\n0 : NACK = Enable NACK\n1 : ACK = Enable ACK </i>
//    <combo> 
//      <loc> ( (unsigned char) I2C_CTRL ) </loc>
//      <o.2..2> AAK
//        <0=> 0: NACK = Enable NACK
//        <1=> 1: ACK = Enable ACK
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: I2C_CTRL_IFLG  -----------------------------------
// SVD Line: 1164

//  <item> SFDITEM_FIELD__I2C_CTRL_IFLG
//    <name> IFLG </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40000010) \nInterrupt flag\n0 : CLR = Interrupt clear\n1 : SET = Interrupt set </i>
//    <combo> 
//      <loc> ( (unsigned char) I2C_CTRL ) </loc>
//      <o.3..3> IFLG
//        <0=> 0: CLR = Interrupt clear
//        <1=> 1: SET = Interrupt set
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: I2C_CTRL_ENAB  -----------------------------------
// SVD Line: 1183

//  <item> SFDITEM_FIELD__I2C_CTRL_ENAB
//    <name> ENAB </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40000010) \nI2C Enable\n0 : OFF = Disabled\n1 : ON = Enabled </i>
//    <combo> 
//      <loc> ( (unsigned char) I2C_CTRL ) </loc>
//      <o.6..6> ENAB
//        <0=> 0: OFF = Disabled
//        <1=> 1: ON = Enabled
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: I2C_CTRL_IEN  ------------------------------------
// SVD Line: 1202

//  <item> SFDITEM_FIELD__I2C_CTRL_IEN
//    <name> IEN </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40000010) \nInterrupt enable\n0 : OFF = Disabled\n1 : ON = Enabled </i>
//    <combo> 
//      <loc> ( (unsigned char) I2C_CTRL ) </loc>
//      <o.7..7> IEN
//        <0=> 0: OFF = Disabled
//        <1=> 1: ON = Enabled
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: I2C_CTRL  ------------------------------------
// SVD Line: 1137

//  <rtree> SFDITEM_REG__I2C_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000010) I2C CTRL Register </i>
//    <loc> ( (unsigned char)((I2C_CTRL >> 0) & 0xFF), ((I2C_CTRL = (I2C_CTRL & ~(0xCCUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xCC) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C_CTRL_AAK </item>
//    <item> SFDITEM_FIELD__I2C_CTRL_IFLG </item>
//    <item> SFDITEM_FIELD__I2C_CTRL_ENAB </item>
//    <item> SFDITEM_FIELD__I2C_CTRL_IEN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C_STATUS  -------------------------------
// SVD Line: 1223

unsigned char I2C_STATUS __AT (0x40000018);



// -------------------------------  Field Item: I2C_STATUS_STAT  ----------------------------------
// SVD Line: 1231

//  <item> SFDITEM_FIELD__I2C_STATUS_STAT
//    <name> STAT </name>
//    <r> 
//    <i> [Bits 7..0] RO (@ 0x40000018) Status display </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C_STATUS >> 0) & 0xFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: I2C_STATUS  -----------------------------------
// SVD Line: 1223

//  <rtree> SFDITEM_REG__I2C_STATUS
//    <name> STATUS </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000018) I2C Status Register </i>
//    <loc> ( (unsigned char)((I2C_STATUS >> 0) & 0xFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C_STATUS_STAT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C_RESET  --------------------------------
// SVD Line: 1343

unsigned char I2C_RESET __AT (0x4000001C);



// -------------------------------  Field Item: I2C_RESET_SRST  -----------------------------------
// SVD Line: 1351

//  <item> SFDITEM_FIELD__I2C_RESET_SRST
//    <name> SRST </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4000001C) Write any value to reset </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C_RESET >> 0) & 0xFF), ((I2C_RESET = (I2C_RESET & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: I2C_RESET  -----------------------------------
// SVD Line: 1343

//  <rtree> SFDITEM_REG__I2C_RESET
//    <name> RESET </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4000001C) I2C Reset Register </i>
//    <loc> ( (unsigned char)((I2C_RESET >> 0) & 0xFF), ((I2C_RESET = (I2C_RESET & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C_RESET_SRST </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: I2C  --------------------------------------
// SVD Line: 1022

//  <view> I2C
//    <name> I2C </name>
//    <item> SFDITEM_REG__I2C_ADDR0 </item>
//    <item> SFDITEM_REG__I2C_ADDR1 </item>
//    <item> SFDITEM_REG__I2C_DATA </item>
//    <item> SFDITEM_REG__I2C_CTRL </item>
//    <item> SFDITEM_REG__I2C_STATUS </item>
//    <item> SFDITEM_REG__I2C_RESET </item>
//  </view>
//  


// --------------------------  Register Item Address: SPI_INTENCTRL  ------------------------------
// SVD Line: 1383

unsigned char SPI_INTENCTRL __AT (0x40000100);



// ----------------------------  Field Item: SPI_INTENCTRL_RXINTEN  -------------------------------
// SVD Line: 1391

//  <item> SFDITEM_FIELD__SPI_INTENCTRL_RXINTEN
//    <name> RXINTEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000100) \nSPI RX overflow interrupt control\n0 : OFF = Disabled\n1 : ON = Enabled </i>
//    <combo> 
//      <loc> ( (unsigned char) SPI_INTENCTRL ) </loc>
//      <o.0..0> RXINTEN
//        <0=> 0: OFF = Disabled
//        <1=> 1: ON = Enabled
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: SPI_INTENCTRL_TXINTEN  -------------------------------
// SVD Line: 1410

//  <item> SFDITEM_FIELD__SPI_INTENCTRL_TXINTEN
//    <name> TXINTEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40000100) \nSPI TX underflow interrupt control\n0 : OFF = Disabled\n1 : ON = Enabled </i>
//    <combo> 
//      <loc> ( (unsigned char) SPI_INTENCTRL ) </loc>
//      <o.1..1> TXINTEN
//        <0=> 0: OFF = Disabled
//        <1=> 1: ON = Enabled
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: SPI_INTENCTRL  ---------------------------------
// SVD Line: 1383

//  <rtree> SFDITEM_REG__SPI_INTENCTRL
//    <name> INTENCTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000100) SPI Interrupt Control Register </i>
//    <loc> ( (unsigned char)((SPI_INTENCTRL >> 0) & 0xFF), ((SPI_INTENCTRL = (SPI_INTENCTRL & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPI_INTENCTRL_RXINTEN </item>
//    <item> SFDITEM_FIELD__SPI_INTENCTRL_TXINTEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: SPI_RTXCTRL  -------------------------------
// SVD Line: 1431

unsigned char SPI_RTXCTRL __AT (0x40000104);



// ------------------------------  Field Item: SPI_RTXCTRL_RXEN  ----------------------------------
// SVD Line: 1439

//  <item> SFDITEM_FIELD__SPI_RTXCTRL_RXEN
//    <name> RXEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000104) \nSPI RX control\n0 : OFF = Disabled\n1 : ON = Enabled </i>
//    <combo> 
//      <loc> ( (unsigned char) SPI_RTXCTRL ) </loc>
//      <o.0..0> RXEN
//        <0=> 0: OFF = Disabled
//        <1=> 1: ON = Enabled
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: SPI_RTXCTRL_TXEN  ----------------------------------
// SVD Line: 1458

//  <item> SFDITEM_FIELD__SPI_RTXCTRL_TXEN
//    <name> TXEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40000104) \nSPI TX control\n0 : OFF = Disabled\n1 : ON = Enabled </i>
//    <combo> 
//      <loc> ( (unsigned char) SPI_RTXCTRL ) </loc>
//      <o.1..1> TXEN
//        <0=> 0: OFF = Disabled
//        <1=> 1: ON = Enabled
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: SPI_RTXCTRL  ----------------------------------
// SVD Line: 1431

//  <rtree> SFDITEM_REG__SPI_RTXCTRL
//    <name> RTXCTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000104) SPI RTX Control Register </i>
//    <loc> ( (unsigned char)((SPI_RTXCTRL >> 0) & 0xFF), ((SPI_RTXCTRL = (SPI_RTXCTRL & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPI_RTXCTRL_RXEN </item>
//    <item> SFDITEM_FIELD__SPI_RTXCTRL_TXEN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: SPI_TXFIFO  -------------------------------
// SVD Line: 1479

unsigned char SPI_TXFIFO __AT (0x40000108);



// --------------------------------  Register Item: SPI_TXFIFO  -----------------------------------
// SVD Line: 1479

//  <item> SFDITEM_REG__SPI_TXFIFO
//    <name> TXFIFO </name>
//    <i> [Bits 7..0] RW (@ 0x40000108) SPI TX FIFO Register </i>
//    <edit> 
//      <loc> ( (unsigned char)((SPI_TXFIFO >> 0) & 0xFFFFFFFF), ((SPI_TXFIFO = (SPI_TXFIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: SPI_RXFIFO  -------------------------------
// SVD Line: 1487

unsigned char SPI_RXFIFO __AT (0x4000010C);



// --------------------------------  Register Item: SPI_RXFIFO  -----------------------------------
// SVD Line: 1487

//  <item> SFDITEM_REG__SPI_RXFIFO
//    <name> RXFIFO </name>
//    <i> [Bits 7..0] RW (@ 0x4000010C) SPI TX FIFO Register </i>
//    <edit> 
//      <loc> ( (unsigned char)((SPI_RXFIFO >> 0) & 0xFFFFFFFF), ((SPI_RXFIFO = (SPI_RXFIFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: SPI_TXFIFOWMCTRL  ----------------------------
// SVD Line: 1495

unsigned char SPI_TXFIFOWMCTRL __AT (0x40000110);



// --------------------------  Field Item: SPI_TXFIFOWMCTRL_TXFIFOWM  -----------------------------
// SVD Line: 1503

//  <item> SFDITEM_FIELD__SPI_TXFIFOWMCTRL_TXFIFOWM
//    <name> TXFIFOWM </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x40000110) SPI TX FIFO underflow watermark control </i>
//    <edit> 
//      <loc> ( (unsigned char)((SPI_TXFIFOWMCTRL >> 0) & 0x7), ((SPI_TXFIFOWMCTRL = (SPI_TXFIFOWMCTRL & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: SPI_TXFIFOWMCTRL  --------------------------------
// SVD Line: 1495

//  <rtree> SFDITEM_REG__SPI_TXFIFOWMCTRL
//    <name> TXFIFOWMCTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000110) SPI TX FIFO Watermark Control Register </i>
//    <loc> ( (unsigned char)((SPI_TXFIFOWMCTRL >> 0) & 0xFF), ((SPI_TXFIFOWMCTRL = (SPI_TXFIFOWMCTRL & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPI_TXFIFOWMCTRL_TXFIFOWM </item>
//  </rtree>
//  


// -------------------------  Register Item Address: SPI_RXFIFOWMCTRL  ----------------------------
// SVD Line: 1512

unsigned char SPI_RXFIFOWMCTRL __AT (0x40000114);



// --------------------------  Field Item: SPI_RXFIFOWMCTRL_RXFIFOWM  -----------------------------
// SVD Line: 1520

//  <item> SFDITEM_FIELD__SPI_RXFIFOWMCTRL_RXFIFOWM
//    <name> RXFIFOWM </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x40000114) SPI RX FIFO overflow watermark control </i>
//    <edit> 
//      <loc> ( (unsigned char)((SPI_RXFIFOWMCTRL >> 0) & 0x7), ((SPI_RXFIFOWMCTRL = (SPI_RXFIFOWMCTRL & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: SPI_RXFIFOWMCTRL  --------------------------------
// SVD Line: 1512

//  <rtree> SFDITEM_REG__SPI_RXFIFOWMCTRL
//    <name> RXFIFOWMCTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000114) SPI RX FIFO Watermark Control Register </i>
//    <loc> ( (unsigned char)((SPI_RXFIFOWMCTRL >> 0) & 0xFF), ((SPI_RXFIFOWMCTRL = (SPI_RXFIFOWMCTRL & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPI_RXFIFOWMCTRL_RXFIFOWM </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: SPI_RTXINT  -------------------------------
// SVD Line: 1529

unsigned char SPI_RTXINT __AT (0x40000118);



// ----------------------------  Field Item: SPI_RTXINT_RXINTFLAG  --------------------------------
// SVD Line: 1537

//  <item> SFDITEM_FIELD__SPI_RTXINT_RXINTFLAG
//    <name> RXINTFLAG </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000118) \nSPI RX interrupt flag\n0 : OFF = No interrupt\n1 : ON = Interrupt pending </i>
//    <combo> 
//      <loc> ( (unsigned char) SPI_RTXINT ) </loc>
//      <o.0..0> RXINTFLAG
//        <0=> 0: OFF = No interrupt
//        <1=> 1: ON = Interrupt pending
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: SPI_RTXINT_TXINTFLAG  --------------------------------
// SVD Line: 1556

//  <item> SFDITEM_FIELD__SPI_RTXINT_TXINTFLAG
//    <name> TXINTFLAG </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40000118) \nSPI TX interrupt flag\n0 : OFF = No interrupt\n1 : ON = Interrupt pending </i>
//    <combo> 
//      <loc> ( (unsigned char) SPI_RTXINT ) </loc>
//      <o.1..1> TXINTFLAG
//        <0=> 0: OFF = No interrupt
//        <1=> 1: ON = Interrupt pending
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: SPI_RTXINT  -----------------------------------
// SVD Line: 1529

//  <rtree> SFDITEM_REG__SPI_RTXINT
//    <name> RTXINT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000118) SPI RTX INT Flags Register </i>
//    <loc> ( (unsigned char)((SPI_RTXINT >> 0) & 0xFF), ((SPI_RTXINT = (SPI_RTXINT & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPI_RTXINT_RXINTFLAG </item>
//    <item> SFDITEM_FIELD__SPI_RTXINT_TXINTFLAG </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: SPI_FIFORST  -------------------------------
// SVD Line: 1577

unsigned char SPI_FIFORST __AT (0x4000011C);



// ----------------------------  Field Item: SPI_FIFORST_RXFIFORST  -------------------------------
// SVD Line: 1585

//  <item> SFDITEM_FIELD__SPI_FIFORST_RXFIFORST
//    <name> RXFIFORST </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000011C) \nSPI RX FIFO reset\n0 : OFF = Do not reset\n1 : ON = Reset </i>
//    <combo> 
//      <loc> ( (unsigned char) SPI_FIFORST ) </loc>
//      <o.0..0> RXFIFORST
//        <0=> 0: OFF = Do not reset
//        <1=> 1: ON = Reset
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: SPI_FIFORST_TXFIFORST  -------------------------------
// SVD Line: 1604

//  <item> SFDITEM_FIELD__SPI_FIFORST_TXFIFORST
//    <name> TXFIFORST </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000011C) \nSPI TX FIFO reset\n0 : OFF = Do not reset\n1 : ON = Reset </i>
//    <combo> 
//      <loc> ( (unsigned char) SPI_FIFORST ) </loc>
//      <o.1..1> TXFIFORST
//        <0=> 0: OFF = Do not reset
//        <1=> 1: ON = Reset
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: SPI_FIFORST  ----------------------------------
// SVD Line: 1577

//  <rtree> SFDITEM_REG__SPI_FIFORST
//    <name> FIFORST </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4000011C) SPI RTX FIFO Reset Register </i>
//    <loc> ( (unsigned char)((SPI_FIFORST >> 0) & 0xFF), ((SPI_FIFORST = (SPI_FIFORST & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPI_FIFORST_RXFIFORST </item>
//    <item> SFDITEM_FIELD__SPI_FIFORST_TXFIFORST </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: SPI  --------------------------------------
// SVD Line: 1366

//  <view> SPI
//    <name> SPI </name>
//    <item> SFDITEM_REG__SPI_INTENCTRL </item>
//    <item> SFDITEM_REG__SPI_RTXCTRL </item>
//    <item> SFDITEM_REG__SPI_TXFIFO </item>
//    <item> SFDITEM_REG__SPI_RXFIFO </item>
//    <item> SFDITEM_REG__SPI_TXFIFOWMCTRL </item>
//    <item> SFDITEM_REG__SPI_RXFIFOWMCTRL </item>
//    <item> SFDITEM_REG__SPI_RTXINT </item>
//    <item> SFDITEM_REG__SPI_FIFORST </item>
//  </view>
//  


// ----------------------------  Register Item Address: TIM32_CTRL  -------------------------------
// SVD Line: 1646

unsigned char TIM32_CTRL __AT (0x40000404);



// -----------------------------  Field Item: TIM32_CTRL_TIM32EN  ---------------------------------
// SVD Line: 1654

//  <item> SFDITEM_FIELD__TIM32_CTRL_TIM32EN
//    <name> TIM32EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000404) \nTIM32 enable control\n0 : OFF = Disabled\n1 : ON = Enabled </i>
//    <combo> 
//      <loc> ( (unsigned char) TIM32_CTRL ) </loc>
//      <o.0..0> TIM32EN
//        <0=> 0: OFF = Disabled
//        <1=> 1: ON = Enabled
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: TIM32_CTRL_TIM32INTEN  -------------------------------
// SVD Line: 1673

//  <item> SFDITEM_FIELD__TIM32_CTRL_TIM32INTEN
//    <name> TIM32INTEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40000404) \nTIM32 interrupt enable control\n0 : OFF = Disabled\n1 : ON = Enabled </i>
//    <combo> 
//      <loc> ( (unsigned char) TIM32_CTRL ) </loc>
//      <o.1..1> TIM32INTEN
//        <0=> 0: OFF = Disabled
//        <1=> 1: ON = Enabled
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: TIM32_CTRL_TIM32DIV  --------------------------------
// SVD Line: 1692

//  <item> SFDITEM_FIELD__TIM32_CTRL_TIM32DIV
//    <name> TIM32DIV </name>
//    <rw> 
//    <i> [Bits 3..2] RW (@ 0x40000404) \nTIM32 clock divider\n0 : 1 = /1\n1 : 2 = /2\n2 : Reserved - do not use\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned char) TIM32_CTRL ) </loc>
//      <o.3..2> TIM32DIV
//        <0=> 0: 1 = /1
//        <1=> 1: 2 = /2
//        <2=> 2: 
//        <3=> 3: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: TIM32_CTRL_TIM32INTFLAG  ------------------------------
// SVD Line: 1721

//  <item> SFDITEM_FIELD__TIM32_CTRL_TIM32INTFLAG
//    <name> TIM32INTFLAG </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40000404) \nTIM32 interrupt flag\n0 : NOINT = No interrupt\n1 : INT_PEND = Interrupt pending </i>
//    <combo> 
//      <loc> ( (unsigned char) TIM32_CTRL ) </loc>
//      <o.7..7> TIM32INTFLAG
//        <0=> 0: NOINT = No interrupt
//        <1=> 1: INT_PEND = Interrupt pending
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: TIM32_CTRL  -----------------------------------
// SVD Line: 1646

//  <rtree> SFDITEM_REG__TIM32_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000404) TIM32 Control Register </i>
//    <loc> ( (unsigned char)((TIM32_CTRL >> 0) & 0xFF), ((TIM32_CTRL = (TIM32_CTRL & ~(0x8FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x8F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TIM32_CTRL_TIM32EN </item>
//    <item> SFDITEM_FIELD__TIM32_CTRL_TIM32INTEN </item>
//    <item> SFDITEM_FIELD__TIM32_CTRL_TIM32DIV </item>
//    <item> SFDITEM_FIELD__TIM32_CTRL_TIM32INTFLAG </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: TIM32_CNT  --------------------------------
// SVD Line: 1742

unsigned int TIM32_CNT __AT (0x40000408);



// ------------------------------  Field Item: TIM32_CNT_COUNTER  ---------------------------------
// SVD Line: 1750

//  <item> SFDITEM_FIELD__TIM32_CNT_COUNTER
//    <name> COUNTER </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000408) TIM32 counter value </i>
//    <edit> 
//      <loc> ( (unsigned int)((TIM32_CNT >> 0) & 0xFFFFFFFF), ((TIM32_CNT = (TIM32_CNT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: TIM32_CNT  -----------------------------------
// SVD Line: 1742

//  <rtree> SFDITEM_REG__TIM32_CNT
//    <name> CNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000408) TIM32 Counter Register </i>
//    <loc> ( (unsigned int)((TIM32_CNT >> 0) & 0xFFFFFFFF), ((TIM32_CNT = (TIM32_CNT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TIM32_CNT_COUNTER </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: TIM32_RELOAD  ------------------------------
// SVD Line: 1759

unsigned int TIM32_RELOAD __AT (0x4000040C);



// -----------------------------  Field Item: TIM32_RELOAD_RELOAD  --------------------------------
// SVD Line: 1767

//  <item> SFDITEM_FIELD__TIM32_RELOAD_RELOAD
//    <name> RELOAD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000040C) TIM32 counter reload value </i>
//    <edit> 
//      <loc> ( (unsigned int)((TIM32_RELOAD >> 0) & 0xFFFFFFFF), ((TIM32_RELOAD = (TIM32_RELOAD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: TIM32_RELOAD  ----------------------------------
// SVD Line: 1759

//  <rtree> SFDITEM_REG__TIM32_RELOAD
//    <name> RELOAD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000040C) TIM32 Reload Register </i>
//    <loc> ( (unsigned int)((TIM32_RELOAD >> 0) & 0xFFFFFFFF), ((TIM32_RELOAD = (TIM32_RELOAD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TIM32_RELOAD_RELOAD </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: TIM32  -------------------------------------
// SVD Line: 1629

//  <view> TIM32
//    <name> TIM32 </name>
//    <item> SFDITEM_REG__TIM32_CTRL </item>
//    <item> SFDITEM_REG__TIM32_CNT </item>
//    <item> SFDITEM_REG__TIM32_RELOAD </item>
//  </view>
//  


// ----------------------------  Register Item Address: UART_DATA  --------------------------------
// SVD Line: 1797

unsigned char UART_DATA __AT (0x40000200);



// -------------------------------  Field Item: UART_DATA_DATA  -----------------------------------
// SVD Line: 1805

//  <item> SFDITEM_FIELD__UART_DATA_DATA
//    <name> DATA </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000200) Data to be txed or data rxed </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART_DATA >> 0) & 0xFF), ((UART_DATA = (UART_DATA & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: UART_DATA  -----------------------------------
// SVD Line: 1797

//  <rtree> SFDITEM_REG__UART_DATA
//    <name> DATA </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000200) UART RX/TX Data Register </i>
//    <loc> ( (unsigned char)((UART_DATA >> 0) & 0xFF), ((UART_DATA = (UART_DATA & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART_DATA_DATA </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: UART_STATUS  -------------------------------
// SVD Line: 1814

unsigned char UART_STATUS __AT (0x40000204);



// --------------------------  Field Item: UART_STATUS_RX_OVFL_FLAG  ------------------------------
// SVD Line: 1822

//  <item> SFDITEM_FIELD__UART_STATUS_RX_OVFL_FLAG
//    <name> RX_OVFL_FLAG </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40000204) RX buffer overflow </i>
//    <check> 
//      <loc> ( (unsigned char) UART_STATUS ) </loc>
//      <o.3..3> RX_OVFL_FLAG
//    </check>
//  </item>
//  


// --------------------------  Field Item: UART_STATUS_TX_OVFL_FLAG  ------------------------------
// SVD Line: 1829

//  <item> SFDITEM_FIELD__UART_STATUS_TX_OVFL_FLAG
//    <name> TX_OVFL_FLAG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40000204) TX buffer overflow </i>
//    <check> 
//      <loc> ( (unsigned char) UART_STATUS ) </loc>
//      <o.2..2> TX_OVFL_FLAG
//    </check>
//  </item>
//  


// --------------------------  Field Item: UART_STATUS_RX_FULL_FLAG  ------------------------------
// SVD Line: 1836

//  <item> SFDITEM_FIELD__UART_STATUS_RX_FULL_FLAG
//    <name> RX_FULL_FLAG </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40000204) RX buffer full </i>
//    <check> 
//      <loc> ( (unsigned char) UART_STATUS ) </loc>
//      <o.1..1> RX_FULL_FLAG
//    </check>
//  </item>
//  


// --------------------------  Field Item: UART_STATUS_TX_FULL_FLAG  ------------------------------
// SVD Line: 1843

//  <item> SFDITEM_FIELD__UART_STATUS_TX_FULL_FLAG
//    <name> TX_FULL_FLAG </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40000204) TX buffer full </i>
//    <check> 
//      <loc> ( (unsigned char) UART_STATUS ) </loc>
//      <o.0..0> TX_FULL_FLAG
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: UART_STATUS  ----------------------------------
// SVD Line: 1814

//  <rtree> SFDITEM_REG__UART_STATUS
//    <name> STATUS </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000204) UART Status Register </i>
//    <loc> ( (unsigned char)((UART_STATUS >> 0) & 0xFF), ((UART_STATUS = (UART_STATUS & ~(0xCUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xC) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART_STATUS_RX_OVFL_FLAG </item>
//    <item> SFDITEM_FIELD__UART_STATUS_TX_OVFL_FLAG </item>
//    <item> SFDITEM_FIELD__UART_STATUS_RX_FULL_FLAG </item>
//    <item> SFDITEM_FIELD__UART_STATUS_TX_FULL_FLAG </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART_CTRL  --------------------------------
// SVD Line: 1852

unsigned char UART_CTRL __AT (0x40000208);



// ----------------------------  Field Item: UART_CTRL_RX_OVFL_INT  -------------------------------
// SVD Line: 1860

//  <item> SFDITEM_FIELD__UART_CTRL_RX_OVFL_INT
//    <name> RX_OVFL_INT </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40000208) RX buffer overflow interrupt enable </i>
//    <check> 
//      <loc> ( (unsigned char) UART_CTRL ) </loc>
//      <o.5..5> RX_OVFL_INT
//    </check>
//  </item>
//  


// ----------------------------  Field Item: UART_CTRL_TX_OVFL_INT  -------------------------------
// SVD Line: 1867

//  <item> SFDITEM_FIELD__UART_CTRL_TX_OVFL_INT
//    <name> TX_OVFL_INT </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40000208) TX buffer overflow interrupt enable </i>
//    <check> 
//      <loc> ( (unsigned char) UART_CTRL ) </loc>
//      <o.4..4> TX_OVFL_INT
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART_CTRL_RX_INT  ----------------------------------
// SVD Line: 1874

//  <item> SFDITEM_FIELD__UART_CTRL_RX_INT
//    <name> RX_INT </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40000208) RX interrupt enable </i>
//    <check> 
//      <loc> ( (unsigned char) UART_CTRL ) </loc>
//      <o.3..3> RX_INT
//    </check>
//  </item>
//  


// ------------------------------  Field Item: UART_CTRL_TX_INT  ----------------------------------
// SVD Line: 1881

//  <item> SFDITEM_FIELD__UART_CTRL_TX_INT
//    <name> TX_INT </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40000208) TX interrupt enable </i>
//    <check> 
//      <loc> ( (unsigned char) UART_CTRL ) </loc>
//      <o.2..2> TX_INT
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART_CTRL_RX_EN  ----------------------------------
// SVD Line: 1888

//  <item> SFDITEM_FIELD__UART_CTRL_RX_EN
//    <name> RX_EN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40000208) RX enable </i>
//    <check> 
//      <loc> ( (unsigned char) UART_CTRL ) </loc>
//      <o.1..1> RX_EN
//    </check>
//  </item>
//  


// -------------------------------  Field Item: UART_CTRL_TX_EN  ----------------------------------
// SVD Line: 1895

//  <item> SFDITEM_FIELD__UART_CTRL_TX_EN
//    <name> TX_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000208) TX enable </i>
//    <check> 
//      <loc> ( (unsigned char) UART_CTRL ) </loc>
//      <o.0..0> TX_EN
//    </check>
//  </item>
//  


// --------------------------------  Register RTree: UART_CTRL  -----------------------------------
// SVD Line: 1852

//  <rtree> SFDITEM_REG__UART_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000208) UART Control Register </i>
//    <loc> ( (unsigned char)((UART_CTRL >> 0) & 0xFF), ((UART_CTRL = (UART_CTRL & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART_CTRL_RX_OVFL_INT </item>
//    <item> SFDITEM_FIELD__UART_CTRL_TX_OVFL_INT </item>
//    <item> SFDITEM_FIELD__UART_CTRL_RX_INT </item>
//    <item> SFDITEM_FIELD__UART_CTRL_TX_INT </item>
//    <item> SFDITEM_FIELD__UART_CTRL_RX_EN </item>
//    <item> SFDITEM_FIELD__UART_CTRL_TX_EN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: UART_INTFLAG  ------------------------------
// SVD Line: 1904

unsigned char UART_INTFLAG __AT (0x4000020C);



// ------------------------  Field Item: UART_INTFLAG_RX_OVFL_INT_FLAG  ---------------------------
// SVD Line: 1912

//  <item> SFDITEM_FIELD__UART_INTFLAG_RX_OVFL_INT_FLAG
//    <name> RX_OVFL_INT_FLAG </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4000020C) RX buffer overflow interrupt flag </i>
//    <check> 
//      <loc> ( (unsigned char) UART_INTFLAG ) </loc>
//      <o.3..3> RX_OVFL_INT_FLAG
//    </check>
//  </item>
//  


// ------------------------  Field Item: UART_INTFLAG_TX_OVFL_INT_FLAG  ---------------------------
// SVD Line: 1919

//  <item> SFDITEM_FIELD__UART_INTFLAG_TX_OVFL_INT_FLAG
//    <name> TX_OVFL_INT_FLAG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4000020C) TX buffer overflow interrupt flag </i>
//    <check> 
//      <loc> ( (unsigned char) UART_INTFLAG ) </loc>
//      <o.2..2> TX_OVFL_INT_FLAG
//    </check>
//  </item>
//  


// --------------------------  Field Item: UART_INTFLAG_RX_INT_FLAG  ------------------------------
// SVD Line: 1926

//  <item> SFDITEM_FIELD__UART_INTFLAG_RX_INT_FLAG
//    <name> RX_INT_FLAG </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000020C) RX interrupt flag </i>
//    <check> 
//      <loc> ( (unsigned char) UART_INTFLAG ) </loc>
//      <o.1..1> RX_INT_FLAG
//    </check>
//  </item>
//  


// --------------------------  Field Item: UART_INTFLAG_TX_INT_FLAG  ------------------------------
// SVD Line: 1933

//  <item> SFDITEM_FIELD__UART_INTFLAG_TX_INT_FLAG
//    <name> TX_INT_FLAG </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000020C) TX interrupt flag </i>
//    <check> 
//      <loc> ( (unsigned char) UART_INTFLAG ) </loc>
//      <o.0..0> TX_INT_FLAG
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: UART_INTFLAG  ----------------------------------
// SVD Line: 1904

//  <rtree> SFDITEM_REG__UART_INTFLAG
//    <name> INTFLAG </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4000020C) UART Interrupt Flag Register </i>
//    <loc> ( (unsigned char)((UART_INTFLAG >> 0) & 0xFF), ((UART_INTFLAG = (UART_INTFLAG & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART_INTFLAG_RX_OVFL_INT_FLAG </item>
//    <item> SFDITEM_FIELD__UART_INTFLAG_TX_OVFL_INT_FLAG </item>
//    <item> SFDITEM_FIELD__UART_INTFLAG_RX_INT_FLAG </item>
//    <item> SFDITEM_FIELD__UART_INTFLAG_TX_INT_FLAG </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART_BAUDM  -------------------------------
// SVD Line: 1942

unsigned char UART_BAUDM __AT (0x40000210);



// -------------------------------  Field Item: UART_BAUDM_MSB  -----------------------------------
// SVD Line: 1950

//  <item> SFDITEM_FIELD__UART_BAUDM_MSB
//    <name> MSB </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000210) Baudrate control MSB </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART_BAUDM >> 0) & 0xFF), ((UART_BAUDM = (UART_BAUDM & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: UART_BAUDM  -----------------------------------
// SVD Line: 1942

//  <rtree> SFDITEM_REG__UART_BAUDM
//    <name> BAUDM </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000210) UART Baudrate MSB Register </i>
//    <loc> ( (unsigned char)((UART_BAUDM >> 0) & 0xFF), ((UART_BAUDM = (UART_BAUDM & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART_BAUDM_MSB </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART_BAUDL  -------------------------------
// SVD Line: 1960

unsigned char UART_BAUDL __AT (0x40000214);



// -------------------------------  Field Item: UART_BAUDL_LSB  -----------------------------------
// SVD Line: 1968

//  <item> SFDITEM_FIELD__UART_BAUDL_LSB
//    <name> LSB </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000214) Baudrate control LSB </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART_BAUDL >> 0) & 0xFF), ((UART_BAUDL = (UART_BAUDL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: UART_BAUDL  -----------------------------------
// SVD Line: 1960

//  <rtree> SFDITEM_REG__UART_BAUDL
//    <name> BAUDL </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000214) UART Baudrate LSB Register </i>
//    <loc> ( (unsigned char)((UART_BAUDL >> 0) & 0xFF), ((UART_BAUDL = (UART_BAUDL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART_BAUDL_LSB </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: UART_BAUDF  -------------------------------
// SVD Line: 1978

unsigned char UART_BAUDF __AT (0x40000218);



// -------------------------------  Field Item: UART_BAUDF_FRC  -----------------------------------
// SVD Line: 1986

//  <item> SFDITEM_FIELD__UART_BAUDF_FRC
//    <name> FRC </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000218) Baudrate control Fraction </i>
//    <edit> 
//      <loc> ( (unsigned char)((UART_BAUDF >> 0) & 0xFF), ((UART_BAUDF = (UART_BAUDF & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: UART_BAUDF  -----------------------------------
// SVD Line: 1978

//  <rtree> SFDITEM_REG__UART_BAUDF
//    <name> BAUDF </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000218) UART Baudrate Fraction Register </i>
//    <loc> ( (unsigned char)((UART_BAUDF >> 0) & 0xFF), ((UART_BAUDF = (UART_BAUDF & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART_BAUDF_FRC </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: UART  -------------------------------------
// SVD Line: 1780

//  <view> UART
//    <name> UART </name>
//    <item> SFDITEM_REG__UART_DATA </item>
//    <item> SFDITEM_REG__UART_STATUS </item>
//    <item> SFDITEM_REG__UART_CTRL </item>
//    <item> SFDITEM_REG__UART_INTFLAG </item>
//    <item> SFDITEM_REG__UART_BAUDM </item>
//    <item> SFDITEM_REG__UART_BAUDL </item>
//    <item> SFDITEM_REG__UART_BAUDF </item>
//  </view>
//  


// ---------------------------  Register Item Address: GPIO_GPFUNC0  ------------------------------
// SVD Line: 2012

unsigned short GPIO_GPFUNC0 __AT (0x40000500);



// ------------------------------  Field Item: GPIO_GPFUNC0_FUNC  ---------------------------------
// SVD Line: 2020

//  <item> SFDITEM_FIELD__GPIO_GPFUNC0_FUNC
//    <name> FUNC </name>
//    <rw> 
//    <i> [Bits 12..0] RW (@ 0x40000500) Function control </i>
//    <edit> 
//      <loc> ( (unsigned short)((GPIO_GPFUNC0 >> 0) & 0x1FFF), ((GPIO_GPFUNC0 = (GPIO_GPFUNC0 & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_GPFUNC0  ----------------------------------
// SVD Line: 2012

//  <rtree> SFDITEM_REG__GPIO_GPFUNC0
//    <name> GPFUNC0 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40000500) GPIO Function Control Register 0 </i>
//    <loc> ( (unsigned short)((GPIO_GPFUNC0 >> 0) & 0xFFFF), ((GPIO_GPFUNC0 = (GPIO_GPFUNC0 & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GPFUNC0_FUNC </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: GPIO_GPFUNC1  ------------------------------
// SVD Line: 2030

unsigned short GPIO_GPFUNC1 __AT (0x40000504);



// ------------------------------  Field Item: GPIO_GPFUNC1_FUNC  ---------------------------------
// SVD Line: 2038

//  <item> SFDITEM_FIELD__GPIO_GPFUNC1_FUNC
//    <name> FUNC </name>
//    <rw> 
//    <i> [Bits 12..0] RW (@ 0x40000504) Function control </i>
//    <edit> 
//      <loc> ( (unsigned short)((GPIO_GPFUNC1 >> 0) & 0x1FFF), ((GPIO_GPFUNC1 = (GPIO_GPFUNC1 & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: GPIO_GPFUNC1  ----------------------------------
// SVD Line: 2030

//  <rtree> SFDITEM_REG__GPIO_GPFUNC1
//    <name> GPFUNC1 </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40000504) GPIO Function Control Register 1 </i>
//    <loc> ( (unsigned short)((GPIO_GPFUNC1 >> 0) & 0xFFFF), ((GPIO_GPFUNC1 = (GPIO_GPFUNC1 & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GPFUNC1_FUNC </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_GPOUT  -------------------------------
// SVD Line: 2048

unsigned short GPIO_GPOUT __AT (0x40000508);



// -------------------------------  Field Item: GPIO_GPOUT_OUT  -----------------------------------
// SVD Line: 2056

//  <item> SFDITEM_FIELD__GPIO_GPOUT_OUT
//    <name> OUT </name>
//    <rw> 
//    <i> [Bits 12..0] RW (@ 0x40000508) Output Value </i>
//    <edit> 
//      <loc> ( (unsigned short)((GPIO_GPOUT >> 0) & 0x1FFF), ((GPIO_GPOUT = (GPIO_GPOUT & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: GPIO_GPOUT  -----------------------------------
// SVD Line: 2048

//  <rtree> SFDITEM_REG__GPIO_GPOUT
//    <name> GPOUT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40000508) GPIO Output Value Register </i>
//    <loc> ( (unsigned short)((GPIO_GPOUT >> 0) & 0xFFFF), ((GPIO_GPOUT = (GPIO_GPOUT & ~(0x1FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x1FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GPOUT_OUT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: GPIO_GPIN  --------------------------------
// SVD Line: 2066

unsigned short GPIO_GPIN __AT (0x4000050C);



// --------------------------------  Field Item: GPIO_GPIN_IN  ------------------------------------
// SVD Line: 2074

//  <item> SFDITEM_FIELD__GPIO_GPIN_IN
//    <name> IN </name>
//    <r> 
//    <i> [Bits 12..0] RO (@ 0x4000050C) Input Value </i>
//    <edit> 
//      <loc> ( (unsigned short)((GPIO_GPIN >> 0) & 0x1FFF) ) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: GPIO_GPIN  -----------------------------------
// SVD Line: 2066

//  <rtree> SFDITEM_REG__GPIO_GPIN
//    <name> GPIN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4000050C) GPIO Input Value Register </i>
//    <loc> ( (unsigned short)((GPIO_GPIN >> 0) & 0xFFFF) ) </loc>
//    <item> SFDITEM_FIELD__GPIO_GPIN_IN </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: GPIO  -------------------------------------
// SVD Line: 2000

//  <view> GPIO
//    <name> GPIO </name>
//    <item> SFDITEM_REG__GPIO_GPFUNC0 </item>
//    <item> SFDITEM_REG__GPIO_GPFUNC1 </item>
//    <item> SFDITEM_REG__GPIO_GPOUT </item>
//    <item> SFDITEM_REG__GPIO_GPIN </item>
//  </view>
//  


// --------------------------  Register Item Address: FLASH_FLASHKEY  -----------------------------
// SVD Line: 2100

unsigned int FLASH_FLASHKEY __AT (0x40000600);



// -----------------------------  Field Item: FLASH_FLASHKEY_KEY  ---------------------------------
// SVD Line: 2108

//  <item> SFDITEM_FIELD__FLASH_FLASHKEY_KEY
//    <name> KEY </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000600) The lock key </i>
//    <edit> 
//      <loc> ( (unsigned int)((FLASH_FLASHKEY >> 0) & 0xFFFFFFFF), ((FLASH_FLASHKEY = (FLASH_FLASHKEY & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: FLASH_FLASHKEY  ---------------------------------
// SVD Line: 2100

//  <rtree> SFDITEM_REG__FLASH_FLASHKEY
//    <name> FLASHKEY </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000600) FLASH Lock KEY Register </i>
//    <loc> ( (unsigned int)((FLASH_FLASHKEY >> 0) & 0xFFFFFFFF), ((FLASH_FLASHKEY = (FLASH_FLASHKEY & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__FLASH_FLASHKEY_KEY </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: FLASH  -------------------------------------
// SVD Line: 2088

//  <view> FLASH
//    <name> FLASH </name>
//    <item> SFDITEM_REG__FLASH_FLASHKEY </item>
//  </view>
//  


// ------------------------------------------------------------------------------------------------
// -----                              Interrupt Number Definition                             -----
// ------------------------------------------------------------------------------------------------



// ------------------------  ARM Cortex-M0 Specific Interrupt Numbers  ----------------------------

//  <qitem> Reset_IRQ
//    <name> Reset </name>
//    <i> Reset Vector, invoked on Power up and warm reset </i>
//    <loc> 1 </loc>
//  </qitem>
//  
//  <qitem> NonMaskableInt_IRQ
//    <name> NonMaskableInt </name>
//    <i> Non maskable Interrupt, cannot be stopped or preempted </i>
//    <loc> 2 </loc>
//  </qitem>
//  
//  <qitem> HardFault_IRQ
//    <name> HardFault </name>
//    <i> Hard Fault, all classes of Fault </i>
//    <loc> 3 </loc>
//  </qitem>
//  
//  <qitem> SVCall_IRQ
//    <name> SVCall </name>
//    <i> System Service Call via SVC instruction </i>
//    <loc> 11 </loc>
//  </qitem>
//  
//  <qitem> PendSV_IRQ
//    <name> PendSV </name>
//    <i> Pendable request for system service </i>
//    <loc> 14 </loc>
//  </qitem>
//  
//  <qitem> SysTick_IRQ
//    <name> SysTick </name>
//    <i> System Tick Timer </i>
//    <loc> 15 </loc>
//  </qitem>
//  


// ---------------------------  TN2115s1 Specific Interrupt Numbers  ------------------------------

//  <qitem> UART_IRQ
//    <name> UART </name>
//    <i> UART </i>
//    <loc> 16 </loc>
//  </qitem>
//  
//  <qitem> SPI_IRQ
//    <name> SPI </name>
//    <i> SPI </i>
//    <loc> 17 </loc>
//  </qitem>
//  
//  <qitem> I2C_IRQ
//    <name> I2C </name>
//    <i> I2C </i>
//    <loc> 18 </loc>
//  </qitem>
//  
//  <qitem> NFCTX_IRQ
//    <name> NFCTX </name>
//    <i> NFCTX </i>
//    <loc> 19 </loc>
//  </qitem>
//  
//  <qitem> NFCRX_IRQ
//    <name> NFCRX </name>
//    <i> NFCRX </i>
//    <loc> 20 </loc>
//  </qitem>
//  
//  <qitem> NFCFIELD_IRQ
//    <name> NFCFIELD </name>
//    <i> NFCFIELD </i>
//    <loc> 21 </loc>
//  </qitem>
//  
//  <qitem> TIM32_IRQ
//    <name> TIM32 </name>
//    <i> TIM32 </i>
//    <loc> 22 </loc>
//  </qitem>
//  
//  <qitem> CAP_OK_IRQ
//    <name> CAP_OK </name>
//    <i> CAP_OK </i>
//    <loc> 24 </loc>
//  </qitem>
//  
//  <irqtable> TN2115s1_IRQTable
//    <name> TN2115s1 Interrupt Table </name>
//    <nvicPrioBits> 2 </nvicPrioBits>
//    <qitem> Reset_IRQ </qitem>
//    <qitem> NonMaskableInt_IRQ </qitem>
//    <qitem> HardFault_IRQ </qitem>
//    <qitem> SVCall_IRQ </qitem>
//    <qitem> PendSV_IRQ </qitem>
//    <qitem> SysTick_IRQ </qitem>
//    <qitem> UART_IRQ </qitem>
//    <qitem> SPI_IRQ </qitem>
//    <qitem> I2C_IRQ </qitem>
//    <qitem> NFCTX_IRQ </qitem>
//    <qitem> NFCRX_IRQ </qitem>
//    <qitem> NFCFIELD_IRQ </qitem>
//    <qitem> TIM32_IRQ </qitem>
//    <qitem> CAP_OK_IRQ </qitem>
//  </irqtable>


// -------------------------------  Peripheral Menu: 'TN2115s1'  ----------------------------------



// ------------------------------------------------------------------------------------------------
// -----                                       Main Menu                                      -----
// ------------------------------------------------------------------------------------------------

//  <b> FLASH
//    <m> FLASH </m>
//  </b>
//  
//  <b> GPIO
//    <m> GPIO </m>
//  </b>
//  
//  <b> I
//    <m> I2C </m>
//  </b>
//  
//  <b> NFC
//    <m> NFC </m>
//  </b>
//  
//  <b> SPI
//    <m> SPI </m>
//  </b>
//  
//  <b> TIM
//    <m> TIM32 </m>
//  </b>
//  
//  <b> UART
//    <m> UART </m>
//  </b>
//  
//  <b> WDT
//    <m> WDT </m>
//  </b>
//  
