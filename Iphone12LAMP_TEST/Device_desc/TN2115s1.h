/*
 * ARM Limited (ARM) is supplying this software for use with Cortex-M
 * processor based microcontroller, but can be equally used for other
 * suitable processor architectures. This file can be freely distributed.
 * Modifications to this file shall be clearly marked.
 * 
 * THIS SOFTWARE IS PROVIDED "AS IS". NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * @file     TN2115s1.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     20. August 2019
 * @note     Generated by SVDConv V3.2.66 on Tuesday, 20.08.2019 11:11:19
 *           from File 'TN2115s1.svd',
 *           last modified on Tuesday, 20.08.2019 15:10:23
 */



/** @addtogroup Fusens Micro Ltd.
  * @{
  */


/** @addtogroup TN2115s1
  * @{
  */


#ifndef TN2115S1_H
#define TN2115S1_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M0 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ==========================================  TN2115s1 Specific Interrupt Numbers  ========================================== */
  UART_IRQn                 =   0,              /*!< 0  UART                                                                   */
  SPI_IRQn                  =   1,              /*!< 1  SPI                                                                    */
  I2C_IRQn                  =   2,              /*!< 2  I2C                                                                    */
  NFCTX_IRQn                =   3,              /*!< 3  NFCTX                                                                  */
  NFCRX_IRQn                =   4,              /*!< 4  NFCRX                                                                  */
  NFCFIELD_IRQn             =   5,              /*!< 5  NFCFIELD                                                               */
  TIM32_IRQn                =   6,              /*!< 6  TIM32                                                                  */
  CAP_OK_IRQn               =   8               /*!< 8  CAP_OK                                                                 */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M0 Processor and Core Peripherals  =========================== */
#define __CM0_REV                 0x0000U       /*!< CM0 Core Revision                                                         */
#define __NVIC_PRIO_BITS               2        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm0.h"                           /*!< ARM Cortex-M0 processor and core peripherals                              */
#include "system_TN2115s1.h"                    /*!< TN2115s1 System                                                           */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Watchdog Timer (WDT)
  */

typedef struct {                                /*!< (@ 0x40000400) WDT Structure                                              */
  __IOM uint32_t  CSR;                          /*!< (@ 0x00000000) Watchdog Control and Status Register                       */
} WDT_Type;                                     /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                            NFC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief NFC System Control (NFC)
  */

typedef struct {                                /*!< (@ 0x40000300) NFC Structure                                              */
  
  union {
    __IOM uint8_t SYSCTRL;                      /*!< (@ 0x00000000) NFC Subsystem Control Register                             */
    
    struct {
      __IM  uint8_t             : 5;
      __OM  uint8_t PASSTHRUTRG : 1;            /*!< [5..5] Type 4 mode pass-through trigger                                   */
    } SYSCTRL_b;
  } ;
  __IM  uint8_t   RESERVED[3];
  
  union {
    __IOM uint8_t HARVCTRL;                     /*!< (@ 0x00000004) NFC Energy Harvesting Control Register                     */
    
    struct {
      __IOM uint8_t CAPCHTHH    : 3;            /*!< [2..0] Harv2 capacitor switching voltage Hi threshold selection           */
      __IOM uint8_t CAPCHTHL    : 3;            /*!< [5..3] Harv2 capacitor switching voltage Lo threshold selection           */
      __IOM uint8_t CAPFORCECH  : 1;            /*!< [6..6] Harv2 capacitor force charging                                     */
    } HARVCTRL_b;
  } ;
  __IM  uint8_t   RESERVED1[3];
  
  union {
    __IOM uint8_t OPCTRL;                       /*!< (@ 0x00000008) NFC Operation Control Register                             */
    
    struct {
      __IOM uint8_t OPERMODE    : 2;            /*!< [1..0] NFC Tag interface operation mode                                   */
    } OPCTRL_b;
  } ;
  __IM  uint8_t   RESERVED2[3];
  
  union {
    __IOM uint8_t POWER;                        /*!< (@ 0x0000000C) System Power and Regulator Control Register                */
    
    struct {
      __IOM uint8_t LDO18OPT    : 2;            /*!< [1..0] 1.8V LDO output voltage control                                    */
      __IOM uint8_t LDO33OPT    : 2;            /*!< [3..2] 3.3V LDO output voltage control                                    */
      __IOM uint8_t BGOPT       : 3;            /*!< [6..4] Bandgap output voltage control                                     */
      __IOM uint8_t AVDD18      : 1;            /*!< [7..7] AVDD18 rise control                                                */
    } POWER_b;
  } ;
  __IM  uint8_t   RESERVED3[3];
  
  union {
    __IOM uint8_t BROWNOUT3V3;                  /*!< (@ 0x00000010) Brownout Control Register                                  */
    
    struct {
      __IM  uint8_t             : 5;
      __IOM uint8_t BROLVL      : 2;            /*!< [6..5] Brownout Voltage Level                                             */
      __IOM uint8_t BROEN       : 1;            /*!< [7..7] Brownout Enable                                                    */
    } BROWNOUT3V3_b;
  } ;
  __IM  uint8_t   RESERVED4[3];
  
  union {
    __IOM uint8_t RXCTRL;                       /*!< (@ 0x00000014) NFC RX Control Register                                    */
    
    struct {
      __IOM uint8_t RXGAIN      : 1;            /*!< [0..0] RX GAIN x2                                                         */
      __IM  uint8_t             : 1;
      __IOM uint8_t RXWAKEUPTH  : 3;            /*!< [4..2] RX wakeup threshold control                                        */
    } RXCTRL_b;
  } ;
  __IM  uint8_t   RESERVED5[3];
  
  union {
    __IOM uint8_t TXCTRL;                       /*!< (@ 0x00000018) NFC TX Control Register                                    */
    
    struct {
      __IOM uint8_t TXPOLARITY  : 1;            /*!< [0..0] TX modulation polarity                                             */
      __IOM uint8_t TXAMP       : 3;            /*!< [3..1] TX load modulation strength                                        */
    } TXCTRL_b;
  } ;
  __IM  uint8_t   RESERVED6[3];
  
  union {
    __IOM uint8_t CAPCURCTRL;                   /*!< (@ 0x0000001C) Capacitor Switch Current Control Register                  */
    
    struct {
      __IM  uint8_t             : 5;
      __IOM uint8_t CAPCUR      : 2;            /*!< [6..5] Capacitor charge current                                           */
      __IOM uint8_t SOFTCUR     : 1;            /*!< [7..7] Enable switch soft start                                           */
    } CAPCURCTRL_b;
  } ;
  __IM  uint8_t   RESERVED7[3];
  
  union {
    __IOM uint8_t OSC;                          /*!< (@ 0x00000020) OSC Trimming Register                                      */
    
    struct {
      __IOM uint8_t OSCTRIM     : 8;            /*!< [7..0] OSC trim value                                                     */
    } OSC_b;
  } ;
  __IM  uint8_t   RESERVED8[3];
  
  union {
    __IOM uint8_t NFCRTX;                       /*!< (@ 0x00000024) NFC RTX Register                                           */
    
    struct {
      __IOM uint8_t FIELDINT    : 1;            /*!< [0..0] NFC field change interrupt                                         */
      __IOM uint8_t EXT_INTR    : 1;            /*!< [1..1] GPIO Interrupt Flags                                               */
      __IOM uint8_t CAP_OK_INTR : 1;            /*!< [2..2] Capacitor OK Interrupt Flags                                       */
      __IOM uint8_t CAPEN       : 1;            /*!< [3..3] Enable automatic capacitor charging                                */
      __IM  uint8_t TXENDINT    : 1;            /*!< [4..4] NFC TX end interrupt                                               */
      __IM  uint8_t RXENDINT    : 1;            /*!< [5..5] NFC RX end interrupt                                               */
      __IOM uint8_t TXSTART     : 1;            /*!< [6..6] NFC Start TX                                                       */
      __IOM uint8_t CLKRCVSTART : 1;            /*!< [7..7] NFC start clock recovery                                           */
    } NFCRTX_b;
  } ;
  __IM  uint8_t   RESERVED9[3];
  
  union {
    __IOM uint8_t STATUS;                       /*!< (@ 0x00000028) NFC Status Display Register                                */
    
    struct {
      __IOM uint8_t RAMUD       : 1;            /*!< [0..0] RAM Memory update indication                                       */
      __IOM uint8_t EEPUD       : 1;            /*!< [1..1] EEPROM update indication                                           */
      __IM  uint8_t CAPCHOK     : 1;            /*!< [2..2] Harv2 capacitor charging status                                    */
      __IM  uint8_t             : 1;
      __IM  uint8_t ECED        : 1;            /*!< [4..4] EEPROM ECED status                                                 */
      __IOM uint8_t BUSY        : 1;            /*!< [5..5] EEPROM busy                                                        */
      __IM  uint8_t RFFIELD     : 1;            /*!< [6..6] NFC field presence                                                 */
      __IM  uint8_t RFON        : 1;            /*!< [7..7] NFC interface on/off                                               */
    } STATUS_b;
  } ;
  __IM  uint8_t   RESERVED10[3];
  
  union {
    __IOM uint8_t CLKCALIBVAL;                  /*!< (@ 0x0000002C) Clock Calibration Result Register                          */
    
    struct {
      __IOM uint8_t HALFDUR     : 8;            /*!< [7..0] Calibration Result                                                 */
    } CLKCALIBVAL_b;
  } ;
  __IM  uint8_t   RESERVED11[3];
  
  union {
    __IOM uint8_t MODULECTRL;                   /*!< (@ 0x00000030) Module Enable Register                                     */
    
    struct {
      __IM  uint8_t             : 5;
      __IOM uint8_t UARTEN      : 1;            /*!< [5..5] UART Enable                                                        */
      __IOM uint8_t SPIEN       : 1;            /*!< [6..6] SPI Enable                                                         */
      __IOM uint8_t CLKCALIBEN  : 1;            /*!< [7..7] Clock Calibration Enable                                           */
    } MODULECTRL_b;
  } ;
  __IM  uint8_t   RESERVED12[3];
  
  union {
    __IOM uint8_t RXGLITCH;                     /*!< (@ 0x00000034) RX De-glitch Control Register                              */
    
    struct {
      __IOM uint8_t GLITCH      : 2;            /*!< [1..0] Glitch Filter                                                      */
    } RXGLITCH_b;
  } ;
} NFC_Type;                                     /*!< Size = 53 (0x35)                                                          */



/* =========================================================================================================================== */
/* ================                                            I2C                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C interface (I2C)
  */

typedef struct {                                /*!< (@ 0x40000000) I2C Structure                                              */
  
  union {
    __IOM uint8_t ADDR0;                        /*!< (@ 0x00000000) I2C Slave Address 0 Register                               */
    
    struct {
      __IOM uint8_t GCen        : 1;            /*!< [0..0] General call enable                                                */
      __IOM uint8_t ADDR0       : 7;            /*!< [7..1] Address 0                                                          */
    } ADDR0_b;
  } ;
  __IM  uint8_t   RESERVED[3];
  
  union {
    __IOM uint8_t ADDR1;                        /*!< (@ 0x00000004) I2C Slave Address 1 Register                               */
    
    struct {
      __IOM uint8_t GCen        : 1;            /*!< [0..0] General call enable                                                */
      __IOM uint8_t ADDR1       : 7;            /*!< [7..1] Address 0                                                          */
    } ADDR1_b;
  } ;
  __IM  uint8_t   RESERVED1[7];
  
  union {
    __IOM uint8_t DATA;                         /*!< (@ 0x0000000C) I2C RTX Data Register                                      */
    
    struct {
      __IOM uint8_t DATA        : 8;            /*!< [7..0] Data to receive or transmit                                        */
    } DATA_b;
  } ;
  __IM  uint8_t   RESERVED2[3];
  
  union {
    __IOM uint8_t CTRL;                         /*!< (@ 0x00000010) I2C CTRL Register                                          */
    
    struct {
      __IM  uint8_t             : 2;
      __IOM uint8_t AAK         : 1;            /*!< [2..2] Acknowlegement control                                             */
      __IOM uint8_t IFLG        : 1;            /*!< [3..3] Interrupt flag                                                     */
      __IM  uint8_t             : 2;
      __IOM uint8_t ENAB        : 1;            /*!< [6..6] I2C Enable                                                         */
      __IOM uint8_t IEN         : 1;            /*!< [7..7] Interrupt enable                                                   */
    } CTRL_b;
  } ;
  __IM  uint8_t   RESERVED3[7];
  
  union {
    __IOM uint8_t STATUS;                       /*!< (@ 0x00000018) I2C Status Register                                        */
    
    struct {
      __IM  uint8_t STAT        : 8;            /*!< [7..0] Status display                                                     */
    } STATUS_b;
  } ;
  __IM  uint8_t   RESERVED4[3];
  
  union {
    __IOM uint8_t RESET;                        /*!< (@ 0x0000001C) I2C Reset Register                                         */
    
    struct {
      __IOM uint8_t SRST        : 8;            /*!< [7..0] Write any value to reset                                           */
    } RESET_b;
  } ;
} I2C_Type;                                     /*!< Size = 29 (0x1d)                                                          */



/* =========================================================================================================================== */
/* ================                                            SPI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI interface (SPI)
  */

typedef struct {                                /*!< (@ 0x40000100) SPI Structure                                              */
  
  union {
    __IOM uint8_t INTENCTRL;                    /*!< (@ 0x00000000) SPI Interrupt Control Register                             */
    
    struct {
      __IOM uint8_t RXINTEN     : 1;            /*!< [0..0] SPI RX overflow interrupt control                                  */
      __IOM uint8_t TXINTEN     : 1;            /*!< [1..1] SPI TX underflow interrupt control                                 */
    } INTENCTRL_b;
  } ;
  __IM  uint8_t   RESERVED[3];
  
  union {
    __IOM uint8_t RTXCTRL;                      /*!< (@ 0x00000004) SPI RTX Control Register                                   */
    
    struct {
      __IOM uint8_t RXEN        : 1;            /*!< [0..0] SPI RX control                                                     */
      __IOM uint8_t TXEN        : 1;            /*!< [1..1] SPI TX control                                                     */
    } RTXCTRL_b;
  } ;
  __IM  uint8_t   RESERVED1[3];
  __IOM uint8_t   TXFIFO;                       /*!< (@ 0x00000008) SPI TX FIFO Register                                       */
  __IM  uint8_t   RESERVED2[3];
  __IOM uint8_t   RXFIFO;                       /*!< (@ 0x0000000C) SPI TX FIFO Register                                       */
  __IM  uint8_t   RESERVED3[3];
  
  union {
    __IOM uint8_t TXFIFOWMCTRL;                 /*!< (@ 0x00000010) SPI TX FIFO Watermark Control Register                     */
    
    struct {
      __IOM uint8_t TXFIFOWM    : 3;            /*!< [2..0] SPI TX FIFO underflow watermark control                            */
    } TXFIFOWMCTRL_b;
  } ;
  __IM  uint8_t   RESERVED4[3];
  
  union {
    __IOM uint8_t RXFIFOWMCTRL;                 /*!< (@ 0x00000014) SPI RX FIFO Watermark Control Register                     */
    
    struct {
      __IOM uint8_t RXFIFOWM    : 3;            /*!< [2..0] SPI RX FIFO overflow watermark control                             */
    } RXFIFOWMCTRL_b;
  } ;
  __IM  uint8_t   RESERVED5[3];
  
  union {
    __IOM uint8_t RTXINT;                       /*!< (@ 0x00000018) SPI RTX INT Flags Register                                 */
    
    struct {
      __IOM uint8_t RXINTFLAG   : 1;            /*!< [0..0] SPI RX interrupt flag                                              */
      __IOM uint8_t TXINTFLAG   : 1;            /*!< [1..1] SPI TX interrupt flag                                              */
    } RTXINT_b;
  } ;
  __IM  uint8_t   RESERVED6[3];
  
  union {
    __IOM uint8_t FIFORST;                      /*!< (@ 0x0000001C) SPI RTX FIFO Reset Register                                */
    
    struct {
      __IOM uint8_t RXFIFORST   : 1;            /*!< [0..0] SPI RX FIFO reset                                                  */
      __IOM uint8_t TXFIFORST   : 1;            /*!< [1..1] SPI TX FIFO reset                                                  */
    } FIFORST_b;
  } ;
} SPI_Type;                                     /*!< Size = 29 (0x1d)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM32                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General Purpose 32bit Timer (TIM32)
  */

typedef struct {                                /*!< (@ 0x40000404) TIM32 Structure                                            */
  
  union {
    __IOM uint8_t CTRL;                         /*!< (@ 0x00000000) TIM32 Control Register                                     */
    
    struct {
      __IOM uint8_t TIM32EN     : 1;            /*!< [0..0] TIM32 enable control                                               */
      __IOM uint8_t TIM32INTEN  : 1;            /*!< [1..1] TIM32 interrupt enable control                                     */
      __IOM uint8_t TIM32DIV    : 2;            /*!< [3..2] TIM32 clock divider                                                */
      __IM  uint8_t             : 3;
      __IOM uint8_t TIM32INTFLAG : 1;           /*!< [7..7] TIM32 interrupt flag                                               */
    } CTRL_b;
  } ;
  __IM  uint8_t   RESERVED[3];
  
  union {
    __IOM uint32_t CNT;                         /*!< (@ 0x00000004) TIM32 Counter Register                                     */
    
    struct {
      __IOM uint32_t COUNTER    : 32;           /*!< [31..0] TIM32 counter value                                               */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t RELOAD;                      /*!< (@ 0x00000008) TIM32 Reload Register                                      */
    
    struct {
      __IOM uint32_t RELOAD     : 32;           /*!< [31..0] TIM32 counter reload value                                        */
    } RELOAD_b;
  } ;
} TIM32_Type;                                   /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           UART                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief UART interface (UART)
  */

typedef struct {                                /*!< (@ 0x40000200) UART Structure                                             */
  
  union {
    __IOM uint8_t DATA;                         /*!< (@ 0x00000000) UART RX/TX Data Register                                   */
    
    struct {
      __IOM uint8_t DATA        : 8;            /*!< [7..0] Data to be txed or data rxed                                       */
    } DATA_b;
  } ;
  __IM  uint8_t   RESERVED[3];
  
  union {
    __IOM uint8_t STATUS;                       /*!< (@ 0x00000004) UART Status Register                                       */
    
    struct {
      __IM  uint8_t TX_FULL_FLAG : 1;           /*!< [0..0] TX buffer full                                                     */
      __IM  uint8_t RX_FULL_FLAG : 1;           /*!< [1..1] RX buffer full                                                     */
      __IOM uint8_t TX_OVFL_FLAG : 1;           /*!< [2..2] TX buffer overflow                                                 */
      __IOM uint8_t RX_OVFL_FLAG : 1;           /*!< [3..3] RX buffer overflow                                                 */
    } STATUS_b;
  } ;
  __IM  uint8_t   RESERVED1[3];
  
  union {
    __IOM uint8_t CTRL;                         /*!< (@ 0x00000008) UART Control Register                                      */
    
    struct {
      __IOM uint8_t TX_EN       : 1;            /*!< [0..0] TX enable                                                          */
      __IOM uint8_t RX_EN       : 1;            /*!< [1..1] RX enable                                                          */
      __IOM uint8_t TX_INT      : 1;            /*!< [2..2] TX interrupt enable                                                */
      __IOM uint8_t RX_INT      : 1;            /*!< [3..3] RX interrupt enable                                                */
      __IOM uint8_t TX_OVFL_INT : 1;            /*!< [4..4] TX buffer overflow interrupt enable                                */
      __IOM uint8_t RX_OVFL_INT : 1;            /*!< [5..5] RX buffer overflow interrupt enable                                */
    } CTRL_b;
  } ;
  __IM  uint8_t   RESERVED2[3];
  
  union {
    __IOM uint8_t INTFLAG;                      /*!< (@ 0x0000000C) UART Interrupt Flag Register                               */
    
    struct {
      __IOM uint8_t TX_INT_FLAG : 1;            /*!< [0..0] TX interrupt flag                                                  */
      __IOM uint8_t RX_INT_FLAG : 1;            /*!< [1..1] RX interrupt flag                                                  */
      __IOM uint8_t TX_OVFL_INT_FLAG : 1;       /*!< [2..2] TX buffer overflow interrupt flag                                  */
      __IOM uint8_t RX_OVFL_INT_FLAG : 1;       /*!< [3..3] RX buffer overflow interrupt flag                                  */
    } INTFLAG_b;
  } ;
  __IM  uint8_t   RESERVED3[3];
  
  union {
    __IOM uint8_t BAUDM;                        /*!< (@ 0x00000010) UART Baudrate MSB Register                                 */
    
    struct {
      __IOM uint8_t MSB         : 8;            /*!< [7..0] Baudrate control MSB                                               */
    } BAUDM_b;
  } ;
  __IM  uint8_t   RESERVED4[3];
  
  union {
    __IOM uint8_t BAUDL;                        /*!< (@ 0x00000014) UART Baudrate LSB Register                                 */
    
    struct {
      __IOM uint8_t LSB         : 8;            /*!< [7..0] Baudrate control LSB                                               */
    } BAUDL_b;
  } ;
  __IM  uint8_t   RESERVED5[3];
  
  union {
    __IOM uint8_t BAUDF;                        /*!< (@ 0x00000018) UART Baudrate Fraction Register                            */
    
    struct {
      __IOM uint8_t FRC         : 8;            /*!< [7..0] Baudrate control Fraction                                          */
    } BAUDF_b;
  } ;
} UART_Type;                                    /*!< Size = 25 (0x19)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO (GPIO)
  */

typedef struct {                                /*!< (@ 0x40000500) GPIO Structure                                             */
  
  union {
    __IOM uint16_t GPFUNC0;                     /*!< (@ 0x00000000) GPIO Function Control Register 0                           */
    
    struct {
      __IOM uint16_t FUNC       : 13;           /*!< [12..0] Function control                                                  */
    } GPFUNC0_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t GPFUNC1;                     /*!< (@ 0x00000004) GPIO Function Control Register 1                           */
    
    struct {
      __IOM uint16_t FUNC       : 13;           /*!< [12..0] Function control                                                  */
    } GPFUNC1_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t GPOUT;                       /*!< (@ 0x00000008) GPIO Output Value Register                                 */
    
    struct {
      __IOM uint16_t OUT        : 13;           /*!< [12..0] Output Value                                                      */
    } GPOUT_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t GPIN;                        /*!< (@ 0x0000000C) GPIO Input Value Register                                  */
    
    struct {
      __IM  uint16_t IN         : 13;           /*!< [12..0] Input Value                                                       */
    } GPIN_b;
  } ;
} GPIO_Type;                                    /*!< Size = 14 (0xe)                                                           */



/* =========================================================================================================================== */
/* ================                                           FLASH                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief FLASH (FLASH)
  */

typedef struct {                                /*!< (@ 0x40000600) FLASH Structure                                            */
  
  union {
    __IOM uint32_t FLASHKEY;                    /*!< (@ 0x00000000) FLASH Lock KEY Register                                    */
    
    struct {
      __IOM uint32_t KEY        : 32;           /*!< [31..0] The lock key                                                      */
    } FLASHKEY_b;
  } ;
} FLASH_Type;                                   /*!< Size = 4 (0x4)                                                            */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define WDT_BASE                    0x40000400UL
#define NFC_BASE                    0x40000300UL
#define I2C_BASE                    0x40000000UL
#define SPI_BASE                    0x40000100UL
#define TIM32_BASE                  0x40000404UL
#define UART_BASE                   0x40000200UL
#define GPIO_BASE                   0x40000500UL
#define FLASH_BASE                  0x40000600UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define WDT                         ((WDT_Type*)               WDT_BASE)
#define NFC                         ((NFC_Type*)               NFC_BASE)
#define I2C                         ((I2C_Type*)               I2C_BASE)
#define SPI                         ((SPI_Type*)               SPI_BASE)
#define TIM32                       ((TIM32_Type*)             TIM32_BASE)
#define UART                        ((UART_Type*)              UART_BASE)
#define GPIO                        ((GPIO_Type*)              GPIO_BASE)
#define FLASH                       ((FLASH_Type*)             FLASH_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CSR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            NFC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  SYSCTRL  ======================================================== */
#define NFC_SYSCTRL_PASSTHRUTRG_Pos       (5UL)                     /*!< NFC SYSCTRL: PASSTHRUTRG (Bit 5)                      */
#define NFC_SYSCTRL_PASSTHRUTRG_Msk       (0x20UL)                  /*!< NFC SYSCTRL: PASSTHRUTRG (Bitfield-Mask: 0x01)        */
/* =======================================================  HARVCTRL  ======================================================== */
#define NFC_HARVCTRL_CAPCHTHH_Pos         (0UL)                     /*!< NFC HARVCTRL: CAPCHTHH (Bit 0)                        */
#define NFC_HARVCTRL_CAPCHTHH_Msk         (0x7UL)                   /*!< NFC HARVCTRL: CAPCHTHH (Bitfield-Mask: 0x07)          */
#define NFC_HARVCTRL_CAPCHTHL_Pos         (3UL)                     /*!< NFC HARVCTRL: CAPCHTHL (Bit 3)                        */
#define NFC_HARVCTRL_CAPCHTHL_Msk         (0x38UL)                  /*!< NFC HARVCTRL: CAPCHTHL (Bitfield-Mask: 0x07)          */
#define NFC_HARVCTRL_CAPFORCECH_Pos       (6UL)                     /*!< NFC HARVCTRL: CAPFORCECH (Bit 6)                      */
#define NFC_HARVCTRL_CAPFORCECH_Msk       (0x40UL)                  /*!< NFC HARVCTRL: CAPFORCECH (Bitfield-Mask: 0x01)        */
/* ========================================================  OPCTRL  ========================================================= */
#define NFC_OPCTRL_OPERMODE_Pos           (0UL)                     /*!< NFC OPCTRL: OPERMODE (Bit 0)                          */
#define NFC_OPCTRL_OPERMODE_Msk           (0x3UL)                   /*!< NFC OPCTRL: OPERMODE (Bitfield-Mask: 0x03)            */
/* =========================================================  POWER  ========================================================= */
#define NFC_POWER_LDO18OPT_Pos            (0UL)                     /*!< NFC POWER: LDO18OPT (Bit 0)                           */
#define NFC_POWER_LDO18OPT_Msk            (0x3UL)                   /*!< NFC POWER: LDO18OPT (Bitfield-Mask: 0x03)             */
#define NFC_POWER_LDO33OPT_Pos            (2UL)                     /*!< NFC POWER: LDO33OPT (Bit 2)                           */
#define NFC_POWER_LDO33OPT_Msk            (0xcUL)                   /*!< NFC POWER: LDO33OPT (Bitfield-Mask: 0x03)             */
#define NFC_POWER_BGOPT_Pos               (4UL)                     /*!< NFC POWER: BGOPT (Bit 4)                              */
#define NFC_POWER_BGOPT_Msk               (0x70UL)                  /*!< NFC POWER: BGOPT (Bitfield-Mask: 0x07)                */
#define NFC_POWER_AVDD18_Pos              (7UL)                     /*!< NFC POWER: AVDD18 (Bit 7)                             */
#define NFC_POWER_AVDD18_Msk              (0x80UL)                  /*!< NFC POWER: AVDD18 (Bitfield-Mask: 0x01)               */
/* ======================================================  BROWNOUT3V3  ====================================================== */
#define NFC_BROWNOUT3V3_BROEN_Pos         (7UL)                     /*!< NFC BROWNOUT3V3: BROEN (Bit 7)                        */
#define NFC_BROWNOUT3V3_BROEN_Msk         (0x80UL)                  /*!< NFC BROWNOUT3V3: BROEN (Bitfield-Mask: 0x01)          */
#define NFC_BROWNOUT3V3_BROLVL_Pos        (5UL)                     /*!< NFC BROWNOUT3V3: BROLVL (Bit 5)                       */
#define NFC_BROWNOUT3V3_BROLVL_Msk        (0x60UL)                  /*!< NFC BROWNOUT3V3: BROLVL (Bitfield-Mask: 0x03)         */
/* ========================================================  RXCTRL  ========================================================= */
#define NFC_RXCTRL_RXGAIN_Pos             (0UL)                     /*!< NFC RXCTRL: RXGAIN (Bit 0)                            */
#define NFC_RXCTRL_RXGAIN_Msk             (0x1UL)                   /*!< NFC RXCTRL: RXGAIN (Bitfield-Mask: 0x01)              */
#define NFC_RXCTRL_RXWAKEUPTH_Pos         (2UL)                     /*!< NFC RXCTRL: RXWAKEUPTH (Bit 2)                        */
#define NFC_RXCTRL_RXWAKEUPTH_Msk         (0x1cUL)                  /*!< NFC RXCTRL: RXWAKEUPTH (Bitfield-Mask: 0x07)          */
/* ========================================================  TXCTRL  ========================================================= */
#define NFC_TXCTRL_TXPOLARITY_Pos         (0UL)                     /*!< NFC TXCTRL: TXPOLARITY (Bit 0)                        */
#define NFC_TXCTRL_TXPOLARITY_Msk         (0x1UL)                   /*!< NFC TXCTRL: TXPOLARITY (Bitfield-Mask: 0x01)          */
#define NFC_TXCTRL_TXAMP_Pos              (1UL)                     /*!< NFC TXCTRL: TXAMP (Bit 1)                             */
#define NFC_TXCTRL_TXAMP_Msk              (0xeUL)                   /*!< NFC TXCTRL: TXAMP (Bitfield-Mask: 0x07)               */
/* ======================================================  CAPCURCTRL  ======================================================= */
#define NFC_CAPCURCTRL_SOFTCUR_Pos        (7UL)                     /*!< NFC CAPCURCTRL: SOFTCUR (Bit 7)                       */
#define NFC_CAPCURCTRL_SOFTCUR_Msk        (0x80UL)                  /*!< NFC CAPCURCTRL: SOFTCUR (Bitfield-Mask: 0x01)         */
#define NFC_CAPCURCTRL_CAPCUR_Pos         (5UL)                     /*!< NFC CAPCURCTRL: CAPCUR (Bit 5)                        */
#define NFC_CAPCURCTRL_CAPCUR_Msk         (0x60UL)                  /*!< NFC CAPCURCTRL: CAPCUR (Bitfield-Mask: 0x03)          */
/* ==========================================================  OSC  ========================================================== */
#define NFC_OSC_OSCTRIM_Pos               (0UL)                     /*!< NFC OSC: OSCTRIM (Bit 0)                              */
#define NFC_OSC_OSCTRIM_Msk               (0xffUL)                  /*!< NFC OSC: OSCTRIM (Bitfield-Mask: 0xff)                */
/* ========================================================  NFCRTX  ========================================================= */
#define NFC_NFCRTX_FIELDINT_Pos           (0UL)                     /*!< NFC NFCRTX: FIELDINT (Bit 0)                          */
#define NFC_NFCRTX_FIELDINT_Msk           (0x1UL)                   /*!< NFC NFCRTX: FIELDINT (Bitfield-Mask: 0x01)            */
#define NFC_NFCRTX_EXT_INTR_Pos           (1UL)                     /*!< NFC NFCRTX: EXT_INTR (Bit 1)                          */
#define NFC_NFCRTX_EXT_INTR_Msk           (0x2UL)                   /*!< NFC NFCRTX: EXT_INTR (Bitfield-Mask: 0x01)            */
#define NFC_NFCRTX_CAP_OK_INTR_Pos        (2UL)                     /*!< NFC NFCRTX: CAP_OK_INTR (Bit 2)                       */
#define NFC_NFCRTX_CAP_OK_INTR_Msk        (0x4UL)                   /*!< NFC NFCRTX: CAP_OK_INTR (Bitfield-Mask: 0x01)         */
#define NFC_NFCRTX_CAPEN_Pos              (3UL)                     /*!< NFC NFCRTX: CAPEN (Bit 3)                             */
#define NFC_NFCRTX_CAPEN_Msk              (0x8UL)                   /*!< NFC NFCRTX: CAPEN (Bitfield-Mask: 0x01)               */
#define NFC_NFCRTX_TXENDINT_Pos           (4UL)                     /*!< NFC NFCRTX: TXENDINT (Bit 4)                          */
#define NFC_NFCRTX_TXENDINT_Msk           (0x10UL)                  /*!< NFC NFCRTX: TXENDINT (Bitfield-Mask: 0x01)            */
#define NFC_NFCRTX_RXENDINT_Pos           (5UL)                     /*!< NFC NFCRTX: RXENDINT (Bit 5)                          */
#define NFC_NFCRTX_RXENDINT_Msk           (0x20UL)                  /*!< NFC NFCRTX: RXENDINT (Bitfield-Mask: 0x01)            */
#define NFC_NFCRTX_TXSTART_Pos            (6UL)                     /*!< NFC NFCRTX: TXSTART (Bit 6)                           */
#define NFC_NFCRTX_TXSTART_Msk            (0x40UL)                  /*!< NFC NFCRTX: TXSTART (Bitfield-Mask: 0x01)             */
#define NFC_NFCRTX_CLKRCVSTART_Pos        (7UL)                     /*!< NFC NFCRTX: CLKRCVSTART (Bit 7)                       */
#define NFC_NFCRTX_CLKRCVSTART_Msk        (0x80UL)                  /*!< NFC NFCRTX: CLKRCVSTART (Bitfield-Mask: 0x01)         */
/* ======================================================  CLKCALIBVAL  ====================================================== */
#define NFC_CLKCALIBVAL_HALFDUR_Pos       (0UL)                     /*!< NFC CLKCALIBVAL: HALFDUR (Bit 0)                      */
#define NFC_CLKCALIBVAL_HALFDUR_Msk       (0xffUL)                  /*!< NFC CLKCALIBVAL: HALFDUR (Bitfield-Mask: 0xff)        */
/* ======================================================  MODULECTRL  ======================================================= */
#define NFC_MODULECTRL_UARTEN_Pos         (5UL)                     /*!< NFC MODULECTRL: UARTEN (Bit 5)                        */
#define NFC_MODULECTRL_UARTEN_Msk         (0x20UL)                  /*!< NFC MODULECTRL: UARTEN (Bitfield-Mask: 0x01)          */
#define NFC_MODULECTRL_SPIEN_Pos          (6UL)                     /*!< NFC MODULECTRL: SPIEN (Bit 6)                         */
#define NFC_MODULECTRL_SPIEN_Msk          (0x40UL)                  /*!< NFC MODULECTRL: SPIEN (Bitfield-Mask: 0x01)           */
#define NFC_MODULECTRL_CLKCALIBEN_Pos     (7UL)                     /*!< NFC MODULECTRL: CLKCALIBEN (Bit 7)                    */
#define NFC_MODULECTRL_CLKCALIBEN_Msk     (0x80UL)                  /*!< NFC MODULECTRL: CLKCALIBEN (Bitfield-Mask: 0x01)      */
/* =======================================================  RXGLITCH  ======================================================== */
#define NFC_RXGLITCH_GLITCH_Pos           (0UL)                     /*!< NFC RXGLITCH: GLITCH (Bit 0)                          */
#define NFC_RXGLITCH_GLITCH_Msk           (0x3UL)                   /*!< NFC RXGLITCH: GLITCH (Bitfield-Mask: 0x03)            */
/* ========================================================  STATUS  ========================================================= */
#define NFC_STATUS_RAMUD_Pos              (0UL)                     /*!< NFC STATUS: RAMUD (Bit 0)                             */
#define NFC_STATUS_RAMUD_Msk              (0x1UL)                   /*!< NFC STATUS: RAMUD (Bitfield-Mask: 0x01)               */
#define NFC_STATUS_EEPUD_Pos              (1UL)                     /*!< NFC STATUS: EEPUD (Bit 1)                             */
#define NFC_STATUS_EEPUD_Msk              (0x2UL)                   /*!< NFC STATUS: EEPUD (Bitfield-Mask: 0x01)               */
#define NFC_STATUS_CAPCHOK_Pos            (2UL)                     /*!< NFC STATUS: CAPCHOK (Bit 2)                           */
#define NFC_STATUS_CAPCHOK_Msk            (0x4UL)                   /*!< NFC STATUS: CAPCHOK (Bitfield-Mask: 0x01)             */
#define NFC_STATUS_ECED_Pos               (4UL)                     /*!< NFC STATUS: ECED (Bit 4)                              */
#define NFC_STATUS_ECED_Msk               (0x10UL)                  /*!< NFC STATUS: ECED (Bitfield-Mask: 0x01)                */
#define NFC_STATUS_BUSY_Pos               (5UL)                     /*!< NFC STATUS: BUSY (Bit 5)                              */
#define NFC_STATUS_BUSY_Msk               (0x20UL)                  /*!< NFC STATUS: BUSY (Bitfield-Mask: 0x01)                */
#define NFC_STATUS_RFFIELD_Pos            (6UL)                     /*!< NFC STATUS: RFFIELD (Bit 6)                           */
#define NFC_STATUS_RFFIELD_Msk            (0x40UL)                  /*!< NFC STATUS: RFFIELD (Bitfield-Mask: 0x01)             */
#define NFC_STATUS_RFON_Pos               (7UL)                     /*!< NFC STATUS: RFON (Bit 7)                              */
#define NFC_STATUS_RFON_Msk               (0x80UL)                  /*!< NFC STATUS: RFON (Bitfield-Mask: 0x01)                */


/* =========================================================================================================================== */
/* ================                                            I2C                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  ADDR0  ========================================================= */
#define I2C_ADDR0_GCen_Pos                (0UL)                     /*!< I2C ADDR0: GCen (Bit 0)                               */
#define I2C_ADDR0_GCen_Msk                (0x1UL)                   /*!< I2C ADDR0: GCen (Bitfield-Mask: 0x01)                 */
#define I2C_ADDR0_ADDR0_Pos               (1UL)                     /*!< I2C ADDR0: ADDR0 (Bit 1)                              */
#define I2C_ADDR0_ADDR0_Msk               (0xfeUL)                  /*!< I2C ADDR0: ADDR0 (Bitfield-Mask: 0x7f)                */
/* =========================================================  ADDR1  ========================================================= */
#define I2C_ADDR1_GCen_Pos                (0UL)                     /*!< I2C ADDR1: GCen (Bit 0)                               */
#define I2C_ADDR1_GCen_Msk                (0x1UL)                   /*!< I2C ADDR1: GCen (Bitfield-Mask: 0x01)                 */
#define I2C_ADDR1_ADDR1_Pos               (1UL)                     /*!< I2C ADDR1: ADDR1 (Bit 1)                              */
#define I2C_ADDR1_ADDR1_Msk               (0xfeUL)                  /*!< I2C ADDR1: ADDR1 (Bitfield-Mask: 0x7f)                */
/* =========================================================  DATA  ========================================================== */
#define I2C_DATA_DATA_Pos                 (0UL)                     /*!< I2C DATA: DATA (Bit 0)                                */
#define I2C_DATA_DATA_Msk                 (0xffUL)                  /*!< I2C DATA: DATA (Bitfield-Mask: 0xff)                  */
/* =========================================================  CTRL  ========================================================== */
#define I2C_CTRL_AAK_Pos                  (2UL)                     /*!< I2C CTRL: AAK (Bit 2)                                 */
#define I2C_CTRL_AAK_Msk                  (0x4UL)                   /*!< I2C CTRL: AAK (Bitfield-Mask: 0x01)                   */
#define I2C_CTRL_IFLG_Pos                 (3UL)                     /*!< I2C CTRL: IFLG (Bit 3)                                */
#define I2C_CTRL_IFLG_Msk                 (0x8UL)                   /*!< I2C CTRL: IFLG (Bitfield-Mask: 0x01)                  */
#define I2C_CTRL_ENAB_Pos                 (6UL)                     /*!< I2C CTRL: ENAB (Bit 6)                                */
#define I2C_CTRL_ENAB_Msk                 (0x40UL)                  /*!< I2C CTRL: ENAB (Bitfield-Mask: 0x01)                  */
#define I2C_CTRL_IEN_Pos                  (7UL)                     /*!< I2C CTRL: IEN (Bit 7)                                 */
#define I2C_CTRL_IEN_Msk                  (0x80UL)                  /*!< I2C CTRL: IEN (Bitfield-Mask: 0x01)                   */
/* ========================================================  STATUS  ========================================================= */
#define I2C_STATUS_STAT_Pos               (0UL)                     /*!< I2C STATUS: STAT (Bit 0)                              */
#define I2C_STATUS_STAT_Msk               (0xffUL)                  /*!< I2C STATUS: STAT (Bitfield-Mask: 0xff)                */
/* =========================================================  RESET  ========================================================= */
#define I2C_RESET_SRST_Pos                (0UL)                     /*!< I2C RESET: SRST (Bit 0)                               */
#define I2C_RESET_SRST_Msk                (0xffUL)                  /*!< I2C RESET: SRST (Bitfield-Mask: 0xff)                 */


/* =========================================================================================================================== */
/* ================                                            SPI                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  INTENCTRL  ======================================================= */
#define SPI_INTENCTRL_RXINTEN_Pos         (0UL)                     /*!< SPI INTENCTRL: RXINTEN (Bit 0)                        */
#define SPI_INTENCTRL_RXINTEN_Msk         (0x1UL)                   /*!< SPI INTENCTRL: RXINTEN (Bitfield-Mask: 0x01)          */
#define SPI_INTENCTRL_TXINTEN_Pos         (1UL)                     /*!< SPI INTENCTRL: TXINTEN (Bit 1)                        */
#define SPI_INTENCTRL_TXINTEN_Msk         (0x2UL)                   /*!< SPI INTENCTRL: TXINTEN (Bitfield-Mask: 0x01)          */
/* ========================================================  RTXCTRL  ======================================================== */
#define SPI_RTXCTRL_RXEN_Pos              (0UL)                     /*!< SPI RTXCTRL: RXEN (Bit 0)                             */
#define SPI_RTXCTRL_RXEN_Msk              (0x1UL)                   /*!< SPI RTXCTRL: RXEN (Bitfield-Mask: 0x01)               */
#define SPI_RTXCTRL_TXEN_Pos              (1UL)                     /*!< SPI RTXCTRL: TXEN (Bit 1)                             */
#define SPI_RTXCTRL_TXEN_Msk              (0x2UL)                   /*!< SPI RTXCTRL: TXEN (Bitfield-Mask: 0x01)               */
/* ========================================================  TXFIFO  ========================================================= */
/* ========================================================  RXFIFO  ========================================================= */
/* =====================================================  TXFIFOWMCTRL  ====================================================== */
#define SPI_TXFIFOWMCTRL_TXFIFOWM_Pos     (0UL)                     /*!< SPI TXFIFOWMCTRL: TXFIFOWM (Bit 0)                    */
#define SPI_TXFIFOWMCTRL_TXFIFOWM_Msk     (0x7UL)                   /*!< SPI TXFIFOWMCTRL: TXFIFOWM (Bitfield-Mask: 0x07)      */
/* =====================================================  RXFIFOWMCTRL  ====================================================== */
#define SPI_RXFIFOWMCTRL_RXFIFOWM_Pos     (0UL)                     /*!< SPI RXFIFOWMCTRL: RXFIFOWM (Bit 0)                    */
#define SPI_RXFIFOWMCTRL_RXFIFOWM_Msk     (0x7UL)                   /*!< SPI RXFIFOWMCTRL: RXFIFOWM (Bitfield-Mask: 0x07)      */
/* ========================================================  RTXINT  ========================================================= */
#define SPI_RTXINT_RXINTFLAG_Pos          (0UL)                     /*!< SPI RTXINT: RXINTFLAG (Bit 0)                         */
#define SPI_RTXINT_RXINTFLAG_Msk          (0x1UL)                   /*!< SPI RTXINT: RXINTFLAG (Bitfield-Mask: 0x01)           */
#define SPI_RTXINT_TXINTFLAG_Pos          (1UL)                     /*!< SPI RTXINT: TXINTFLAG (Bit 1)                         */
#define SPI_RTXINT_TXINTFLAG_Msk          (0x2UL)                   /*!< SPI RTXINT: TXINTFLAG (Bitfield-Mask: 0x01)           */
/* ========================================================  FIFORST  ======================================================== */
#define SPI_FIFORST_RXFIFORST_Pos         (0UL)                     /*!< SPI FIFORST: RXFIFORST (Bit 0)                        */
#define SPI_FIFORST_RXFIFORST_Msk         (0x1UL)                   /*!< SPI FIFORST: RXFIFORST (Bitfield-Mask: 0x01)          */
#define SPI_FIFORST_TXFIFORST_Pos         (1UL)                     /*!< SPI FIFORST: TXFIFORST (Bit 1)                        */
#define SPI_FIFORST_TXFIFORST_Msk         (0x2UL)                   /*!< SPI FIFORST: TXFIFORST (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                           TIM32                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define TIM32_CTRL_TIM32EN_Pos            (0UL)                     /*!< TIM32 CTRL: TIM32EN (Bit 0)                           */
#define TIM32_CTRL_TIM32EN_Msk            (0x1UL)                   /*!< TIM32 CTRL: TIM32EN (Bitfield-Mask: 0x01)             */
#define TIM32_CTRL_TIM32INTEN_Pos         (1UL)                     /*!< TIM32 CTRL: TIM32INTEN (Bit 1)                        */
#define TIM32_CTRL_TIM32INTEN_Msk         (0x2UL)                   /*!< TIM32 CTRL: TIM32INTEN (Bitfield-Mask: 0x01)          */
#define TIM32_CTRL_TIM32DIV_Pos           (2UL)                     /*!< TIM32 CTRL: TIM32DIV (Bit 2)                          */
#define TIM32_CTRL_TIM32DIV_Msk           (0xcUL)                   /*!< TIM32 CTRL: TIM32DIV (Bitfield-Mask: 0x03)            */
#define TIM32_CTRL_TIM32INTFLAG_Pos       (7UL)                     /*!< TIM32 CTRL: TIM32INTFLAG (Bit 7)                      */
#define TIM32_CTRL_TIM32INTFLAG_Msk       (0x80UL)                  /*!< TIM32 CTRL: TIM32INTFLAG (Bitfield-Mask: 0x01)        */
/* ==========================================================  CNT  ========================================================== */
#define TIM32_CNT_COUNTER_Pos             (0UL)                     /*!< TIM32 CNT: COUNTER (Bit 0)                            */
#define TIM32_CNT_COUNTER_Msk             (0xffffffffUL)            /*!< TIM32 CNT: COUNTER (Bitfield-Mask: 0xffffffff)        */
/* ========================================================  RELOAD  ========================================================= */
#define TIM32_RELOAD_RELOAD_Pos           (0UL)                     /*!< TIM32 RELOAD: RELOAD (Bit 0)                          */
#define TIM32_RELOAD_RELOAD_Msk           (0xffffffffUL)            /*!< TIM32 RELOAD: RELOAD (Bitfield-Mask: 0xffffffff)      */


/* =========================================================================================================================== */
/* ================                                           UART                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  DATA  ========================================================== */
#define UART_DATA_DATA_Pos                (0UL)                     /*!< UART DATA: DATA (Bit 0)                               */
#define UART_DATA_DATA_Msk                (0xffUL)                  /*!< UART DATA: DATA (Bitfield-Mask: 0xff)                 */
/* ========================================================  STATUS  ========================================================= */
#define UART_STATUS_RX_OVFL_FLAG_Pos      (3UL)                     /*!< UART STATUS: RX_OVFL_FLAG (Bit 3)                     */
#define UART_STATUS_RX_OVFL_FLAG_Msk      (0x8UL)                   /*!< UART STATUS: RX_OVFL_FLAG (Bitfield-Mask: 0x01)       */
#define UART_STATUS_TX_OVFL_FLAG_Pos      (2UL)                     /*!< UART STATUS: TX_OVFL_FLAG (Bit 2)                     */
#define UART_STATUS_TX_OVFL_FLAG_Msk      (0x4UL)                   /*!< UART STATUS: TX_OVFL_FLAG (Bitfield-Mask: 0x01)       */
#define UART_STATUS_RX_FULL_FLAG_Pos      (1UL)                     /*!< UART STATUS: RX_FULL_FLAG (Bit 1)                     */
#define UART_STATUS_RX_FULL_FLAG_Msk      (0x2UL)                   /*!< UART STATUS: RX_FULL_FLAG (Bitfield-Mask: 0x01)       */
#define UART_STATUS_TX_FULL_FLAG_Pos      (0UL)                     /*!< UART STATUS: TX_FULL_FLAG (Bit 0)                     */
#define UART_STATUS_TX_FULL_FLAG_Msk      (0x1UL)                   /*!< UART STATUS: TX_FULL_FLAG (Bitfield-Mask: 0x01)       */
/* =========================================================  CTRL  ========================================================== */
#define UART_CTRL_RX_OVFL_INT_Pos         (5UL)                     /*!< UART CTRL: RX_OVFL_INT (Bit 5)                        */
#define UART_CTRL_RX_OVFL_INT_Msk         (0x20UL)                  /*!< UART CTRL: RX_OVFL_INT (Bitfield-Mask: 0x01)          */
#define UART_CTRL_TX_OVFL_INT_Pos         (4UL)                     /*!< UART CTRL: TX_OVFL_INT (Bit 4)                        */
#define UART_CTRL_TX_OVFL_INT_Msk         (0x10UL)                  /*!< UART CTRL: TX_OVFL_INT (Bitfield-Mask: 0x01)          */
#define UART_CTRL_RX_INT_Pos              (3UL)                     /*!< UART CTRL: RX_INT (Bit 3)                             */
#define UART_CTRL_RX_INT_Msk              (0x8UL)                   /*!< UART CTRL: RX_INT (Bitfield-Mask: 0x01)               */
#define UART_CTRL_TX_INT_Pos              (2UL)                     /*!< UART CTRL: TX_INT (Bit 2)                             */
#define UART_CTRL_TX_INT_Msk              (0x4UL)                   /*!< UART CTRL: TX_INT (Bitfield-Mask: 0x01)               */
#define UART_CTRL_RX_EN_Pos               (1UL)                     /*!< UART CTRL: RX_EN (Bit 1)                              */
#define UART_CTRL_RX_EN_Msk               (0x2UL)                   /*!< UART CTRL: RX_EN (Bitfield-Mask: 0x01)                */
#define UART_CTRL_TX_EN_Pos               (0UL)                     /*!< UART CTRL: TX_EN (Bit 0)                              */
#define UART_CTRL_TX_EN_Msk               (0x1UL)                   /*!< UART CTRL: TX_EN (Bitfield-Mask: 0x01)                */
/* ========================================================  INTFLAG  ======================================================== */
#define UART_INTFLAG_RX_OVFL_INT_FLAG_Pos (3UL)                     /*!< UART INTFLAG: RX_OVFL_INT_FLAG (Bit 3)                */
#define UART_INTFLAG_RX_OVFL_INT_FLAG_Msk (0x8UL)                   /*!< UART INTFLAG: RX_OVFL_INT_FLAG (Bitfield-Mask: 0x01)  */
#define UART_INTFLAG_TX_OVFL_INT_FLAG_Pos (2UL)                     /*!< UART INTFLAG: TX_OVFL_INT_FLAG (Bit 2)                */
#define UART_INTFLAG_TX_OVFL_INT_FLAG_Msk (0x4UL)                   /*!< UART INTFLAG: TX_OVFL_INT_FLAG (Bitfield-Mask: 0x01)  */
#define UART_INTFLAG_RX_INT_FLAG_Pos      (1UL)                     /*!< UART INTFLAG: RX_INT_FLAG (Bit 1)                     */
#define UART_INTFLAG_RX_INT_FLAG_Msk      (0x2UL)                   /*!< UART INTFLAG: RX_INT_FLAG (Bitfield-Mask: 0x01)       */
#define UART_INTFLAG_TX_INT_FLAG_Pos      (0UL)                     /*!< UART INTFLAG: TX_INT_FLAG (Bit 0)                     */
#define UART_INTFLAG_TX_INT_FLAG_Msk      (0x1UL)                   /*!< UART INTFLAG: TX_INT_FLAG (Bitfield-Mask: 0x01)       */
/* =========================================================  BAUDM  ========================================================= */
#define UART_BAUDM_MSB_Pos                (0UL)                     /*!< UART BAUDM: MSB (Bit 0)                               */
#define UART_BAUDM_MSB_Msk                (0xffUL)                  /*!< UART BAUDM: MSB (Bitfield-Mask: 0xff)                 */
/* =========================================================  BAUDL  ========================================================= */
#define UART_BAUDL_LSB_Pos                (0UL)                     /*!< UART BAUDL: LSB (Bit 0)                               */
#define UART_BAUDL_LSB_Msk                (0xffUL)                  /*!< UART BAUDL: LSB (Bitfield-Mask: 0xff)                 */
/* =========================================================  BAUDF  ========================================================= */
#define UART_BAUDF_FRC_Pos                (0UL)                     /*!< UART BAUDF: FRC (Bit 0)                               */
#define UART_BAUDF_FRC_Msk                (0xffUL)                  /*!< UART BAUDF: FRC (Bitfield-Mask: 0xff)                 */


/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  GPFUNC0  ======================================================== */
#define GPIO_GPFUNC0_FUNC_Pos             (0UL)                     /*!< GPIO GPFUNC0: FUNC (Bit 0)                            */
#define GPIO_GPFUNC0_FUNC_Msk             (0x1fffUL)                /*!< GPIO GPFUNC0: FUNC (Bitfield-Mask: 0x1fff)            */
/* ========================================================  GPFUNC1  ======================================================== */
#define GPIO_GPFUNC1_FUNC_Pos             (0UL)                     /*!< GPIO GPFUNC1: FUNC (Bit 0)                            */
#define GPIO_GPFUNC1_FUNC_Msk             (0x1fffUL)                /*!< GPIO GPFUNC1: FUNC (Bitfield-Mask: 0x1fff)            */
/* =========================================================  GPOUT  ========================================================= */
#define GPIO_GPOUT_OUT_Pos                (0UL)                     /*!< GPIO GPOUT: OUT (Bit 0)                               */
#define GPIO_GPOUT_OUT_Msk                (0x1fffUL)                /*!< GPIO GPOUT: OUT (Bitfield-Mask: 0x1fff)               */
/* =========================================================  GPIN  ========================================================== */
#define GPIO_GPIN_IN_Pos                  (0UL)                     /*!< GPIO GPIN: IN (Bit 0)                                 */
#define GPIO_GPIN_IN_Msk                  (0x1fffUL)                /*!< GPIO GPIN: IN (Bitfield-Mask: 0x1fff)                 */


/* =========================================================================================================================== */
/* ================                                           FLASH                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  FLASHKEY  ======================================================== */
#define FLASH_FLASHKEY_KEY_Pos            (0UL)                     /*!< FLASH FLASHKEY: KEY (Bit 0)                           */
#define FLASH_FLASHKEY_KEY_Msk            (0xffffffffUL)            /*!< FLASH FLASHKEY: KEY (Bitfield-Mask: 0xffffffff)       */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CSR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            NFC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  SYSCTRL  ======================================================== */
/* =======================================================  HARVCTRL  ======================================================== */
/* =============================================  NFC HARVCTRL CAPCHTHH [0..2]  ============================================== */
typedef enum {                                  /*!< NFC_HARVCTRL_CAPCHTHH                                                     */
  NFC_HARVCTRL_CAPCHTHH_2V7            = 0,     /*!< 2V7 : 2.7V                                                                */
  NFC_HARVCTRL_CAPCHTHH_3V3            = 1,     /*!< 3V3 : 3.3V                                                                */
  NFC_HARVCTRL_CAPCHTHH_3V9            = 2,     /*!< 3V9 : 3.9V                                                                */
  NFC_HARVCTRL_CAPCHTHH_4V5            = 3,     /*!< 4V5 : 4.5V                                                                */
  NFC_HARVCTRL_CAPCHTHH_5V1            = 4,     /*!< 5V1 : 5.1V                                                                */
  NFC_HARVCTRL_CAPCHTHH_6V3            = 5,     /*!< 6V3 : 6.3V                                                                */
  NFC_HARVCTRL_CAPCHTHH_7V5            = 6,     /*!< 7V5 : 7.5V                                                                */
  NFC_HARVCTRL_CAPCHTHH_8V7            = 7,     /*!< 8V7 : 8.7V                                                                */
} NFC_HARVCTRL_CAPCHTHH_Enum;

/* =============================================  NFC HARVCTRL CAPCHTHL [3..5]  ============================================== */
typedef enum {                                  /*!< NFC_HARVCTRL_CAPCHTHL                                                     */
  NFC_HARVCTRL_CAPCHTHL_2V4            = 0,     /*!< 2V4 : 2.4V                                                                */
  NFC_HARVCTRL_CAPCHTHL_3V0            = 1,     /*!< 3V0 : 3.0V                                                                */
  NFC_HARVCTRL_CAPCHTHL_3V6            = 2,     /*!< 3V6 : 3.6V                                                                */
  NFC_HARVCTRL_CAPCHTHL_4V2            = 3,     /*!< 4V2 : 4.2V                                                                */
  NFC_HARVCTRL_CAPCHTHL_4V8            = 4,     /*!< 4V8 : 4.8V                                                                */
  NFC_HARVCTRL_CAPCHTHL_6V0            = 5,     /*!< 6V0 : 6.0V                                                                */
  NFC_HARVCTRL_CAPCHTHL_7V2            = 6,     /*!< 7V2 : 7.2V                                                                */
  NFC_HARVCTRL_CAPCHTHL_OFF            = 7,     /*!< OFF : OFF                                                                 */
} NFC_HARVCTRL_CAPCHTHL_Enum;

/* ============================================  NFC HARVCTRL CAPFORCECH [6..6]  ============================================= */
typedef enum {                                  /*!< NFC_HARVCTRL_CAPFORCECH                                                   */
  NFC_HARVCTRL_CAPFORCECH_OFF          = 0,     /*!< OFF : No force charging                                                   */
  NFC_HARVCTRL_CAPFORCECH_ON           = 1,     /*!< ON : Force charging                                                       */
} NFC_HARVCTRL_CAPFORCECH_Enum;

/* ========================================================  OPCTRL  ========================================================= */
/* ==============================================  NFC OPCTRL OPERMODE [0..1]  =============================================== */
typedef enum {                                  /*!< NFC_OPCTRL_OPERMODE                                                       */
  NFC_OPCTRL_OPERMODE_NORF             = 0,     /*!< NORF : NFC disabled                                                       */
  NFC_OPCTRL_OPERMODE_NOEEP            = 1,     /*!< NOEEP : NFC no EEPROM access                                              */
  NFC_OPCTRL_OPERMODE_EEPRO            = 2,     /*!< EEPRO : NFC EEPROM read-only                                              */
  NFC_OPCTRL_OPERMODE_EEPRW            = 3,     /*!< EEPRW : NFC EEPROM read-write                                             */
} NFC_OPCTRL_OPERMODE_Enum;

/* =========================================================  POWER  ========================================================= */
/* ===============================================  NFC POWER LDO18OPT [0..1]  =============================================== */
typedef enum {                                  /*!< NFC_POWER_LDO18OPT                                                        */
  NFC_POWER_LDO18OPT_1V5               = 0,     /*!< 1V5 : 1.588V                                                              */
  NFC_POWER_LDO18OPT_1V6               = 1,     /*!< 1V6 : 1.6875V                                                             */
  NFC_POWER_LDO18OPT_1V8               = 2,     /*!< 1V8 : 1.8V                                                                */
  NFC_POWER_LDO18OPT_1V9               = 3,     /*!< 1V9 : 1.928V                                                              */
} NFC_POWER_LDO18OPT_Enum;

/* ===============================================  NFC POWER LDO33OPT [2..3]  =============================================== */
typedef enum {                                  /*!< NFC_POWER_LDO33OPT                                                        */
  NFC_POWER_LDO33OPT_2V7               = 0,     /*!< 2V7 : 2.7V                                                                */
  NFC_POWER_LDO33OPT_3V                = 1,     /*!< 3V : 3V                                                                   */
  NFC_POWER_LDO33OPT_3V3               = 2,     /*!< 3V3 : 3.375V                                                              */
  NFC_POWER_LDO33OPT_3V8               = 3,     /*!< 3V8 : 3.857V                                                              */
} NFC_POWER_LDO33OPT_Enum;

/* ================================================  NFC POWER BGOPT [4..6]  ================================================= */
typedef enum {                                  /*!< NFC_POWER_BGOPT                                                           */
  NFC_POWER_BGOPT_750                  = 0,     /*!< 750 : 750mV                                                               */
  NFC_POWER_BGOPT_714                  = 1,     /*!< 714 : 714mV                                                               */
  NFC_POWER_BGOPT_677                  = 2,     /*!< 677 : 677mV                                                               */
  NFC_POWER_BGOPT_640                  = 3,     /*!< 640 : 640mV                                                               */
  NFC_POWER_BGOPT_604                  = 4,     /*!< 604 : 604mV                                                               */
  NFC_POWER_BGOPT_567                  = 5,     /*!< 567 : 567mV                                                               */
  NFC_POWER_BGOPT_531                  = 6,     /*!< 531 : 531mV                                                               */
  NFC_POWER_BGOPT_494                  = 7,     /*!< 494 : 494mV                                                               */
} NFC_POWER_BGOPT_Enum;

/* ================================================  NFC POWER AVDD18 [7..7]  ================================================ */
typedef enum {                                  /*!< NFC_POWER_AVDD18                                                          */
  NFC_POWER_AVDD18_RISE                = 0,     /*!< RISE : Rise up AVDD18 upon powerup                                        */
  NFC_POWER_AVDD18_NORISE              = 1,     /*!< NORISE : Do not rise up AVDD18 upon powerup                               */
} NFC_POWER_AVDD18_Enum;

/* ======================================================  BROWNOUT3V3  ====================================================== */
/* =============================================  NFC BROWNOUT3V3 BROLVL [5..6]  ============================================= */
typedef enum {                                  /*!< NFC_BROWNOUT3V3_BROLVL                                                    */
  NFC_BROWNOUT3V3_BROLVL_2V3           = 0,     /*!< 2V3 : 2.3V                                                                */
  NFC_BROWNOUT3V3_BROLVL_2V5           = 1,     /*!< 2V5 : 2.5V                                                                */
  NFC_BROWNOUT3V3_BROLVL_2V7           = 2,     /*!< 2V7 : 2.7V                                                                */
  NFC_BROWNOUT3V3_BROLVL_2V9           = 3,     /*!< 2V9 : 2.9V                                                                */
} NFC_BROWNOUT3V3_BROLVL_Enum;

/* ========================================================  RXCTRL  ========================================================= */
/* ===============================================  NFC RXCTRL RXGAIN [0..0]  ================================================ */
typedef enum {                                  /*!< NFC_RXCTRL_RXGAIN                                                         */
  NFC_RXCTRL_RXGAIN_X2                 = 1,     /*!< X2 : X2 gain                                                              */
  NFC_RXCTRL_RXGAIN_X1                 = 0,     /*!< X1 : X1 gain                                                              */
} NFC_RXCTRL_RXGAIN_Enum;

/* =============================================  NFC RXCTRL RXWAKEUPTH [2..4]  ============================================== */
typedef enum {                                  /*!< NFC_RXCTRL_RXWAKEUPTH                                                     */
  NFC_RXCTRL_RXWAKEUPTH_25             = 0,     /*!< 25 : 25mV                                                                 */
  NFC_RXCTRL_RXWAKEUPTH_50             = 1,     /*!< 50 : 50mV                                                                 */
  NFC_RXCTRL_RXWAKEUPTH_75             = 2,     /*!< 75 : 75mV                                                                 */
  NFC_RXCTRL_RXWAKEUPTH_100            = 3,     /*!< 100 : 100mV                                                               */
  NFC_RXCTRL_RXWAKEUPTH_125            = 4,     /*!< 125 : 125mV                                                               */
  NFC_RXCTRL_RXWAKEUPTH_150            = 5,     /*!< 150 : 150mV                                                               */
  NFC_RXCTRL_RXWAKEUPTH_175            = 6,     /*!< 175 : 175mV                                                               */
  NFC_RXCTRL_RXWAKEUPTH_200            = 7,     /*!< 200 : 200mV                                                               */
} NFC_RXCTRL_RXWAKEUPTH_Enum;

/* ========================================================  TXCTRL  ========================================================= */
/* =============================================  NFC TXCTRL TXPOLARITY [0..0]  ============================================== */
typedef enum {                                  /*!< NFC_TXCTRL_TXPOLARITY                                                     */
  NFC_TXCTRL_TXPOLARITY_NORMAL         = 0,     /*!< NORMAL : Normal polarity                                                  */
  NFC_TXCTRL_TXPOLARITY_INV            = 1,     /*!< INV : Inverse polarity                                                    */
} NFC_TXCTRL_TXPOLARITY_Enum;

/* ======================================================  CAPCURCTRL  ======================================================= */
/* =============================================  NFC CAPCURCTRL SOFTCUR [7..7]  ============================================= */
typedef enum {                                  /*!< NFC_CAPCURCTRL_SOFTCUR                                                    */
  NFC_CAPCURCTRL_SOFTCUR_ON            = 1,     /*!< ON : Enable                                                               */
  NFC_CAPCURCTRL_SOFTCUR_OFF           = 0,     /*!< OFF : Disable                                                             */
} NFC_CAPCURCTRL_SOFTCUR_Enum;

/* =============================================  NFC CAPCURCTRL CAPCUR [5..6]  ============================================== */
typedef enum {                                  /*!< NFC_CAPCURCTRL_CAPCUR                                                     */
  NFC_CAPCURCTRL_CAPCUR_X1             = 0,     /*!< X1 : Normal current                                                       */
  NFC_CAPCURCTRL_CAPCUR_X05            = 1,     /*!< X05 : Half current                                                        */
  NFC_CAPCURCTRL_CAPCUR_X2             = 2,     /*!< X2 : Double current                                                       */
} NFC_CAPCURCTRL_CAPCUR_Enum;

/* ==========================================================  OSC  ========================================================== */
/* ========================================================  NFCRTX  ========================================================= */
/* ======================================================  CLKCALIBVAL  ====================================================== */
/* ======================================================  MODULECTRL  ======================================================= */
/* =======================================================  RXGLITCH  ======================================================== */
/* ==============================================  NFC RXGLITCH GLITCH [0..1]  =============================================== */
typedef enum {                                  /*!< NFC_RXGLITCH_GLITCH                                                       */
  NFC_RXGLITCH_GLITCH_OFF              = 0,     /*!< OFF : Filter off                                                          */
  NFC_RXGLITCH_GLITCH_2CLKS            = 1,     /*!< 2CLKS : 2 clocks                                                          */
  NFC_RXGLITCH_GLITCH_4CLKS            = 2,     /*!< 4CLKS : 4 clocks                                                          */
  NFC_RXGLITCH_GLITCH_6CLKS            = 3,     /*!< 6CLKS : 6 clocks                                                          */
} NFC_RXGLITCH_GLITCH_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ================================================  NFC STATUS RAMUD [0..0]  ================================================ */
typedef enum {                                  /*!< NFC_STATUS_RAMUD                                                          */
  NFC_STATUS_RAMUD_NOUD                = 0,     /*!< NOUD : No RAM update from NFC                                             */
  NFC_STATUS_RAMUD_UD                  = 1,     /*!< UD : RAM updated from NFC                                                 */
} NFC_STATUS_RAMUD_Enum;

/* ================================================  NFC STATUS EEPUD [1..1]  ================================================ */
typedef enum {                                  /*!< NFC_STATUS_EEPUD                                                          */
  NFC_STATUS_EEPUD_NOUD                = 0,     /*!< NOUD : No EEP update from NFC                                             */
  NFC_STATUS_EEPUD_UD                  = 1,     /*!< UD : EEP updated from NFC                                                 */
} NFC_STATUS_EEPUD_Enum;

/* ===============================================  NFC STATUS CAPCHOK [2..2]  =============================================== */
typedef enum {                                  /*!< NFC_STATUS_CAPCHOK                                                        */
  NFC_STATUS_CAPCHOK_NFULL             = 0,     /*!< NFULL : Capacitor not full                                                */
  NFC_STATUS_CAPCHOK_FULL              = 1,     /*!< FULL : Capacitor full                                                     */
} NFC_STATUS_CAPCHOK_Enum;

/* ================================================  NFC STATUS BUSY [5..5]  ================================================= */
typedef enum {                                  /*!< NFC_STATUS_BUSY                                                           */
  NFC_STATUS_BUSY_NBUSY                = 0,     /*!< NBUSY : EEPROM not busy                                                   */
  NFC_STATUS_BUSY_BUSY                 = 1,     /*!< BUSY : EEPROM busy                                                        */
} NFC_STATUS_BUSY_Enum;

/* ===============================================  NFC STATUS RFFIELD [6..6]  =============================================== */
typedef enum {                                  /*!< NFC_STATUS_RFFIELD                                                        */
  NFC_STATUS_RFFIELD_OFF               = 0,     /*!< OFF : No RF field                                                         */
  NFC_STATUS_RFFIELD_ON                = 1,     /*!< ON : RF field is present                                                  */
} NFC_STATUS_RFFIELD_Enum;

/* ================================================  NFC STATUS RFON [7..7]  ================================================= */
typedef enum {                                  /*!< NFC_STATUS_RFON                                                           */
  NFC_STATUS_RFON_OFF                  = 0,     /*!< OFF : RF off                                                              */
  NFC_STATUS_RFON_ON                   = 1,     /*!< ON : RF on                                                                */
} NFC_STATUS_RFON_Enum;



/* =========================================================================================================================== */
/* ================                                            I2C                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  ADDR0  ========================================================= */
/* =================================================  I2C ADDR0 GCen [0..0]  ================================================= */
typedef enum {                                  /*!< I2C_ADDR0_GCen                                                            */
  I2C_ADDR0_GCen_ON                    = 1,     /*!< ON : General call enabled                                                 */
  I2C_ADDR0_GCen_OFF                   = 0,     /*!< OFF : General call disabled                                               */
} I2C_ADDR0_GCen_Enum;

/* =========================================================  ADDR1  ========================================================= */
/* =================================================  I2C ADDR1 GCen [0..0]  ================================================= */
typedef enum {                                  /*!< I2C_ADDR1_GCen                                                            */
  I2C_ADDR1_GCen_ON                    = 1,     /*!< ON : General call enabled                                                 */
  I2C_ADDR1_GCen_OFF                   = 0,     /*!< OFF : General call disabled                                               */
} I2C_ADDR1_GCen_Enum;

/* =========================================================  DATA  ========================================================== */
/* =========================================================  CTRL  ========================================================== */
/* ==================================================  I2C CTRL AAK [2..2]  ================================================== */
typedef enum {                                  /*!< I2C_CTRL_AAK                                                              */
  I2C_CTRL_AAK_ACK                     = 1,     /*!< ACK : Enable ACK                                                          */
  I2C_CTRL_AAK_NACK                    = 0,     /*!< NACK : Enable NACK                                                        */
} I2C_CTRL_AAK_Enum;

/* =================================================  I2C CTRL IFLG [3..3]  ================================================== */
typedef enum {                                  /*!< I2C_CTRL_IFLG                                                             */
  I2C_CTRL_IFLG_SET                    = 1,     /*!< SET : Interrupt set                                                       */
  I2C_CTRL_IFLG_CLR                    = 0,     /*!< CLR : Interrupt clear                                                     */
} I2C_CTRL_IFLG_Enum;

/* =================================================  I2C CTRL ENAB [6..6]  ================================================== */
typedef enum {                                  /*!< I2C_CTRL_ENAB                                                             */
  I2C_CTRL_ENAB_ON                     = 1,     /*!< ON : Enabled                                                              */
  I2C_CTRL_ENAB_OFF                    = 0,     /*!< OFF : Disabled                                                            */
} I2C_CTRL_ENAB_Enum;

/* ==================================================  I2C CTRL IEN [7..7]  ================================================== */
typedef enum {                                  /*!< I2C_CTRL_IEN                                                              */
  I2C_CTRL_IEN_ON                      = 1,     /*!< ON : Enabled                                                              */
  I2C_CTRL_IEN_OFF                     = 0,     /*!< OFF : Disabled                                                            */
} I2C_CTRL_IEN_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ================================================  I2C STATUS STAT [0..7]  ================================================= */
typedef enum {                                  /*!< I2C_STATUS_STAT                                                           */
  I2C_STATUS_STAT_ERR                  = 0,     /*!< ERR : Bus Error                                                           */
  I2C_STATUS_STAT_M_ST_TX              = 8,     /*!< M_ST_TX : Start Txed                                                      */
  I2C_STATUS_STAT_M_ReST_TX            = 16,    /*!< M_ReST_TX : Restart Txed                                                  */
  I2C_STATUS_STAT_M_ADRWTX_ACK         = 24,    /*!< M_ADRWTX_ACK : Address+W TXed and ACKed                                   */
  I2C_STATUS_STAT_M_ADRWTX             = 32,    /*!< M_ADRWTX : Address+W TXed                                                 */
  I2C_STATUS_STAT_M_TX_ACK             = 40,    /*!< M_TX_ACK : Data Txed and ACKed                                            */
  I2C_STATUS_STAT_M_TX                 = 48,    /*!< M_TX : Data Txed                                                          */
  I2C_STATUS_STAT_M_ADRRTX_ACK         = 64,    /*!< M_ADRRTX_ACK : Address+R TXed and ACKed                                   */
  I2C_STATUS_STAT_M_ADRRTX             = 72,    /*!< M_ADRRTX : Address+R TXed                                                 */
  I2C_STATUS_STAT_M_RX_ACK             = 80,    /*!< M_RX_ACK : Data RXed and ACKed                                            */
  I2C_STATUS_STAT_M_RX_NACK            = 88,    /*!< M_RX_NACK : Data RXed and NACKed                                          */
  I2C_STATUS_STAT_S_ADRW_ACK           = 96,    /*!< S_ADRW_ACK : Address+W RXed and ACKed                                     */
  I2C_STATUS_STAT_S_GC_ACK             = 112,   /*!< S_GC_ACK : General call RXed and ACKed                                    */
  I2C_STATUS_STAT_S_RX_ACK             = 128,   /*!< S_RX_ACK : Data RXed and ACKed                                            */
  I2C_STATUS_STAT_S_RX_NACK            = 136,   /*!< S_RX_NACK : Data RXed and NACKed                                          */
  I2C_STATUS_STAT_S_ReST               = 160,   /*!< S_ReST : Stop or Restart RXed                                             */
  I2C_STATUS_STAT_S_ADRR_ACK           = 168,   /*!< S_ADRR_ACK : Address+R RXed and ACKed                                     */
  I2C_STATUS_STAT_S_TX_ACK             = 184,   /*!< S_TX_ACK : Data TXed and ACKed                                            */
  I2C_STATUS_STAT_S_TX                 = 192,   /*!< S_TX : Data TXed                                                          */
  I2C_STATUS_STAT_S_TX_NACK            = 200,   /*!< S_TX_NACK : Data TXed and NACKed                                          */
} I2C_STATUS_STAT_Enum;

/* =========================================================  RESET  ========================================================= */


/* =========================================================================================================================== */
/* ================                                            SPI                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  INTENCTRL  ======================================================= */
/* =============================================  SPI INTENCTRL RXINTEN [0..0]  ============================================== */
typedef enum {                                  /*!< SPI_INTENCTRL_RXINTEN                                                     */
  SPI_INTENCTRL_RXINTEN_ON             = 1,     /*!< ON : Enabled                                                              */
  SPI_INTENCTRL_RXINTEN_OFF            = 0,     /*!< OFF : Disabled                                                            */
} SPI_INTENCTRL_RXINTEN_Enum;

/* =============================================  SPI INTENCTRL TXINTEN [1..1]  ============================================== */
typedef enum {                                  /*!< SPI_INTENCTRL_TXINTEN                                                     */
  SPI_INTENCTRL_TXINTEN_ON             = 1,     /*!< ON : Enabled                                                              */
  SPI_INTENCTRL_TXINTEN_OFF            = 0,     /*!< OFF : Disabled                                                            */
} SPI_INTENCTRL_TXINTEN_Enum;

/* ========================================================  RTXCTRL  ======================================================== */
/* ================================================  SPI RTXCTRL RXEN [0..0]  ================================================ */
typedef enum {                                  /*!< SPI_RTXCTRL_RXEN                                                          */
  SPI_RTXCTRL_RXEN_ON                  = 1,     /*!< ON : Enabled                                                              */
  SPI_RTXCTRL_RXEN_OFF                 = 0,     /*!< OFF : Disabled                                                            */
} SPI_RTXCTRL_RXEN_Enum;

/* ================================================  SPI RTXCTRL TXEN [1..1]  ================================================ */
typedef enum {                                  /*!< SPI_RTXCTRL_TXEN                                                          */
  SPI_RTXCTRL_TXEN_ON                  = 1,     /*!< ON : Enabled                                                              */
  SPI_RTXCTRL_TXEN_OFF                 = 0,     /*!< OFF : Disabled                                                            */
} SPI_RTXCTRL_TXEN_Enum;

/* ========================================================  TXFIFO  ========================================================= */
/* ========================================================  RXFIFO  ========================================================= */
/* =====================================================  TXFIFOWMCTRL  ====================================================== */
/* =====================================================  RXFIFOWMCTRL  ====================================================== */
/* ========================================================  RTXINT  ========================================================= */
/* ==============================================  SPI RTXINT RXINTFLAG [0..0]  ============================================== */
typedef enum {                                  /*!< SPI_RTXINT_RXINTFLAG                                                      */
  SPI_RTXINT_RXINTFLAG_ON              = 1,     /*!< ON : Interrupt pending                                                    */
  SPI_RTXINT_RXINTFLAG_OFF             = 0,     /*!< OFF : No interrupt                                                        */
} SPI_RTXINT_RXINTFLAG_Enum;

/* ==============================================  SPI RTXINT TXINTFLAG [1..1]  ============================================== */
typedef enum {                                  /*!< SPI_RTXINT_TXINTFLAG                                                      */
  SPI_RTXINT_TXINTFLAG_ON              = 1,     /*!< ON : Interrupt pending                                                    */
  SPI_RTXINT_TXINTFLAG_OFF             = 0,     /*!< OFF : No interrupt                                                        */
} SPI_RTXINT_TXINTFLAG_Enum;

/* ========================================================  FIFORST  ======================================================== */
/* =============================================  SPI FIFORST RXFIFORST [0..0]  ============================================== */
typedef enum {                                  /*!< SPI_FIFORST_RXFIFORST                                                     */
  SPI_FIFORST_RXFIFORST_ON             = 1,     /*!< ON : Reset                                                                */
  SPI_FIFORST_RXFIFORST_OFF            = 0,     /*!< OFF : Do not reset                                                        */
} SPI_FIFORST_RXFIFORST_Enum;

/* =============================================  SPI FIFORST TXFIFORST [1..1]  ============================================== */
typedef enum {                                  /*!< SPI_FIFORST_TXFIFORST                                                     */
  SPI_FIFORST_TXFIFORST_ON             = 1,     /*!< ON : Reset                                                                */
  SPI_FIFORST_TXFIFORST_OFF            = 0,     /*!< OFF : Do not reset                                                        */
} SPI_FIFORST_TXFIFORST_Enum;



/* =========================================================================================================================== */
/* ================                                           TIM32                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
/* ===============================================  TIM32 CTRL TIM32EN [0..0]  =============================================== */
typedef enum {                                  /*!< TIM32_CTRL_TIM32EN                                                        */
  TIM32_CTRL_TIM32EN_ON                = 1,     /*!< ON : Enabled                                                              */
  TIM32_CTRL_TIM32EN_OFF               = 0,     /*!< OFF : Disabled                                                            */
} TIM32_CTRL_TIM32EN_Enum;

/* =============================================  TIM32 CTRL TIM32INTEN [1..1]  ============================================== */
typedef enum {                                  /*!< TIM32_CTRL_TIM32INTEN                                                     */
  TIM32_CTRL_TIM32INTEN_ON             = 1,     /*!< ON : Enabled                                                              */
  TIM32_CTRL_TIM32INTEN_OFF            = 0,     /*!< OFF : Disabled                                                            */
} TIM32_CTRL_TIM32INTEN_Enum;

/* ==============================================  TIM32 CTRL TIM32DIV [2..3]  =============================================== */
typedef enum {                                  /*!< TIM32_CTRL_TIM32DIV                                                       */
  TIM32_CTRL_TIM32DIV_1                = 0,     /*!< 1 : /1                                                                    */
  TIM32_CTRL_TIM32DIV_2                = 1,     /*!< 2 : /2                                                                    */
} TIM32_CTRL_TIM32DIV_Enum;

/* ============================================  TIM32 CTRL TIM32INTFLAG [7..7]  ============================================= */
typedef enum {                                  /*!< TIM32_CTRL_TIM32INTFLAG                                                   */
  TIM32_CTRL_TIM32INTFLAG_INT_PEND     = 1,     /*!< INT_PEND : Interrupt pending                                              */
  TIM32_CTRL_TIM32INTFLAG_NOINT        = 0,     /*!< NOINT : No interrupt                                                      */
} TIM32_CTRL_TIM32INTFLAG_Enum;

/* ==========================================================  CNT  ========================================================== */
/* ========================================================  RELOAD  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           UART                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  DATA  ========================================================== */
/* ========================================================  STATUS  ========================================================= */
/* =========================================================  CTRL  ========================================================== */
/* ========================================================  INTFLAG  ======================================================== */
/* =========================================================  BAUDM  ========================================================= */
/* =========================================================  BAUDL  ========================================================= */
/* =========================================================  BAUDF  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  GPFUNC0  ======================================================== */
/* ========================================================  GPFUNC1  ======================================================== */
/* =========================================================  GPOUT  ========================================================= */
/* =========================================================  GPIN  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           FLASH                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  FLASHKEY  ======================================================== */

/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* TN2115S1_H */


/** @} */ /* End of group TN2115s1 */

/** @} */ /* End of group Fusens Micro Ltd. */
